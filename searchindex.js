Search.setIndex({"alltitles": {"1. Data augmentation": [[322, "data-augmentation"]], "1. Get started with FastMRI": [[320, "get-started-with-fastmri"]], "2. Equivariant denoiser or plug-and-play": [[322, "equivariant-denoiser-or-plug-and-play"]], "2. Train an accelerated MRI problem with neural networks": [[320, "train-an-accelerated-mri-problem-with-neural-networks"]], "3. Equivariant imaging": [[322, "equivariant-imaging"]], "3. Load raw FastMRI data": [[320, "load-raw-fastmri-data"]], "3D convolutions": [[314, "d-convolutions"]], "3D diffraction PSF": [[314, null]], "3D wavelet denoising": [[326, null]], "4. Train using raw data": [[320, "train-using-raw-data"]], "5. Explore 3D MRI": [[320, "explore-3d-mri"]], "6. Explore dynamic MRI": [[320, "explore-dynamic-mri"]], "A tour of blur operators": [[307, null]], "A tour of forward sensing operators": [[317, null]], "ADMMIteration": [[150, null]], "API": [[0, null]], "Advanced": [[302, null], [325, "advanced"]], "Advanced Transformations": [[397, "id2"]], "Advanced transforms": [[9, "advanced-transforms"], [397, "advanced-transforms"]], "Adversarial Learning": [[2, "adversarial-learning"], [305, null], [325, "adversarial-learning"], [393, "adversarial-learning"]], "Adversarial Losses Overview": [[393, "id5"]], "Adversarial Networks": [[4, "adversarial-networks"], [382, null]], "Adversarial Training": [[8, "adversarial-training"]], "AdversarialOptimizer": [[259, null]], "AdversarialTrainer": [[260, null]], "Affine": [[269, null]], "AmplitudeLoss": [[112, null]], "AmplitudeLossDistance": [[113, null]], "Apply matched filtering to recover the signal and plot the results": [[312, "apply-matched-filtering-to-recover-the-signal-and-plot-the-results"]], "Apply transformation on dataset": [[311, "apply-transformation-on-dataset"]], "Artifact Removal": [[4, "artifact-removal"], [383, null]], "Artifact2ArtifactLoss": [[32, null]], "Artifact2ArtifactSplittingMaskGenerator": [[230, null]], "ArtifactRemoval": [[77, null]], "AutoEncoder": [[78, null]], "AverageMeter": [[277, null]], "BM3D": [[79, null]], "Base Class": [[5, "base-class"]], "Base Classes": [[4, "base-classes"], [6, "base-classes"]], "Base class": [[2, "base-class"], [3, "base-class"], [9, "base-class"]], "BaseDEQ": [[273, null]], "BaseLossScheduler": [[33, null]], "BaseMaskGenerator": [[231, null]], "BaseOptim": [[114, null]], "BaseUnfold": [[274, null]], "Basics": [[323, null], [325, "basics"]], "Benefits of using a decomposable forward operator.": [[316, "benefits-of-using-a-decomposable-forward-operator"]], "BernoulliSplittingMaskGenerator": [[232, null]], "Blur": [[169, null], [317, "blur"]], "Blur generators": [[307, "blur-generators"]], "BlurFFT": [[170, null]], "Bregman": [[5, "bregman"], [115, null], [387, "bregman"]], "Bregman potentials": [[387, "id6"]], "BregmanL2": [[116, null]], "Bregman_ICNN": [[117, null]], "Build Sampler class": [[342, "build-sampler-class"]], "Building your custom sampling algorithm.": [[342, null]], "BurgEntropy": [[118, null]], "CBSD68": [[13, null]], "CMRxReconSliceDataset": [[14, null]], "CPABDiffeomorphism": [[261, null]], "CPIteration": [[151, null]], "CSGM / AmbientGAN training": [[304, "csgm-ambientgan-training"]], "CSGMGenerator": [[80, null]], "Check learned noise level": [[357, "check-learned-noise-level"]], "Classical Denoisers": [[4, "classical-denoisers"]], "Classical denoisers": [[384, "classical-denoisers"]], "Combining Physics": [[380, "combining-physics"]], "Community": [[369, null]], "Complex denoisers": [[384, "complex-denoisers"]], "Compressed Sensing": [[317, "compressed-sensing"]], "CompressedSensing": [[171, null]], "CompressiveSpectralImaging": [[172, null]], "Computation times": [[303, null], [306, null], [324, null], [330, null], [334, null], [341, null], [348, null], [359, null], [360, null], [368, null], [374, null]], "Computed Tomography": [[317, "computed-tomography"]], "Conditional GAN": [[382, "conditional-gan"]], "Conditional GAN training": [[304, "conditional-gan-training"]], "Confocal microscope PSF": [[314, "confocal-microscope-psf"]], "ConfocalBlurGenerator3D": [[233, null]], "ConvDecoder": [[81, null]], "Convolution Basics": [[307, "convolution-basics"]], "Create a Monte Carlo sampler": [[343, "create-a-monte-carlo-sampler"]], "Create a dataloader": [[309, "create-a-dataloader"], [311, "create-a-dataloader"]], "Create forward model": [[312, "create-forward-model"]], "Create the MCMC sampler": [[346, "create-the-mcmc-sampler"]], "Create the Monte Carlo sampler": [[343, "create-the-monte-carlo-sampler"]], "Create the denoising operator and solve the problem.": [[326, "create-the-denoising-operator-and-solve-the-problem"]], "Create the preconditioned and standard ULA samplers": [[342, "create-the-preconditioned-and-standard-ula-samplers"]], "Creating a custom forward operator.": [[316, "creating-a-custom-forward-operator"]], "Creating a decomposable forward operator.": [[316, "creating-a-decomposable-forward-operator"]], "Creating a forward operator.": [[316, null]], "Creating your own dataset": [[309, null]], "Custom Unfolded Architectures": [[390, "custom-unfolded-architectures"]], "Custom Unfolded Blocks": [[10, "custom-unfolded-blocks"]], "DCGANDiscriminator": [[82, null]], "DCGANGenerator": [[83, null]], "DDRM": [[250, null]], "DEQ_builder": [[275, null]], "DIV2K": [[15, null]], "DPIR": [[119, null]], "DPIR method for PnP image deblurring.": [[335, null]], "DPS": [[251, null]], "DPS Algorithm": [[345, "dps-algorithm"]], "DPS approximation": [[345, "dps-approximation"]], "DRSIteration": [[152, null]], "DRUNet": [[84, null]], "Data Fidelity": [[5, "data-fidelity"], [387, "data-fidelity"]], "Data Fidelity Overview": [[387, "id7"]], "Data Transforms": [[1, "data-transforms"], [392, "data-transforms"]], "Data fidelity step": [[344, "data-fidelity-step"]], "DataFidelity": [[120, null]], "Datasets": [[392, null]], "Datasets Overview": [[392, "id5"], [392, "id6"]], "Decolorize": [[173, null], [317, "decolorize"]], "DecomposablePhysics": [[174, null]], "Deep Denoisers": [[4, "deep-denoisers"]], "Deep Equilibrium": [[10, "deep-equilibrium"], [390, "deep-equilibrium"]], "Deep Equilibrium (DEQ) algorithms for image deblurring": [[361, null]], "Deep Image Prior": [[4, "deep-image-prior"], [382, "deep-image-prior"]], "Deep denoisers": [[384, "deep-denoisers"], [384, "id2"]], "DeepImagePrior": [[85, null]], "DeepInverse: a PyTorch library for imaging with deep learning": [[372, null]], "Define a custom iterator for the PDNet learned primal-dual algorithm.": [[364, "define-a-custom-iterator-for-the-pdnet-learned-primal-dual-algorithm"]], "Define a custom optimization algorithm": [[336, "define-a-custom-optimization-algorithm"]], "Define a forward operator": [[313, "define-a-forward-operator"]], "Define a model": [[313, "define-a-model"]], "Define diffusion schedule": [[345, "define-diffusion-schedule"]], "Define forward operator and generate dataset": [[321, "define-forward-operator-and-generate-dataset"], [365, "define-forward-operator-and-generate-dataset"]], "Define forward operator and noise model": [[310, "define-forward-operator-and-noise-model"], [342, "define-forward-operator-and-noise-model"], [343, "define-forward-operator-and-noise-model"], [346, "define-forward-operator-and-noise-model"]], "Define loss": [[355, "define-loss"]], "Define model": [[349, "define-model"], [355, "define-model"]], "Define models": [[304, "define-models"]], "Define physics": [[349, "define-physics"]], "Define physics operator": [[308, "define-physics-operator"]], "Define the  DEQ algorithm.": [[361, "define-the-deq-algorithm"]], "Define the MMSE denoiser": [[343, "define-the-mmse-denoiser"]], "Define the PnP algorithm.": [[337, "define-the-pnp-algorithm"]], "Define the custom fStep and gStep modules": [[336, "define-the-custom-fstep-and-gstep-modules"]], "Define the deep image prior": [[310, "define-the-deep-image-prior"]], "Define the likelihood": [[346, "define-the-likelihood"]], "Define the model.": [[364, "define-the-model"]], "Define the prior": [[342, "define-the-prior"], [346, "define-the-prior"]], "Define the sampling iteration": [[342, "define-the-sampling-iteration"]], "Define the trainable prior and data fidelity terms.": [[364, "define-the-trainable-prior-and-data-fidelity-terms"]], "Define the training parameters.": [[361, "define-the-training-parameters"], [362, "define-the-training-parameters"], [363, "define-the-training-parameters"], [364, "define-the-training-parameters"], [366, "define-the-training-parameters"]], "Define the unfolded PnP algorithm.": [[366, "define-the-unfolded-pnp-algorithm"]], "Define the unfolded Proximal Gradient algorithm.": [[362, "define-the-unfolded-proximal-gradient-algorithm"], [363, "define-the-unfolded-proximal-gradient-algorithm"]], "Define the unfolded trainable model.": [[364, "define-the-unfolded-trainable-model"]], "Defining New Operators": [[378, null]], "Definition of forward operator and noise model": [[332, "definition-of-forward-operator-and-noise-model"]], "Demosaicing": [[175, null], [317, "demosaicing"]], "Denoiser": [[86, null]], "Denoisers": [[384, null]], "Denoisers Utilities": [[384, "denoisers-utilities"]], "Denoisers Utils": [[4, "denoisers-utils"]], "Denoising": [[176, null], [317, "denoising"], [331, "denoising"]], "Denoising Losses": [[393, "id2"]], "Denoising step": [[344, "denoising-step"], [345, "denoising-step"]], "DiffPIR": [[252, null]], "DiffUNet": [[87, null]], "Diffraction PSF generation": [[314, "diffraction-psf-generation"]], "Diffraction blur generators": [[307, "diffraction-blur-generators"]], "DiffractionBlurGenerator": [[234, null]], "DiffractionBlurGenerator3D": [[235, null]], "Diffusion": [[7, "diffusion"], [388, "diffusion"]], "Diffusion and MCMC Algorithms": [[388, null]], "Diffusion methods": [[388, "id2"]], "Diffusion model loading": [[345, "diffusion-model-loading"]], "DiffusionSampler": [[253, null]], "Discriminator Networks": [[382, "id2"]], "DiscriminatorLoss": [[56, null]], "DiscriminatorMetric": [[57, null]], "Display final estimated phase retrieval": [[318, "display-final-estimated-phase-retrieval"]], "Display probe overlap": [[318, "display-probe-overlap"]], "Distance": [[5, "distance"], [121, null]], "DnCNN": [[88, null]], "Downsampling": [[177, null]], "Dynamic networks": [[384, "dynamic-networks"]], "DynamicMRI": [[178, null]], "EILoss": [[34, null]], "EPLL": [[122, null]], "EPLLDenoiser": [[89, null]], "ERGAS": [[64, null]], "ESRGANDiscriminator": [[90, null]], "EquispacedMaskGenerator": [[236, null]], "Equivariant denoisers": [[384, "equivariant-denoisers"]], "EquivariantDenoiser": [[91, null]], "Euclidean": [[270, null]], "Evaluate the model on the problem and plot the results.": [[327, "evaluate-the-model-on-the-problem-and-plot-the-results"], [328, "evaluate-the-model-on-the-problem-and-plot-the-results"], [336, "evaluate-the-model-on-the-problem-and-plot-the-results"], [337, "evaluate-the-model-on-the-problem-and-plot-the-results"], [339, "evaluate-the-model-on-the-problem-and-plot-the-results"]], "Evaluate the model on the problem.": [[335, "evaluate-the-model-on-the-problem"], [338, "evaluate-the-model-on-the-problem"]], "Evaluate the reconstruction algorithm on the problem.": [[308, "evaluate-the-reconstruction-algorithm-on-the-problem"]], "Examples": [[325, null]], "Examples using AdversarialOptimizer:": [[259, "examples-using-adversarialoptimizer"]], "Examples using AdversarialTrainer:": [[260, "examples-using-adversarialtrainer"]], "Examples using Affine:": [[269, "examples-using-affine"]], "Examples using Artifact2ArtifactLoss:": [[32, "examples-using-artifact2artifactloss"]], "Examples using ArtifactRemoval:": [[77, "examples-using-artifactremoval"]], "Examples using BaseDEQ:": [[273, "examples-using-basedeq"]], "Examples using BaseMaskGenerator:": [[231, "examples-using-basemaskgenerator"]], "Examples using BaseOptim:": [[114, "examples-using-baseoptim"]], "Examples using BaseUnfold:": [[274, "examples-using-baseunfold"]], "Examples using BernoulliSplittingMaskGenerator:": [[232, "examples-using-bernoullisplittingmaskgenerator"]], "Examples using Blur:": [[169, "examples-using-blur"]], "Examples using BlurFFT:": [[170, "examples-using-blurfft"]], "Examples using Bregman:": [[115, "examples-using-bregman"]], "Examples using BurgEntropy:": [[118, "examples-using-burgentropy"]], "Examples using CMRxReconSliceDataset:": [[14, "examples-using-cmrxreconslicedataset"]], "Examples using CPABDiffeomorphism:": [[261, "examples-using-cpabdiffeomorphism"]], "Examples using CPIteration:": [[151, "examples-using-cpiteration"]], "Examples using CSGMGenerator:": [[80, "examples-using-csgmgenerator"]], "Examples using CompressedSensing:": [[171, "examples-using-compressedsensing"]], "Examples using CompressiveSpectralImaging:": [[172, "examples-using-compressivespectralimaging"]], "Examples using ConfocalBlurGenerator3D:": [[233, "examples-using-confocalblurgenerator3d"]], "Examples using ConvDecoder:": [[81, "examples-using-convdecoder"]], "Examples using DCGANDiscriminator:": [[82, "examples-using-dcgandiscriminator"]], "Examples using DCGANGenerator:": [[83, "examples-using-dcgangenerator"]], "Examples using DDRM:": [[250, "examples-using-ddrm"]], "Examples using DEQ_builder:": [[275, "examples-using-deq-builder"]], "Examples using DPIR:": [[119, "examples-using-dpir"]], "Examples using DPS:": [[251, "examples-using-dps"]], "Examples using DRUNet:": [[84, "examples-using-drunet"]], "Examples using DataFidelity:": [[120, "examples-using-datafidelity"]], "Examples using Decolorize:": [[173, "examples-using-decolorize"]], "Examples using DecomposablePhysics:": [[174, "examples-using-decomposablephysics"]], "Examples using DeepImagePrior:": [[85, "examples-using-deepimageprior"]], "Examples using Demosaicing:": [[175, "examples-using-demosaicing"]], "Examples using Denoiser:": [[86, "examples-using-denoiser"]], "Examples using Denoising:": [[176, "examples-using-denoising"]], "Examples using DiffPIR:": [[252, "examples-using-diffpir"]], "Examples using DiffUNet:": [[87, "examples-using-diffunet"]], "Examples using DiffractionBlurGenerator3D:": [[235, "examples-using-diffractionblurgenerator3d"]], "Examples using DiffractionBlurGenerator:": [[234, "examples-using-diffractionblurgenerator"]], "Examples using DiffusionSampler:": [[253, "examples-using-diffusionsampler"]], "Examples using DiscriminatorLoss:": [[56, "examples-using-discriminatorloss"]], "Examples using DnCNN:": [[88, "examples-using-dncnn"]], "Examples using Downsampling:": [[177, "examples-using-downsampling"]], "Examples using DynamicMRI:": [[178, "examples-using-dynamicmri"]], "Examples using EILoss:": [[34, "examples-using-eiloss"]], "Examples using EPLL:": [[122, "examples-using-epll"]], "Examples using ERGAS:": [[64, "examples-using-ergas"]], "Examples using EquispacedMaskGenerator:": [[236, "examples-using-equispacedmaskgenerator"]], "Examples using EquivariantDenoiser:": [[91, "examples-using-equivariantdenoiser"]], "Examples using Euclidean:": [[270, "examples-using-euclidean"]], "Examples using FNEJacobianSpectralNorm:": [[35, "examples-using-fnejacobianspectralnorm"]], "Examples using FastMRISliceDataset:": [[17, "examples-using-fastmrislicedataset"]], "Examples using GDIteration:": [[154, "examples-using-gditeration"]], "Examples using GSDRUNet:": [[92, "examples-using-gsdrunet"]], "Examples using GammaNoise:": [[179, "examples-using-gammanoise"]], "Examples using GaussianMaskGenerator:": [[237, "examples-using-gaussianmaskgenerator"]], "Examples using GaussianNoise:": [[180, "examples-using-gaussiannoise"]], "Examples using GaussianSplittingMaskGenerator:": [[238, "examples-using-gaussiansplittingmaskgenerator"]], "Examples using GeneratorLoss:": [[58, "examples-using-generatorloss"]], "Examples using GeneratorMixture:": [[239, "examples-using-generatormixture"]], "Examples using HDF5Dataset:": [[19, "examples-using-hdf5dataset"]], "Examples using Homography:": [[262, "examples-using-homography"]], "Examples using HyperSpectralUnmixing:": [[182, "examples-using-hyperspectralunmixing"]], "Examples using IndicatorL2:": [[124, "examples-using-indicatorl2"]], "Examples using Inpainting:": [[183, "examples-using-inpainting"]], "Examples using L1:": [[126, "examples-using-l1"]], "Examples using L2:": [[130, "examples-using-l2"]], "Examples using LinearPhysics:": [[184, "examples-using-linearphysics"]], "Examples using LogPoissonLikelihood:": [[132, "examples-using-logpoissonlikelihood"]], "Examples using LogPoissonNoise:": [[185, "examples-using-logpoissonnoise"]], "Examples using Loss:": [[39, "examples-using-loss"]], "Examples using MCLoss:": [[40, "examples-using-mcloss"]], "Examples using MOILoss:": [[42, "examples-using-moiloss"]], "Examples using MRI:": [[186, "examples-using-mri"]], "Examples using MRIMixin:": [[187, "examples-using-mrimixin"]], "Examples using MedianFilter:": [[94, "examples-using-medianfilter"]], "Examples using MonteCarlo:": [[254, "examples-using-montecarlo"]], "Examples using MotionBlurGenerator:": [[240, "examples-using-motionblurgenerator"]], "Examples using MultiCoilMRI:": [[188, "examples-using-multicoilmri"]], "Examples using NBUDataset:": [[23, "examples-using-nbudataset"]], "Examples using Neighbor2Neighbor:": [[43, "examples-using-neighbor2neighbor"]], "Examples using NoiseModel:": [[189, "examples-using-noisemodel"]], "Examples using OptimIterator:": [[135, "examples-using-optimiterator"]], "Examples using PDNet_DualBlock:": [[95, "examples-using-pdnet-dualblock"]], "Examples using PDNet_PrimalBlock:": [[96, "examples-using-pdnet-primalblock"]], "Examples using PGDIteration:": [[157, "examples-using-pgditeration"]], "Examples using PSFGenerator:": [[241, "examples-using-psfgenerator"]], "Examples using PanNet:": [[97, "examples-using-pannet"]], "Examples using PanTiltRotate:": [[271, "examples-using-pantiltrotate"]], "Examples using Pansharpen:": [[190, "examples-using-pansharpen"]], "Examples using PatchDataset:": [[24, "examples-using-patchdataset"]], "Examples using PatchGANDiscriminator:": [[98, "examples-using-patchgandiscriminator"]], "Examples using PatchNR:": [[136, "examples-using-patchnr"]], "Examples using PatchPrior:": [[137, "examples-using-patchprior"]], "Examples using Phase2PhaseLoss:": [[44, "examples-using-phase2phaseloss"]], "Examples using PhaseRetrieval:": [[191, "examples-using-phaseretrieval"]], "Examples using Physics:": [[192, "examples-using-physics"]], "Examples using PhysicsGenerator:": [[243, "examples-using-physicsgenerator"]], "Examples using PnP:": [[138, "examples-using-pnp"]], "Examples using PoissonGaussianNoise:": [[193, "examples-using-poissongaussiannoise"]], "Examples using PoissonLikelihood:": [[139, "examples-using-poissonlikelihood"]], "Examples using PoissonNoise:": [[194, "examples-using-poissonnoise"]], "Examples using Potential:": [[141, "examples-using-potential"]], "Examples using Prior:": [[142, "examples-using-prior"]], "Examples using ProductConvolutionBlurGenerator:": [[244, "examples-using-productconvolutionblurgenerator"]], "Examples using Ptychography:": [[195, "examples-using-ptychography"]], "Examples using R2RLoss:": [[45, "examples-using-r2rloss"]], "Examples using RED:": [[143, "examples-using-red"]], "Examples using RadioInterferometry:": [[197, "examples-using-radiointerferometry"]], "Examples using RandomMaskGenerator:": [[245, "examples-using-randommaskgenerator"]], "Examples using RandomPhaseRetrieval:": [[198, "examples-using-randomphaseretrieval"]], "Examples using Reconstructor:": [[99, "examples-using-reconstructor"]], "Examples using Reflect:": [[263, "examples-using-reflect"]], "Examples using Rotate:": [[264, "examples-using-rotate"]], "Examples using Scale:": [[265, "examples-using-scale"]], "Examples using ScorePrior:": [[144, "examples-using-scoreprior"]], "Examples using SequentialMRI:": [[199, "examples-using-sequentialmri"]], "Examples using Shift:": [[266, "examples-using-shift"]], "Examples using Similarity:": [[272, "examples-using-similarity"]], "Examples using SimpleFastMRISliceDataset:": [[26, "examples-using-simplefastmrislicedataset"]], "Examples using SinglePhotonLidar:": [[200, "examples-using-singlephotonlidar"]], "Examples using SinglePixelCamera:": [[201, "examples-using-singlepixelcamera"]], "Examples using SpaceVaryingBlur:": [[202, "examples-using-spacevaryingblur"]], "Examples using SpectralAngleMapper:": [[76, "examples-using-spectralanglemapper"]], "Examples using SplittingLoss:": [[48, "examples-using-splittingloss"]], "Examples using StackedLinearPhysics:": [[203, "examples-using-stackedlinearphysics"]], "Examples using StackedPhysics:": [[204, "examples-using-stackedphysics"]], "Examples using StackedPhysicsLoss:": [[49, "examples-using-stackedphysicsloss"]], "Examples using SupAdversarialDiscriminatorLoss:": [[59, "examples-using-supadversarialdiscriminatorloss"]], "Examples using SupAdversarialGeneratorLoss:": [[60, "examples-using-supadversarialgeneratorloss"]], "Examples using SupLoss:": [[51, "examples-using-suploss"]], "Examples using SureGaussianLoss:": [[52, "examples-using-suregaussianloss"]], "Examples using SurePGLoss:": [[53, "examples-using-surepgloss"]], "Examples using SurePoissonLoss:": [[54, "examples-using-surepoissonloss"]], "Examples using TVPrior:": [[146, "examples-using-tvprior"]], "Examples using TimeMixin:": [[207, "examples-using-timemixin"]], "Examples using Tomography:": [[208, "examples-using-tomography"]], "Examples using Trainer:": [[12, "examples-using-trainer"]], "Examples using Transform:": [[268, "examples-using-transform"]], "Examples using UAIRGeneratorLoss:": [[61, "examples-using-uairgeneratorloss"]], "Examples using ULA:": [[256, "examples-using-ula"]], "Examples using UNet:": [[107, "examples-using-unet"]], "Examples using UniformNoise:": [[210, "examples-using-uniformnoise"]], "Examples using UnsupAdversarialDiscriminatorLoss:": [[62, "examples-using-unsupadversarialdiscriminatorloss"]], "Examples using UnsupAdversarialGeneratorLoss:": [[63, "examples-using-unsupadversarialgeneratorloss"]], "Examples using Urban100HR:": [[27, "examples-using-urban100hr"]], "Examples using VarNet:": [[108, "examples-using-varnet"]], "Examples using WaveletDenoiser:": [[109, "examples-using-waveletdenoiser"]], "Examples using WaveletDictDenoiser:": [[110, "examples-using-waveletdictdenoiser"]], "Examples using WaveletPrior:": [[148, "examples-using-waveletprior"]], "Examples using build_probe:": [[247, "examples-using-build-probe"]], "Examples using correct_global_phase:": [[161, "examples-using-correct-global-phase"]], "Examples using demo_mri_model:": [[280, "examples-using-demo-mri-model"]], "Examples using dirac_like:": [[281, "examples-using-dirac-like"]], "Examples using fStep:": [[159, "examples-using-fstep"]], "Examples using gStep:": [[160, "examples-using-gstep"]], "Examples using gaussian_blur:": [[214, "examples-using-gaussian-blur"]], "Examples using generate_dataset:": [[28, "examples-using-generate-dataset"]], "Examples using generate_shifts:": [[248, "examples-using-generate-shifts"]], "Examples using get_data_home:": [[282, "examples-using-get-data-home"]], "Examples using get_degradation_url:": [[283, "examples-using-get-degradation-url"]], "Examples using get_freer_gpu:": [[284, "examples-using-get-freer-gpu"]], "Examples using get_image_url:": [[285, "examples-using-get-image-url"]], "Examples using load_dataset:": [[287, "examples-using-load-dataset"]], "Examples using load_degradation:": [[288, "examples-using-load-degradation"]], "Examples using load_url_image:": [[290, "examples-using-load-url-image"]], "Examples using optim_builder:": [[149, "examples-using-optim-builder"]], "Examples using plot:": [[292, "examples-using-plot"]], "Examples using plot_curves:": [[293, "examples-using-plot-curves"]], "Examples using plot_inset:": [[294, "examples-using-plot-inset"]], "Examples using plot_ortho3D:": [[295, "examples-using-plot-ortho3d"]], "Examples using plot_parameters:": [[296, "examples-using-plot-parameters"]], "Examples using plot_videos:": [[297, "examples-using-plot-videos"]], "Examples using spectral_methods:": [[162, "examples-using-spectral-methods"]], "Examples using test:": [[257, "examples-using-test"]], "Examples using train:": [[258, "examples-using-train"]], "Examples using unfolded_builder:": [[276, "examples-using-unfolded-builder"]], "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting": [[331, null]], "Exploring the total variation prior.": [[327, "exploring-the-total-variation-prior"]], "Exploring the wavelet prior.": [[328, "exploring-the-wavelet-prior"]], "Extension to multiple wavelet bases.": [[326, "extension-to-multiple-wavelet-bases"]], "FISTAIteration": [[153, null]], "FMD": [[16, null]], "FNEJacobianSpectralNorm": [[35, null]], "FastMRISliceDataset": [[17, null]], "Finding Help": [[371, null]], "FixedPoint": [[123, null]], "Flickr2kHR": [[18, null]], "Full Reference Metrics": [[3, "full-reference-metrics"], [394, "full-reference-metrics"], [394, "id3"]], "Functional": [[6, "functional"], [379, null]], "Functional Routines Overview": [[379, "id1"]], "Future events": [[369, "future-events"]], "GDIteration": [[154, null]], "GSDRUNet": [[92, null]], "GammaNoise": [[179, null]], "GaussianMaskGenerator": [[237, null]], "GaussianMixtureModel": [[163, null]], "GaussianNoise": [[180, null]], "GaussianSplittingMaskGenerator": [[238, null]], "General setup": [[315, "general-setup"], [318, "general-setup"]], "Generate a dataset of blurred images": [[308, "generate-a-dataset-of-blurred-images"]], "Generate a dataset of blurred images and load it.": [[327, "generate-a-dataset-of-blurred-images-and-load-it"], [335, "generate-a-dataset-of-blurred-images-and-load-it"]], "Generate a dataset of compressed measurements and load it.": [[362, "generate-a-dataset-of-compressed-measurements-and-load-it"], [363, "generate-a-dataset-of-compressed-measurements-and-load-it"]], "Generate a dataset of degraded images and load it.": [[309, "generate-a-dataset-of-degraded-images-and-load-it"]], "Generate a dataset of knee images and load it.": [[351, "generate-a-dataset-of-knee-images-and-load-it"]], "Generate a dataset of low resolution images and load it.": [[361, "generate-a-dataset-of-low-resolution-images-and-load-it"], [366, "generate-a-dataset-of-low-resolution-images-and-load-it"]], "Generate a dataset of noisy images": [[353, "generate-a-dataset-of-noisy-images"], [354, "generate-a-dataset-of-noisy-images"], [356, "generate-a-dataset-of-noisy-images"], [357, "generate-a-dataset-of-noisy-images"]], "Generate a dataset of subsampled images and load it.": [[352, "generate-a-dataset-of-subsampled-images-and-load-it"]], "Generate an inpainting problem": [[328, "generate-an-inpainting-problem"]], "Generate an inverse problem": [[344, "generate-an-inverse-problem"]], "Generate and visualize probe and measurements": [[318, "generate-and-visualize-probe-and-measurements"]], "Generate dataset": [[304, "generate-dataset"]], "Generate the measurement": [[310, "generate-the-measurement"], [342, "generate-the-measurement"], [343, "generate-the-measurement"], [346, "generate-the-measurement"]], "Generate toy image": [[316, "generate-toy-image"]], "Generate toy signal and measurement": [[312, "generate-toy-signal-and-measurement"]], "Generating Datasets": [[1, "generating-datasets"], [392, "generating-datasets"]], "Generator Mixture": [[307, "generator-mixture"]], "GeneratorLoss": [[58, null]], "GeneratorMixture": [[239, null]], "Generators": [[6, "generators"]], "Gradient descent for phase retrieval": [[318, "gradient-descent-for-phase-retrieval"]], "Groundtruth image": [[301, "groundtruth-image"]], "HDF5Dataset": [[19, null]], "HQSIteration": [[155, null]], "Haze": [[181, null]], "Homography": [[262, null]], "How to Contribute": [[370, null]], "HyperSpectralUnmixing": [[182, null]], "ICNN": [[93, null]], "IRadon": [[216, null]], "Image Datasets": [[1, "image-datasets"]], "Image deblurring with Total-Variation (TV) prior": [[327, null]], "Image deblurring with custom deep explicit prior.": [[308, null]], "Image inpainting with wavelet prior": [[328, null]], "Image reconstruction with a diffusion model": [[343, null]], "Image transformations for Equivariant Imaging": [[350, null]], "Image transforms for equivariance & augmentations": [[322, null]], "Imaging inverse problems with adversarial networks": [[304, null]], "Implementing DPS": [[345, null]], "Implementing DiffPIR": [[344, null]], "Implementing an Algorithm": [[386, "implementing-an-algorithm"]], "Import required packages": [[301, "import-required-packages"]], "IndicatorL2": [[124, null]], "IndicatorL2Distance": [[125, null]], "Inpainting": [[183, null], [317, "inpainting"], [331, "inpainting"]], "Installing dependencies": [[345, "installing-dependencies"]], "InterleavedEpochLossScheduler": [[36, null]], "InterleavedLossScheduler": [[37, null]], "Introduction": [[380, null], [385, null], [393, "introduction"], [394, "introduction"]], "Iterating the Dykstra-like algorithm.": [[326, "iterating-the-dykstra-like-algorithm"]], "Iterative Reconstruction (PnP, RED, etc.)": [[386, null]], "Iterators": [[5, "iterators"], [387, "iterators"]], "JacobianSpectralNorm": [[38, null]], "Kohler": [[20, null]], "L1": [[126, null]], "L12Prior": [[127, null]], "L1Distance": [[128, null]], "L1L2": [[65, null]], "L1Prior": [[129, null]], "L2": [[130, null]], "L2Distance": [[131, null]], "LPIPS": [[66, null]], "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing": [[362, null]], "Learned Primal-Dual algorithm for CT scan.": [[364, null]], "Learned iterative custom prior": [[363, null]], "LidcIdriSliceDataset": [[21, null]], "Linear operators": [[380, "linear-operators"]], "LinearPhysics": [[184, null]], "List of mathematical symbols": [[376, "id1"]], "Load base image datasets": [[309, "load-base-image-datasets"], [353, "load-base-image-datasets"], [354, "load-base-image-datasets"], [356, "load-base-image-datasets"], [357, "load-base-image-datasets"]], "Load base image datasets and degradation operators.": [[308, "load-base-image-datasets-and-degradation-operators"], [321, "load-base-image-datasets-and-degradation-operators"], [327, "load-base-image-datasets-and-degradation-operators"], [328, "load-base-image-datasets-and-degradation-operators"], [335, "load-base-image-datasets-and-degradation-operators"], [336, "load-base-image-datasets-and-degradation-operators"], [338, "load-base-image-datasets-and-degradation-operators"], [351, "load-base-image-datasets-and-degradation-operators"], [352, "load-base-image-datasets-and-degradation-operators"], [361, "load-base-image-datasets-and-degradation-operators"], [362, "load-base-image-datasets-and-degradation-operators"], [363, "load-base-image-datasets-and-degradation-operators"], [365, "load-base-image-datasets-and-degradation-operators"], [366, "load-base-image-datasets-and-degradation-operators"]], "Load base volume image and denoising operators.": [[326, "load-base-volume-image-and-denoising-operators"]], "Load data": [[349, "load-data"]], "Load degradation operator.": [[364, "load-degradation-operator"]], "Load example image from the internet": [[343, "load-example-image-from-the-internet"]], "Load image and parameters": [[339, "load-image-and-parameters"]], "Load image from the internet": [[310, "load-image-from-the-internet"], [315, "load-image-from-the-internet"], [317, "load-image-from-the-internet"], [318, "load-image-from-the-internet"], [342, "load-image-from-the-internet"], [346, "load-image-from-the-internet"]], "Load libraries": [[311, "load-libraries"]], "Load raw pan-sharpening measurements": [[319, "load-raw-pan-sharpening-measurements"]], "Load test image and model": [[331, "load-test-image-and-model"]], "Load training and test images": [[332, "load-training-and-test-images"]], "Loading the model": [[313, "loading-the-model"], [365, "loading-the-model"]], "LogPoissonLikelihood": [[132, null]], "LogPoissonLikelihoodDistance": [[133, null]], "LogPoissonNoise": [[185, null]], "Logging": [[11, "logging"], [377, "logging"]], "Logging functionality": [[377, "id6"]], "Loss": [[39, null]], "Loss schedulers": [[2, "loss-schedulers"], [393, "loss-schedulers"]], "LpNorm": [[67, null]], "LsdirHR": [[22, null]], "MAE": [[68, null]], "MCLoss": [[40, null]], "MCMC methods": [[388, "id3"]], "MDIteration": [[156, null]], "MOEILoss": [[41, null]], "MOILoss": [[42, null]], "MRI": [[186, null], [317, "mri"]], "MRIMixin": [[187, null]], "MSE": [[69, null]], "Markov Chain Monte Carlo": [[388, "markov-chain-monte-carlo"]], "Markov Chain Monte Carlo Langevin": [[7, "markov-chain-monte-carlo-langevin"]], "Math Notation": [[376, null]], "Measurements generation": [[315, "measurements-generation"]], "MedianFilter": [[94, null]], "Metric": [[70, null]], "Metrics": [[394, null]], "MonteCarlo": [[254, null]], "Motion blur generators": [[307, "motion-blur-generators"]], "MotionBlurGenerator": [[240, null]], "MultiCoilMRI": [[188, null]], "NBUDataset": [[23, null]], "NIQE": [[71, null]], "NMSE": [[72, null]], "Natural weighting and Briggs weighting": [[301, "natural-weighting-and-briggs-weighting"]], "NegEntropy": [[134, null]], "Neighbor2Neighbor": [[43, null]], "Network Regularization": [[2, "network-regularization"], [393, "network-regularization"]], "Network Regularization Losses Overview": [[393, "id4"]], "No Reference Metrics": [[3, "no-reference-metrics"], [394, "no-reference-metrics"], [394, "id4"]], "Noise Distributions and Their Probability Distributions": [[381, "id2"]], "Noise distributions": [[6, "noise-distributions"], [381, "noise-distributions"]], "NoiseModel": [[189, null]], "Non-Learned Denoisers Overview": [[384, "id3"]], "Operators": [[6, "operators"], [375, "operators"], [381, "operators"]], "Operators & Noise": [[381, null]], "Operators, Definitions, and Generators": [[381, "id1"]], "OptimIterator": [[135, null]], "Optimization": [[325, "optimization"], [329, null], [387, null]], "Other": [[11, "other"], [377, "other"]], "Other Datasets": [[1, "other-datasets"]], "Other self-supervised losses": [[393, "id3"]], "Overall comparison": [[315, "overall-comparison"]], "PDNet_DualBlock": [[95, null]], "PDNet_PrimalBlock": [[96, null]], "PGDIteration": [[157, null]], "PSFGenerator": [[241, null]], "PSNR": [[73, null]], "Pan-sharpening": [[317, "pan-sharpening"]], "PanNet": [[97, null]], "PanTiltRotate": [[271, null]], "Pansharpen": [[190, null]], "Parameter-dependent operators": [[380, "parameter-dependent-operators"]], "Parameters": [[387, "parameters"]], "Past events": [[369, "past-events"]], "Patch Priors": [[325, "patch-priors"], [333, null]], "Patch priors for limited-angle computed tomography": [[332, null]], "PatchDataset": [[24, null]], "PatchGANDiscriminator": [[98, null]], "PatchNR": [[136, null]], "PatchPrior": [[137, null]], "Phase correction and signal reconstruction": [[315, "phase-correction-and-signal-reconstruction"], [315, "id1"], [315, "id2"], [315, "id3"]], "Phase2PhaseLoss": [[44, null]], "Phase2PhaseSplittingMaskGenerator": [[242, null]], "PhaseRetrieval": [[191, null]], "Physics": [[192, null]], "Physics Generators": [[380, "physics-generators"]], "PhysicsGenerator": [[243, null]], "PlaceholderDataset": [[29, null]], "Plotting": [[11, "plotting"], [377, "plotting"]], "Plotting the learned parameters.": [[362, "plotting-the-learned-parameters"]], "Plotting the weights of the network.": [[363, "plotting-the-weights-of-the-network"], [366, "plotting-the-weights-of-the-network"]], "Plug-and-Play": [[325, "plug-and-play"], [340, null]], "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.": [[337, null]], "PnP": [[138, null]], "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)": [[336, null]], "PoissonGaussianNoise": [[193, null]], "PoissonLikelihood": [[139, null]], "PoissonLikelihoodDistance": [[140, null]], "PoissonNoise": [[194, null]], "Potential": [[141, null]], "Potentials": [[5, "potentials"], [387, "potentials"]], "Predefined Algorithms": [[387, "predefined-algorithms"]], "Predefined Datasets": [[392, "predefined-datasets"]], "Predefined Iterative Algorithms": [[386, "predefined-iterative-algorithms"]], "Predefined methods": [[386, "id1"]], "Predefined models": [[5, "predefined-models"]], "Prep loss": [[349, "prep-loss"]], "Prepare data": [[355, "prepare-data"]], "Prepare phase input": [[318, "prepare-phase-input"]], "Pretrained Weights": [[391, null]], "Prior": [[142, null]], "Priors": [[5, "priors"], [387, "priors"]], "Priors Overview": [[387, "id8"]], "ProductConvolutionBlurGenerator": [[244, null]], "ProgressMeter": [[278, null]], "Ptychography": [[195, null]], "Ptychography phase retrieval": [[318, null]], "PtychographyLinearOperator": [[196, null]], "Putting it all together: the DiffPIR algorithm": [[344, "putting-it-all-together-the-diffpir-algorithm"]], "QNR": [[74, null]], "Quickstart": [[373, null]], "R2RLoss": [[45, null]], "RED": [[143, null]], "Radio interferometric imaging with deepinverse": [[301, null]], "RadioInterferometry": [[197, null]], "Radon": [[217, null]], "Random phase retrieval and reconstruction methods.": [[315, null]], "RandomLossScheduler": [[46, null]], "RandomMaskGenerator": [[245, null]], "RandomPhaseRetrieval": [[198, null]], "Reconstructing an image using the deep image prior.": [[310, null]], "Reconstruction": [[375, "reconstruction"]], "Reconstruction loop": [[332, "reconstruction-loop"]], "Reconstruction methods": [[385, "id1"]], "Reconstruction with gradient descent and PnP denoisers": [[315, "reconstruction-with-gradient-descent-and-pnp-denoisers"]], "Reconstruction with gradient descent and random initialization": [[315, "reconstruction-with-gradient-descent-and-random-initialization"]], "Reconstruction with gradient descent and spectral methods initialization": [[315, "reconstruction-with-gradient-descent-and-spectral-methods-initialization"]], "Reconstruction with spectral methods": [[315, "reconstruction-with-spectral-methods"]], "Reconstructor": [[99, null]], "Reflect": [[263, null]], "Regularization by Denoising (RED) for Super-Resolution.": [[338, null]], "Remote sensing with satellite images": [[319, null]], "Rescale": [[30, null]], "Restormer": [[100, null]], "Rotate": [[264, null]], "Run DIP algorithm and plot results": [[310, "run-dip-algorithm-and-plot-results"]], "Run and plot": [[332, "run-and-plot"]], "Run sampling algorithm and plot results": [[343, "run-sampling-algorithm-and-plot-results"], [346, "run-sampling-algorithm-and-plot-results"]], "Run sampling algorithms and plot results": [[342, "run-sampling-algorithms-and-plot-results"]], "Run the diffusion algorithm and plot results": [[343, "run-the-diffusion-algorithm-and-plot-results"]], "SCUNet": [[101, null]], "SKRock": [[255, null]], "SMIteration": [[158, null]], "SSIM": [[75, null]], "Sampling": [[325, "sampling"], [347, null]], "Sampling pattern": [[301, "sampling-pattern"]], "Sampling step": [[344, "sampling-step"]], "Saving and loading models": [[313, null]], "Saving the model": [[313, "saving-the-model"], [365, "saving-the-model"]], "Scale": [[265, null]], "Schedulers Overview": [[393, "id6"]], "ScoreLoss": [[47, null]], "ScorePrior": [[144, null]], "Self-Supervised Learning": [[2, "self-supervised-learning"], [325, "self-supervised-learning"], [358, null], [393, "self-supervised-learning"]], "Self-supervised MRI reconstruction with Artifact2Artifact": [[349, null]], "Self-supervised denoising with the Generalized R2R loss.": [[354, null]], "Self-supervised denoising with the Neighbor2Neighbor loss.": [[353, null]], "Self-supervised denoising with the SURE loss.": [[356, null]], "Self-supervised denoising with the UNSURE loss.": [[357, null]], "Self-supervised learning from incomplete measurements of multiple operators.": [[352, null]], "Self-supervised learning with Equivariant Imaging for MRI.": [[351, null]], "Self-supervised learning with measurement splitting": [[355, null]], "SequentialMRI": [[199, null]], "Set parameters for EPLL and PatchNR": [[332, "set-parameters-for-epll-and-patchnr"]], "Set the forward operator": [[336, "set-the-forward-operator"], [339, "set-the-forward-operator"]], "Set up ptychography physics model": [[318, "set-up-ptychography-physics-model"]], "Set up the DPIR algorithm to solve the inverse problem.": [[335, "set-up-the-dpir-algorithm-to-solve-the-inverse-problem"]], "Set up the PnP algorithm to solve the inverse problem.": [[336, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"], [339, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"]], "Set up the denoiser network": [[353, "set-up-the-denoiser-network"], [354, "set-up-the-denoiser-network"], [356, "set-up-the-denoiser-network"], [357, "set-up-the-denoiser-network"]], "Set up the optimization algorithm to solve the inverse problem.": [[308, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [327, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [328, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"]], "Set up the reconstruction network": [[321, "set-up-the-reconstruction-network"], [351, "set-up-the-reconstruction-network"], [352, "set-up-the-reconstruction-network"], [365, "set-up-the-reconstruction-network"]], "Set up the training parameters": [[351, "set-up-the-training-parameters"], [352, "set-up-the-training-parameters"], [353, "set-up-the-training-parameters"], [354, "set-up-the-training-parameters"], [356, "set-up-the-training-parameters"], [357, "set-up-the-training-parameters"]], "Set14HR": [[25, null]], "Setting the noise and regularization schedules": [[344, "setting-the-noise-and-regularization-schedules"]], "Setup paths for data loading and results": [[313, "setup-paths-for-data-loading-and-results"]], "Setup paths for data loading and results.": [[308, "setup-paths-for-data-loading-and-results"], [309, "setup-paths-for-data-loading-and-results"], [321, "setup-paths-for-data-loading-and-results"], [326, "setup-paths-for-data-loading-and-results"], [327, "setup-paths-for-data-loading-and-results"], [328, "setup-paths-for-data-loading-and-results"], [335, "setup-paths-for-data-loading-and-results"], [336, "setup-paths-for-data-loading-and-results"], [337, "setup-paths-for-data-loading-and-results"], [338, "setup-paths-for-data-loading-and-results"], [339, "setup-paths-for-data-loading-and-results"], [351, "setup-paths-for-data-loading-and-results"], [352, "setup-paths-for-data-loading-and-results"], [353, "setup-paths-for-data-loading-and-results"], [354, "setup-paths-for-data-loading-and-results"], [356, "setup-paths-for-data-loading-and-results"], [357, "setup-paths-for-data-loading-and-results"], [361, "setup-paths-for-data-loading-and-results"], [362, "setup-paths-for-data-loading-and-results"], [363, "setup-paths-for-data-loading-and-results"], [364, "setup-paths-for-data-loading-and-results"], [365, "setup-paths-for-data-loading-and-results"], [366, "setup-paths-for-data-loading-and-results"]], "Setup the PnP algorithm. This involves in particular the definition of a custom prior class.": [[338, "setup-the-pnp-algorithm-this-involves-in-particular-the-definition-of-a-custom-prior-class"]], "Shift": [[266, null]], "ShiftTime": [[267, null]], "Shuffle data with buffer shuffling": [[311, "shuffle-data-with-buffer-shuffling"]], "SigmaGenerator": [[246, null]], "Signal construction": [[315, "signal-construction"]], "Similarity": [[272, null]], "Simple Transformations": [[397, "id1"]], "Simple transforms": [[9, "simple-transforms"], [397, "simple-transforms"]], "SimpleFastMRISliceDataset": [[26, null]], "Simulate remote-sensing measurements": [[319, "simulate-remote-sensing-measurements"]], "Simulating the measurements": [[301, "simulating-the-measurements"]], "Single photon lidar operator for depth ranging.": [[312, null]], "Single-Pixel Camera": [[317, "single-pixel-camera"]], "SinglePhotonLidar": [[200, null]], "SinglePixelCamera": [[201, null]], "Solving pan-sharpening with neural networks": [[319, "solving-pan-sharpening-with-neural-networks"]], "Solving the problem with a wavelet prior": [[301, "solving-the-problem-with-a-wavelet-prior"]], "Space varying blurs": [[307, "space-varying-blurs"]], "SpaceVaryingBlur": [[202, null]], "Specific Networks": [[389, null]], "Specific architectures": [[389, "id1"]], "SpectralAngleMapper": [[76, null]], "SplittingLoss": [[48, null]], "StackedLinearPhysics": [[203, null]], "StackedPhysics": [[204, null]], "StackedPhysicsDataFidelity": [[145, null]], "StackedPhysicsLoss": [[49, null]], "StepLossScheduler": [[50, null]], "Stream data from Internet": [[311, "stream-data-from-internet"]], "StructuredRandom": [[205, null]], "StructuredRandomPhaseRetrieval": [[206, null]], "Summary of pretrained weights": [[391, "id3"]], "SupAdversarialDiscriminatorLoss": [[59, null]], "SupAdversarialGeneratorLoss": [[60, null]], "SupLoss": [[51, null]], "Super-Resolution": [[317, "super-resolution"]], "Supervised Learning": [[2, "supervised-learning"], [393, "supervised-learning"]], "SureGaussianLoss": [[52, null]], "SurePGLoss": [[53, null]], "SurePoissonLoss": [[54, null]], "SwinIR": [[102, null]], "TGVDenoiser": [[103, null]], "TVDenoiser": [[104, null]], "TVLoss": [[55, null]], "TVPrior": [[146, null]], "TensorList": [[11, "tensorlist"], [377, "tensorlist"]], "Test the model": [[349, "test-the-model"]], "Test the network": [[321, "test-the-network"], [351, "test-the-network"], [352, "test-the-network"], [353, "test-the-network"], [354, "test-the-network"], [356, "test-the-network"], [357, "test-the-network"], [361, "test-the-network"], [364, "test-the-network"], [365, "test-the-network"], [366, "test-the-network"]], "Test the network.": [[362, "test-the-network"], [363, "test-the-network"]], "The DPS algorithm": [[345, "the-dps-algorithm"]], "The DiffPIR algorithm": [[344, "the-diffpir-algorithm"]], "The RI measurement operator": [[301, "the-ri-measurement-operator"]], "Tikhonov": [[147, null]], "Time Transforms": [[397, "id3"]], "TimeAgnosticNet": [[105, null]], "TimeAveragingNet": [[106, null]], "TimeMixin": [[207, null]], "ToComplex": [[31, null]], "Tomography": [[208, null]], "Tour of MRI functionality in DeepInverse": [[320, null]], "Train and test network": [[355, "train-and-test-network"]], "Train model": [[349, "train-model"]], "Train the model": [[321, "train-the-model"], [365, "train-the-model"]], "Train the network": [[351, "train-the-network"], [352, "train-the-network"], [353, "train-the-network"], [354, "train-the-network"], [356, "train-the-network"], [357, "train-the-network"], [361, "train-the-network"], [364, "train-the-network"], [366, "train-the-network"]], "Train the network.": [[362, "train-the-network"], [363, "train-the-network"]], "Trainer": [[12, null], [396, null]], "Training / EM algorithm": [[332, "training-em-algorithm"]], "Training Losses": [[393, null]], "Training a reconstruction network.": [[321, null]], "Training dataset of random phantoms.": [[364, "training-dataset-of-random-phantoms"]], "Training, Testing and Utilities": [[375, "training-testing-and-utilities"]], "Transform": [[268, null]], "Transforms": [[397, null]], "UAIR training": [[304, "uair-training"]], "UAIRGeneratorLoss": [[61, null]], "ULA": [[256, null]], "UNet": [[107, null]], "Uncertainty quantification with PnP-ULA.": [[346, null]], "Unconditional GAN": [[382, "unconditional-gan"]], "Unconditional GANs": [[382, "id3"]], "Unfolded": [[10, "unfolded"], [325, "unfolded"], [367, null], [390, "id1"]], "Unfolded Algorithms": [[390, null]], "Unfolded Chambolle-Pock for constrained image inpainting": [[365, null]], "UniformGaussianNoise": [[209, null]], "UniformNoise": [[210, null]], "UnsupAdversarialDiscriminatorLoss": [[62, null]], "UnsupAdversarialGeneratorLoss": [[63, null]], "Urban100HR": [[27, null]], "User Guide": [[375, null]], "Using DPS in your inverse problem": [[345, "using-dps-in-your-inverse-problem"]], "Using Multiple GPUs": [[395, null]], "Using huggingface dataset": [[311, null]], "Using the DiffPIR algorithm in your inverse problem": [[344, "using-the-diffpir-algorithm-in-your-inverse-problem"]], "Using the Dykstra-like algorithm for wavelet denoising.": [[326, "using-the-dykstra-like-algorithm-for-wavelet-denoising"]], "Utility Functions and Descriptions": [[377, "id5"]], "Utility and demo Functions": [[377, "id7"]], "Utils": [[5, "utils"], [377, null], [387, "utils"]], "Vanilla PnP for computed tomography (CT).": [[339, null]], "Vanilla Unfolded algorithm for super-resolution": [[366, null]], "VarNet": [[108, null]], "Verifying our linear operator": [[316, "verifying-our-linear-operator"]], "Video transforms": [[9, "video-transforms"], [397, "video-transforms"]], "Visualization": [[315, "visualization"]], "WaveletDenoiser": [[109, null]], "WaveletDictDenoiser": [[110, null]], "WaveletPrior": [[148, null]], "Widefield microscope PSF": [[314, "widefield-microscope-psf"]], "adjoint_function": [[211, null]], "bicgstab": [[164, null]], "bicubic_filter": [[212, null]], "bilinear_filter": [[213, null]], "build_probe": [[247, null]], "conjugate_gradient": [[165, null]], "conv2d": [[218, null]], "conv2d_fft": [[219, null]], "conv3d_fft": [[220, null]], "conv_transpose2d": [[221, null]], "conv_transpose2d_fft": [[222, null]], "conv_transpose3d_fft": [[223, null]], "correct_global_phase": [[161, null]], "deepinv.datasets": [[1, null]], "deepinv.loss": [[2, null]], "deepinv.metric": [[3, null]], "deepinv.models": [[4, null]], "deepinv.optim": [[5, null]], "deepinv.physics": [[6, null]], "deepinv.sampling": [[7, null]], "deepinv.training": [[8, null]], "deepinv.transform": [[9, null]], "deepinv.unfolded": [[10, null]], "deepinv.utils": [[11, null]], "deepinv.utils.TensorList": [[279, null]], "demo_mri_model": [[280, null]], "dirac_like": [[281, null]], "dst1": [[224, null]], "fStep": [[159, null]], "gStep": [[160, null]], "gaussian_blur": [[214, null]], "generate_dataset": [[28, null]], "generate_shifts": [[248, null]], "get_data_home": [[282, null]], "get_degradation_url": [[283, null]], "get_freer_gpu": [[284, null]], "get_image_url": [[285, null]], "get_timestamp": [[286, null]], "gradient_descent": [[166, null]], "histogram": [[225, null]], "histogramdd": [[226, null]], "least_squares": [[167, null]], "load_dataset": [[287, null]], "load_degradation": [[288, null]], "load_image": [[289, null]], "load_url_image": [[290, null]], "lsqr": [[168, null]], "multiplier": [[227, null]], "multiplier_adjoint": [[228, null]], "ones_like": [[291, null]], "optim_builder": [[149, null]], "plot": [[292, null]], "plot_curves": [[293, null]], "plot_inset": [[294, null]], "plot_ortho3D": [[295, null]], "plot_parameters": [[296, null]], "plot_videos": [[297, null]], "product_convolution2d": [[229, null]], "rand_like": [[298, null]], "randn_like": [[299, null]], "sinc_filter": [[215, null]], "spectral_methods": [[162, null]], "stack": [[249, null]], "test": [[257, null]], "to_complex_denoiser": [[111, null]], "train": [[258, null]], "unfolded_builder": [[276, null]], "zeros_like": [[300, null]]}, "docnames": ["API", "api/deepinv.datasets", "api/deepinv.loss", "api/deepinv.metric", "api/deepinv.models", "api/deepinv.optim", "api/deepinv.physics", "api/deepinv.sampling", "api/deepinv.training", "api/deepinv.transform", "api/deepinv.unfolded", "api/deepinv.utils", "api/stubs/deepinv.Trainer", "api/stubs/deepinv.datasets.CBSD68", "api/stubs/deepinv.datasets.CMRxReconSliceDataset", "api/stubs/deepinv.datasets.DIV2K", "api/stubs/deepinv.datasets.FMD", "api/stubs/deepinv.datasets.FastMRISliceDataset", "api/stubs/deepinv.datasets.Flickr2kHR", "api/stubs/deepinv.datasets.HDF5Dataset", "api/stubs/deepinv.datasets.Kohler", "api/stubs/deepinv.datasets.LidcIdriSliceDataset", "api/stubs/deepinv.datasets.LsdirHR", "api/stubs/deepinv.datasets.NBUDataset", "api/stubs/deepinv.datasets.PatchDataset", "api/stubs/deepinv.datasets.Set14HR", "api/stubs/deepinv.datasets.SimpleFastMRISliceDataset", "api/stubs/deepinv.datasets.Urban100HR", "api/stubs/deepinv.datasets.generate_dataset", "api/stubs/deepinv.datasets.utils.PlaceholderDataset", "api/stubs/deepinv.datasets.utils.Rescale", "api/stubs/deepinv.datasets.utils.ToComplex", "api/stubs/deepinv.loss.Artifact2ArtifactLoss", "api/stubs/deepinv.loss.BaseLossScheduler", "api/stubs/deepinv.loss.EILoss", "api/stubs/deepinv.loss.FNEJacobianSpectralNorm", "api/stubs/deepinv.loss.InterleavedEpochLossScheduler", "api/stubs/deepinv.loss.InterleavedLossScheduler", "api/stubs/deepinv.loss.JacobianSpectralNorm", "api/stubs/deepinv.loss.Loss", "api/stubs/deepinv.loss.MCLoss", "api/stubs/deepinv.loss.MOEILoss", "api/stubs/deepinv.loss.MOILoss", "api/stubs/deepinv.loss.Neighbor2Neighbor", "api/stubs/deepinv.loss.Phase2PhaseLoss", "api/stubs/deepinv.loss.R2RLoss", "api/stubs/deepinv.loss.RandomLossScheduler", "api/stubs/deepinv.loss.ScoreLoss", "api/stubs/deepinv.loss.SplittingLoss", "api/stubs/deepinv.loss.StackedPhysicsLoss", "api/stubs/deepinv.loss.StepLossScheduler", "api/stubs/deepinv.loss.SupLoss", "api/stubs/deepinv.loss.SureGaussianLoss", "api/stubs/deepinv.loss.SurePGLoss", "api/stubs/deepinv.loss.SurePoissonLoss", "api/stubs/deepinv.loss.TVLoss", "api/stubs/deepinv.loss.adversarial.DiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.DiscriminatorMetric", "api/stubs/deepinv.loss.adversarial.GeneratorLoss", "api/stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss", "api/stubs/deepinv.loss.adversarial.UAIRGeneratorLoss", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", "api/stubs/deepinv.loss.metric.ERGAS", "api/stubs/deepinv.loss.metric.L1L2", "api/stubs/deepinv.loss.metric.LPIPS", "api/stubs/deepinv.loss.metric.LpNorm", "api/stubs/deepinv.loss.metric.MAE", "api/stubs/deepinv.loss.metric.MSE", "api/stubs/deepinv.loss.metric.Metric", "api/stubs/deepinv.loss.metric.NIQE", "api/stubs/deepinv.loss.metric.NMSE", "api/stubs/deepinv.loss.metric.PSNR", "api/stubs/deepinv.loss.metric.QNR", "api/stubs/deepinv.loss.metric.SSIM", "api/stubs/deepinv.loss.metric.SpectralAngleMapper", "api/stubs/deepinv.models.ArtifactRemoval", "api/stubs/deepinv.models.AutoEncoder", "api/stubs/deepinv.models.BM3D", "api/stubs/deepinv.models.CSGMGenerator", "api/stubs/deepinv.models.ConvDecoder", "api/stubs/deepinv.models.DCGANDiscriminator", "api/stubs/deepinv.models.DCGANGenerator", "api/stubs/deepinv.models.DRUNet", "api/stubs/deepinv.models.DeepImagePrior", "api/stubs/deepinv.models.Denoiser", "api/stubs/deepinv.models.DiffUNet", "api/stubs/deepinv.models.DnCNN", "api/stubs/deepinv.models.EPLLDenoiser", "api/stubs/deepinv.models.ESRGANDiscriminator", "api/stubs/deepinv.models.EquivariantDenoiser", "api/stubs/deepinv.models.GSDRUNet", "api/stubs/deepinv.models.ICNN", "api/stubs/deepinv.models.MedianFilter", "api/stubs/deepinv.models.PDNet_DualBlock", "api/stubs/deepinv.models.PDNet_PrimalBlock", "api/stubs/deepinv.models.PanNet", "api/stubs/deepinv.models.PatchGANDiscriminator", "api/stubs/deepinv.models.Reconstructor", "api/stubs/deepinv.models.Restormer", "api/stubs/deepinv.models.SCUNet", "api/stubs/deepinv.models.SwinIR", "api/stubs/deepinv.models.TGVDenoiser", "api/stubs/deepinv.models.TVDenoiser", "api/stubs/deepinv.models.TimeAgnosticNet", "api/stubs/deepinv.models.TimeAveragingNet", "api/stubs/deepinv.models.UNet", "api/stubs/deepinv.models.VarNet", "api/stubs/deepinv.models.WaveletDenoiser", "api/stubs/deepinv.models.WaveletDictDenoiser", "api/stubs/deepinv.models.complex.to_complex_denoiser", "api/stubs/deepinv.optim.AmplitudeLoss", "api/stubs/deepinv.optim.AmplitudeLossDistance", "api/stubs/deepinv.optim.BaseOptim", "api/stubs/deepinv.optim.Bregman", "api/stubs/deepinv.optim.BregmanL2", "api/stubs/deepinv.optim.Bregman_ICNN", "api/stubs/deepinv.optim.BurgEntropy", "api/stubs/deepinv.optim.DPIR", "api/stubs/deepinv.optim.DataFidelity", "api/stubs/deepinv.optim.Distance", "api/stubs/deepinv.optim.EPLL", "api/stubs/deepinv.optim.FixedPoint", "api/stubs/deepinv.optim.IndicatorL2", "api/stubs/deepinv.optim.IndicatorL2Distance", "api/stubs/deepinv.optim.L1", "api/stubs/deepinv.optim.L12Prior", "api/stubs/deepinv.optim.L1Distance", "api/stubs/deepinv.optim.L1Prior", "api/stubs/deepinv.optim.L2", "api/stubs/deepinv.optim.L2Distance", "api/stubs/deepinv.optim.LogPoissonLikelihood", "api/stubs/deepinv.optim.LogPoissonLikelihoodDistance", "api/stubs/deepinv.optim.NegEntropy", "api/stubs/deepinv.optim.OptimIterator", "api/stubs/deepinv.optim.PatchNR", "api/stubs/deepinv.optim.PatchPrior", "api/stubs/deepinv.optim.PnP", "api/stubs/deepinv.optim.PoissonLikelihood", "api/stubs/deepinv.optim.PoissonLikelihoodDistance", "api/stubs/deepinv.optim.Potential", "api/stubs/deepinv.optim.Prior", "api/stubs/deepinv.optim.RED", "api/stubs/deepinv.optim.ScorePrior", "api/stubs/deepinv.optim.StackedPhysicsDataFidelity", "api/stubs/deepinv.optim.TVPrior", "api/stubs/deepinv.optim.Tikhonov", "api/stubs/deepinv.optim.WaveletPrior", "api/stubs/deepinv.optim.optim_builder", "api/stubs/deepinv.optim.optim_iterators.ADMMIteration", "api/stubs/deepinv.optim.optim_iterators.CPIteration", "api/stubs/deepinv.optim.optim_iterators.DRSIteration", "api/stubs/deepinv.optim.optim_iterators.FISTAIteration", "api/stubs/deepinv.optim.optim_iterators.GDIteration", "api/stubs/deepinv.optim.optim_iterators.HQSIteration", "api/stubs/deepinv.optim.optim_iterators.MDIteration", "api/stubs/deepinv.optim.optim_iterators.PGDIteration", "api/stubs/deepinv.optim.optim_iterators.SMIteration", "api/stubs/deepinv.optim.optim_iterators.fStep", "api/stubs/deepinv.optim.optim_iterators.gStep", "api/stubs/deepinv.optim.phase_retrieval.correct_global_phase", "api/stubs/deepinv.optim.phase_retrieval.spectral_methods", "api/stubs/deepinv.optim.utils.GaussianMixtureModel", "api/stubs/deepinv.optim.utils.bicgstab", "api/stubs/deepinv.optim.utils.conjugate_gradient", "api/stubs/deepinv.optim.utils.gradient_descent", "api/stubs/deepinv.optim.utils.least_squares", "api/stubs/deepinv.optim.utils.lsqr", "api/stubs/deepinv.physics.Blur", "api/stubs/deepinv.physics.BlurFFT", "api/stubs/deepinv.physics.CompressedSensing", "api/stubs/deepinv.physics.CompressiveSpectralImaging", "api/stubs/deepinv.physics.Decolorize", "api/stubs/deepinv.physics.DecomposablePhysics", "api/stubs/deepinv.physics.Demosaicing", "api/stubs/deepinv.physics.Denoising", "api/stubs/deepinv.physics.Downsampling", "api/stubs/deepinv.physics.DynamicMRI", "api/stubs/deepinv.physics.GammaNoise", "api/stubs/deepinv.physics.GaussianNoise", "api/stubs/deepinv.physics.Haze", "api/stubs/deepinv.physics.HyperSpectralUnmixing", "api/stubs/deepinv.physics.Inpainting", "api/stubs/deepinv.physics.LinearPhysics", "api/stubs/deepinv.physics.LogPoissonNoise", "api/stubs/deepinv.physics.MRI", "api/stubs/deepinv.physics.MRIMixin", "api/stubs/deepinv.physics.MultiCoilMRI", "api/stubs/deepinv.physics.NoiseModel", "api/stubs/deepinv.physics.Pansharpen", "api/stubs/deepinv.physics.PhaseRetrieval", "api/stubs/deepinv.physics.Physics", "api/stubs/deepinv.physics.PoissonGaussianNoise", "api/stubs/deepinv.physics.PoissonNoise", "api/stubs/deepinv.physics.Ptychography", "api/stubs/deepinv.physics.PtychographyLinearOperator", "api/stubs/deepinv.physics.RadioInterferometry", "api/stubs/deepinv.physics.RandomPhaseRetrieval", "api/stubs/deepinv.physics.SequentialMRI", "api/stubs/deepinv.physics.SinglePhotonLidar", "api/stubs/deepinv.physics.SinglePixelCamera", "api/stubs/deepinv.physics.SpaceVaryingBlur", "api/stubs/deepinv.physics.StackedLinearPhysics", "api/stubs/deepinv.physics.StackedPhysics", "api/stubs/deepinv.physics.StructuredRandom", "api/stubs/deepinv.physics.StructuredRandomPhaseRetrieval", "api/stubs/deepinv.physics.TimeMixin", "api/stubs/deepinv.physics.Tomography", "api/stubs/deepinv.physics.UniformGaussianNoise", "api/stubs/deepinv.physics.UniformNoise", "api/stubs/deepinv.physics.adjoint_function", "api/stubs/deepinv.physics.blur.bicubic_filter", "api/stubs/deepinv.physics.blur.bilinear_filter", "api/stubs/deepinv.physics.blur.gaussian_blur", "api/stubs/deepinv.physics.blur.sinc_filter", "api/stubs/deepinv.physics.functional.IRadon", "api/stubs/deepinv.physics.functional.Radon", "api/stubs/deepinv.physics.functional.conv2d", "api/stubs/deepinv.physics.functional.conv2d_fft", "api/stubs/deepinv.physics.functional.conv3d_fft", "api/stubs/deepinv.physics.functional.conv_transpose2d", "api/stubs/deepinv.physics.functional.conv_transpose2d_fft", "api/stubs/deepinv.physics.functional.conv_transpose3d_fft", "api/stubs/deepinv.physics.functional.dst1", "api/stubs/deepinv.physics.functional.histogram", "api/stubs/deepinv.physics.functional.histogramdd", "api/stubs/deepinv.physics.functional.multiplier", "api/stubs/deepinv.physics.functional.multiplier_adjoint", "api/stubs/deepinv.physics.functional.product_convolution2d", "api/stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.BaseMaskGenerator", "api/stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.ConfocalBlurGenerator3D", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator3D", "api/stubs/deepinv.physics.generator.EquispacedMaskGenerator", "api/stubs/deepinv.physics.generator.GaussianMaskGenerator", "api/stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.GeneratorMixture", "api/stubs/deepinv.physics.generator.MotionBlurGenerator", "api/stubs/deepinv.physics.generator.PSFGenerator", "api/stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.PhysicsGenerator", "api/stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator", "api/stubs/deepinv.physics.generator.RandomMaskGenerator", "api/stubs/deepinv.physics.generator.SigmaGenerator", "api/stubs/deepinv.physics.phase_retrieval.build_probe", "api/stubs/deepinv.physics.phase_retrieval.generate_shifts", "api/stubs/deepinv.physics.stack", "api/stubs/deepinv.sampling.DDRM", "api/stubs/deepinv.sampling.DPS", "api/stubs/deepinv.sampling.DiffPIR", "api/stubs/deepinv.sampling.DiffusionSampler", "api/stubs/deepinv.sampling.MonteCarlo", "api/stubs/deepinv.sampling.SKRock", "api/stubs/deepinv.sampling.ULA", "api/stubs/deepinv.test", "api/stubs/deepinv.train", "api/stubs/deepinv.training.AdversarialOptimizer", "api/stubs/deepinv.training.AdversarialTrainer", "api/stubs/deepinv.transform.CPABDiffeomorphism", "api/stubs/deepinv.transform.Homography", "api/stubs/deepinv.transform.Reflect", "api/stubs/deepinv.transform.Rotate", "api/stubs/deepinv.transform.Scale", "api/stubs/deepinv.transform.Shift", "api/stubs/deepinv.transform.ShiftTime", "api/stubs/deepinv.transform.Transform", "api/stubs/deepinv.transform.projective.Affine", "api/stubs/deepinv.transform.projective.Euclidean", "api/stubs/deepinv.transform.projective.PanTiltRotate", "api/stubs/deepinv.transform.projective.Similarity", "api/stubs/deepinv.unfolded.BaseDEQ", "api/stubs/deepinv.unfolded.BaseUnfold", "api/stubs/deepinv.unfolded.DEQ_builder", "api/stubs/deepinv.unfolded.unfolded_builder", "api/stubs/deepinv.utils.AverageMeter", "api/stubs/deepinv.utils.ProgressMeter", "api/stubs/deepinv.utils.TensorList", "api/stubs/deepinv.utils.demo.demo_mri_model", "api/stubs/deepinv.utils.dirac_like", "api/stubs/deepinv.utils.get_data_home", "api/stubs/deepinv.utils.get_degradation_url", "api/stubs/deepinv.utils.get_freer_gpu", "api/stubs/deepinv.utils.get_image_url", "api/stubs/deepinv.utils.get_timestamp", "api/stubs/deepinv.utils.load_dataset", "api/stubs/deepinv.utils.load_degradation", "api/stubs/deepinv.utils.load_image", "api/stubs/deepinv.utils.load_url_image", "api/stubs/deepinv.utils.ones_like", "api/stubs/deepinv.utils.plot", "api/stubs/deepinv.utils.plot_curves", "api/stubs/deepinv.utils.plot_inset", "api/stubs/deepinv.utils.plot_ortho3D", "api/stubs/deepinv.utils.plot_parameters", "api/stubs/deepinv.utils.plot_videos", "api/stubs/deepinv.utils.rand_like", "api/stubs/deepinv.utils.randn_like", "api/stubs/deepinv.utils.zeros_like", "auto_examples/advanced/demo_ri_basic", "auto_examples/advanced/index", "auto_examples/advanced/sg_execution_times", "auto_examples/adversarial-learning/demo_gan_imaging", "auto_examples/adversarial-learning/index", "auto_examples/adversarial-learning/sg_execution_times", "auto_examples/basics/demo_blur_tour", "auto_examples/basics/demo_custom_prior", "auto_examples/basics/demo_dataset", "auto_examples/basics/demo_dip", "auto_examples/basics/demo_hf_dataset", "auto_examples/basics/demo_lidar", "auto_examples/basics/demo_loading", "auto_examples/basics/demo_microscopy_3d", "auto_examples/basics/demo_phase_retrieval", "auto_examples/basics/demo_physics", "auto_examples/basics/demo_physics_tour", "auto_examples/basics/demo_ptychography", "auto_examples/basics/demo_remote_sensing", "auto_examples/basics/demo_tour_mri", "auto_examples/basics/demo_train_inpainting", "auto_examples/basics/demo_transforms", "auto_examples/basics/index", "auto_examples/basics/sg_execution_times", "auto_examples/index", "auto_examples/optimization/demo_3D_wavelets", "auto_examples/optimization/demo_TV_minimisation", "auto_examples/optimization/demo_wavelet_prior", "auto_examples/optimization/index", "auto_examples/optimization/sg_execution_times", "auto_examples/patch-priors/demo_epll", "auto_examples/patch-priors/demo_patch_priors_CT", "auto_examples/patch-priors/index", "auto_examples/patch-priors/sg_execution_times", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur", "auto_examples/plug-and-play/demo_PnP_custom_optim", "auto_examples/plug-and-play/demo_PnP_mirror_descent", "auto_examples/plug-and-play/demo_RED_GSPnP_SR", "auto_examples/plug-and-play/demo_vanilla_PnP", "auto_examples/plug-and-play/index", "auto_examples/plug-and-play/sg_execution_times", "auto_examples/sampling/demo_custom_kernel", "auto_examples/sampling/demo_ddrm", "auto_examples/sampling/demo_diffpir", "auto_examples/sampling/demo_dps", "auto_examples/sampling/demo_sampling", "auto_examples/sampling/index", "auto_examples/sampling/sg_execution_times", "auto_examples/self-supervised-learning/demo_artifact2artifact", "auto_examples/self-supervised-learning/demo_ei_transforms", "auto_examples/self-supervised-learning/demo_equivariant_imaging", "auto_examples/self-supervised-learning/demo_multioperator_imaging", "auto_examples/self-supervised-learning/demo_n2n_denoising", "auto_examples/self-supervised-learning/demo_r2r_denoising", "auto_examples/self-supervised-learning/demo_splitting_loss", "auto_examples/self-supervised-learning/demo_sure_denoising", "auto_examples/self-supervised-learning/demo_unsure", "auto_examples/self-supervised-learning/index", "auto_examples/self-supervised-learning/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/unfolded/demo_DEQ", "auto_examples/unfolded/demo_LISTA", "auto_examples/unfolded/demo_custom_prior_unfolded", "auto_examples/unfolded/demo_learned_primal_dual", "auto_examples/unfolded/demo_unfolded_constrained_LISTA", "auto_examples/unfolded/demo_vanilla_unfolded", "auto_examples/unfolded/index", "auto_examples/unfolded/sg_execution_times", "community", "contributing", "finding_help", "index", "quickstart", "sg_execution_times", "user_guide", "user_guide/other/notation", "user_guide/other/utils", "user_guide/physics/defining", "user_guide/physics/functional", "user_guide/physics/intro", "user_guide/physics/physics", "user_guide/reconstruction/adversarial", "user_guide/reconstruction/artifact", "user_guide/reconstruction/denoisers", "user_guide/reconstruction/introduction", "user_guide/reconstruction/iterative", "user_guide/reconstruction/optimization", "user_guide/reconstruction/sampling", "user_guide/reconstruction/specific", "user_guide/reconstruction/unfolded", "user_guide/reconstruction/weights", "user_guide/training/datasets", "user_guide/training/loss", "user_guide/training/metric", "user_guide/training/multigpu", "user_guide/training/trainer", "user_guide/training/transforms"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["API.rst", "api/deepinv.datasets.rst", "api/deepinv.loss.rst", "api/deepinv.metric.rst", "api/deepinv.models.rst", "api/deepinv.optim.rst", "api/deepinv.physics.rst", "api/deepinv.sampling.rst", "api/deepinv.training.rst", "api/deepinv.transform.rst", "api/deepinv.unfolded.rst", "api/deepinv.utils.rst", "api/stubs/deepinv.Trainer.rst", "api/stubs/deepinv.datasets.CBSD68.rst", "api/stubs/deepinv.datasets.CMRxReconSliceDataset.rst", "api/stubs/deepinv.datasets.DIV2K.rst", "api/stubs/deepinv.datasets.FMD.rst", "api/stubs/deepinv.datasets.FastMRISliceDataset.rst", "api/stubs/deepinv.datasets.Flickr2kHR.rst", "api/stubs/deepinv.datasets.HDF5Dataset.rst", "api/stubs/deepinv.datasets.Kohler.rst", "api/stubs/deepinv.datasets.LidcIdriSliceDataset.rst", "api/stubs/deepinv.datasets.LsdirHR.rst", "api/stubs/deepinv.datasets.NBUDataset.rst", "api/stubs/deepinv.datasets.PatchDataset.rst", "api/stubs/deepinv.datasets.Set14HR.rst", "api/stubs/deepinv.datasets.SimpleFastMRISliceDataset.rst", "api/stubs/deepinv.datasets.Urban100HR.rst", "api/stubs/deepinv.datasets.generate_dataset.rst", "api/stubs/deepinv.datasets.utils.PlaceholderDataset.rst", "api/stubs/deepinv.datasets.utils.Rescale.rst", "api/stubs/deepinv.datasets.utils.ToComplex.rst", "api/stubs/deepinv.loss.Artifact2ArtifactLoss.rst", "api/stubs/deepinv.loss.BaseLossScheduler.rst", "api/stubs/deepinv.loss.EILoss.rst", "api/stubs/deepinv.loss.FNEJacobianSpectralNorm.rst", "api/stubs/deepinv.loss.InterleavedEpochLossScheduler.rst", "api/stubs/deepinv.loss.InterleavedLossScheduler.rst", "api/stubs/deepinv.loss.JacobianSpectralNorm.rst", "api/stubs/deepinv.loss.Loss.rst", "api/stubs/deepinv.loss.MCLoss.rst", "api/stubs/deepinv.loss.MOEILoss.rst", "api/stubs/deepinv.loss.MOILoss.rst", "api/stubs/deepinv.loss.Neighbor2Neighbor.rst", "api/stubs/deepinv.loss.Phase2PhaseLoss.rst", "api/stubs/deepinv.loss.R2RLoss.rst", "api/stubs/deepinv.loss.RandomLossScheduler.rst", "api/stubs/deepinv.loss.ScoreLoss.rst", "api/stubs/deepinv.loss.SplittingLoss.rst", "api/stubs/deepinv.loss.StackedPhysicsLoss.rst", "api/stubs/deepinv.loss.StepLossScheduler.rst", "api/stubs/deepinv.loss.SupLoss.rst", "api/stubs/deepinv.loss.SureGaussianLoss.rst", "api/stubs/deepinv.loss.SurePGLoss.rst", "api/stubs/deepinv.loss.SurePoissonLoss.rst", "api/stubs/deepinv.loss.TVLoss.rst", "api/stubs/deepinv.loss.adversarial.DiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.DiscriminatorMetric.rst", "api/stubs/deepinv.loss.adversarial.GeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.UAIRGeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.rst", "api/stubs/deepinv.loss.metric.ERGAS.rst", "api/stubs/deepinv.loss.metric.L1L2.rst", "api/stubs/deepinv.loss.metric.LPIPS.rst", "api/stubs/deepinv.loss.metric.LpNorm.rst", "api/stubs/deepinv.loss.metric.MAE.rst", "api/stubs/deepinv.loss.metric.MSE.rst", "api/stubs/deepinv.loss.metric.Metric.rst", "api/stubs/deepinv.loss.metric.NIQE.rst", "api/stubs/deepinv.loss.metric.NMSE.rst", "api/stubs/deepinv.loss.metric.PSNR.rst", "api/stubs/deepinv.loss.metric.QNR.rst", "api/stubs/deepinv.loss.metric.SSIM.rst", "api/stubs/deepinv.loss.metric.SpectralAngleMapper.rst", "api/stubs/deepinv.models.ArtifactRemoval.rst", "api/stubs/deepinv.models.AutoEncoder.rst", "api/stubs/deepinv.models.BM3D.rst", "api/stubs/deepinv.models.CSGMGenerator.rst", "api/stubs/deepinv.models.ConvDecoder.rst", "api/stubs/deepinv.models.DCGANDiscriminator.rst", "api/stubs/deepinv.models.DCGANGenerator.rst", "api/stubs/deepinv.models.DRUNet.rst", "api/stubs/deepinv.models.DeepImagePrior.rst", "api/stubs/deepinv.models.Denoiser.rst", "api/stubs/deepinv.models.DiffUNet.rst", "api/stubs/deepinv.models.DnCNN.rst", "api/stubs/deepinv.models.EPLLDenoiser.rst", "api/stubs/deepinv.models.ESRGANDiscriminator.rst", "api/stubs/deepinv.models.EquivariantDenoiser.rst", "api/stubs/deepinv.models.GSDRUNet.rst", "api/stubs/deepinv.models.ICNN.rst", "api/stubs/deepinv.models.MedianFilter.rst", "api/stubs/deepinv.models.PDNet_DualBlock.rst", "api/stubs/deepinv.models.PDNet_PrimalBlock.rst", "api/stubs/deepinv.models.PanNet.rst", "api/stubs/deepinv.models.PatchGANDiscriminator.rst", "api/stubs/deepinv.models.Reconstructor.rst", "api/stubs/deepinv.models.Restormer.rst", "api/stubs/deepinv.models.SCUNet.rst", "api/stubs/deepinv.models.SwinIR.rst", "api/stubs/deepinv.models.TGVDenoiser.rst", "api/stubs/deepinv.models.TVDenoiser.rst", "api/stubs/deepinv.models.TimeAgnosticNet.rst", "api/stubs/deepinv.models.TimeAveragingNet.rst", "api/stubs/deepinv.models.UNet.rst", "api/stubs/deepinv.models.VarNet.rst", "api/stubs/deepinv.models.WaveletDenoiser.rst", "api/stubs/deepinv.models.WaveletDictDenoiser.rst", "api/stubs/deepinv.models.complex.to_complex_denoiser.rst", "api/stubs/deepinv.optim.AmplitudeLoss.rst", "api/stubs/deepinv.optim.AmplitudeLossDistance.rst", "api/stubs/deepinv.optim.BaseOptim.rst", "api/stubs/deepinv.optim.Bregman.rst", "api/stubs/deepinv.optim.BregmanL2.rst", "api/stubs/deepinv.optim.Bregman_ICNN.rst", "api/stubs/deepinv.optim.BurgEntropy.rst", "api/stubs/deepinv.optim.DPIR.rst", "api/stubs/deepinv.optim.DataFidelity.rst", "api/stubs/deepinv.optim.Distance.rst", "api/stubs/deepinv.optim.EPLL.rst", "api/stubs/deepinv.optim.FixedPoint.rst", "api/stubs/deepinv.optim.IndicatorL2.rst", "api/stubs/deepinv.optim.IndicatorL2Distance.rst", "api/stubs/deepinv.optim.L1.rst", "api/stubs/deepinv.optim.L12Prior.rst", "api/stubs/deepinv.optim.L1Distance.rst", "api/stubs/deepinv.optim.L1Prior.rst", "api/stubs/deepinv.optim.L2.rst", "api/stubs/deepinv.optim.L2Distance.rst", "api/stubs/deepinv.optim.LogPoissonLikelihood.rst", "api/stubs/deepinv.optim.LogPoissonLikelihoodDistance.rst", "api/stubs/deepinv.optim.NegEntropy.rst", "api/stubs/deepinv.optim.OptimIterator.rst", "api/stubs/deepinv.optim.PatchNR.rst", "api/stubs/deepinv.optim.PatchPrior.rst", "api/stubs/deepinv.optim.PnP.rst", "api/stubs/deepinv.optim.PoissonLikelihood.rst", "api/stubs/deepinv.optim.PoissonLikelihoodDistance.rst", "api/stubs/deepinv.optim.Potential.rst", "api/stubs/deepinv.optim.Prior.rst", "api/stubs/deepinv.optim.RED.rst", "api/stubs/deepinv.optim.ScorePrior.rst", "api/stubs/deepinv.optim.StackedPhysicsDataFidelity.rst", "api/stubs/deepinv.optim.TVPrior.rst", "api/stubs/deepinv.optim.Tikhonov.rst", "api/stubs/deepinv.optim.WaveletPrior.rst", "api/stubs/deepinv.optim.optim_builder.rst", "api/stubs/deepinv.optim.optim_iterators.ADMMIteration.rst", "api/stubs/deepinv.optim.optim_iterators.CPIteration.rst", "api/stubs/deepinv.optim.optim_iterators.DRSIteration.rst", "api/stubs/deepinv.optim.optim_iterators.FISTAIteration.rst", "api/stubs/deepinv.optim.optim_iterators.GDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.HQSIteration.rst", "api/stubs/deepinv.optim.optim_iterators.MDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.PGDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.SMIteration.rst", "api/stubs/deepinv.optim.optim_iterators.fStep.rst", "api/stubs/deepinv.optim.optim_iterators.gStep.rst", "api/stubs/deepinv.optim.phase_retrieval.correct_global_phase.rst", "api/stubs/deepinv.optim.phase_retrieval.spectral_methods.rst", "api/stubs/deepinv.optim.utils.GaussianMixtureModel.rst", "api/stubs/deepinv.optim.utils.bicgstab.rst", "api/stubs/deepinv.optim.utils.conjugate_gradient.rst", "api/stubs/deepinv.optim.utils.gradient_descent.rst", "api/stubs/deepinv.optim.utils.least_squares.rst", "api/stubs/deepinv.optim.utils.lsqr.rst", "api/stubs/deepinv.physics.Blur.rst", "api/stubs/deepinv.physics.BlurFFT.rst", "api/stubs/deepinv.physics.CompressedSensing.rst", "api/stubs/deepinv.physics.CompressiveSpectralImaging.rst", "api/stubs/deepinv.physics.Decolorize.rst", "api/stubs/deepinv.physics.DecomposablePhysics.rst", "api/stubs/deepinv.physics.Demosaicing.rst", "api/stubs/deepinv.physics.Denoising.rst", "api/stubs/deepinv.physics.Downsampling.rst", "api/stubs/deepinv.physics.DynamicMRI.rst", "api/stubs/deepinv.physics.GammaNoise.rst", "api/stubs/deepinv.physics.GaussianNoise.rst", "api/stubs/deepinv.physics.Haze.rst", "api/stubs/deepinv.physics.HyperSpectralUnmixing.rst", "api/stubs/deepinv.physics.Inpainting.rst", "api/stubs/deepinv.physics.LinearPhysics.rst", "api/stubs/deepinv.physics.LogPoissonNoise.rst", "api/stubs/deepinv.physics.MRI.rst", "api/stubs/deepinv.physics.MRIMixin.rst", "api/stubs/deepinv.physics.MultiCoilMRI.rst", "api/stubs/deepinv.physics.NoiseModel.rst", "api/stubs/deepinv.physics.Pansharpen.rst", "api/stubs/deepinv.physics.PhaseRetrieval.rst", "api/stubs/deepinv.physics.Physics.rst", "api/stubs/deepinv.physics.PoissonGaussianNoise.rst", "api/stubs/deepinv.physics.PoissonNoise.rst", "api/stubs/deepinv.physics.Ptychography.rst", "api/stubs/deepinv.physics.PtychographyLinearOperator.rst", "api/stubs/deepinv.physics.RadioInterferometry.rst", "api/stubs/deepinv.physics.RandomPhaseRetrieval.rst", "api/stubs/deepinv.physics.SequentialMRI.rst", "api/stubs/deepinv.physics.SinglePhotonLidar.rst", "api/stubs/deepinv.physics.SinglePixelCamera.rst", "api/stubs/deepinv.physics.SpaceVaryingBlur.rst", "api/stubs/deepinv.physics.StackedLinearPhysics.rst", "api/stubs/deepinv.physics.StackedPhysics.rst", "api/stubs/deepinv.physics.StructuredRandom.rst", "api/stubs/deepinv.physics.StructuredRandomPhaseRetrieval.rst", "api/stubs/deepinv.physics.TimeMixin.rst", "api/stubs/deepinv.physics.Tomography.rst", "api/stubs/deepinv.physics.UniformGaussianNoise.rst", "api/stubs/deepinv.physics.UniformNoise.rst", "api/stubs/deepinv.physics.adjoint_function.rst", "api/stubs/deepinv.physics.blur.bicubic_filter.rst", "api/stubs/deepinv.physics.blur.bilinear_filter.rst", "api/stubs/deepinv.physics.blur.gaussian_blur.rst", "api/stubs/deepinv.physics.blur.sinc_filter.rst", "api/stubs/deepinv.physics.functional.IRadon.rst", "api/stubs/deepinv.physics.functional.Radon.rst", "api/stubs/deepinv.physics.functional.conv2d.rst", "api/stubs/deepinv.physics.functional.conv2d_fft.rst", "api/stubs/deepinv.physics.functional.conv3d_fft.rst", "api/stubs/deepinv.physics.functional.conv_transpose2d.rst", "api/stubs/deepinv.physics.functional.conv_transpose2d_fft.rst", "api/stubs/deepinv.physics.functional.conv_transpose3d_fft.rst", "api/stubs/deepinv.physics.functional.dst1.rst", "api/stubs/deepinv.physics.functional.histogram.rst", "api/stubs/deepinv.physics.functional.histogramdd.rst", "api/stubs/deepinv.physics.functional.multiplier.rst", "api/stubs/deepinv.physics.functional.multiplier_adjoint.rst", "api/stubs/deepinv.physics.functional.product_convolution2d.rst", "api/stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.BaseMaskGenerator.rst", "api/stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.ConfocalBlurGenerator3D.rst", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator3D.rst", "api/stubs/deepinv.physics.generator.EquispacedMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GaussianMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GeneratorMixture.rst", "api/stubs/deepinv.physics.generator.MotionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.PSFGenerator.rst", "api/stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.PhysicsGenerator.rst", "api/stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.RandomMaskGenerator.rst", "api/stubs/deepinv.physics.generator.SigmaGenerator.rst", "api/stubs/deepinv.physics.phase_retrieval.build_probe.rst", "api/stubs/deepinv.physics.phase_retrieval.generate_shifts.rst", "api/stubs/deepinv.physics.stack.rst", "api/stubs/deepinv.sampling.DDRM.rst", "api/stubs/deepinv.sampling.DPS.rst", "api/stubs/deepinv.sampling.DiffPIR.rst", "api/stubs/deepinv.sampling.DiffusionSampler.rst", "api/stubs/deepinv.sampling.MonteCarlo.rst", "api/stubs/deepinv.sampling.SKRock.rst", "api/stubs/deepinv.sampling.ULA.rst", "api/stubs/deepinv.test.rst", "api/stubs/deepinv.train.rst", "api/stubs/deepinv.training.AdversarialOptimizer.rst", "api/stubs/deepinv.training.AdversarialTrainer.rst", "api/stubs/deepinv.transform.CPABDiffeomorphism.rst", "api/stubs/deepinv.transform.Homography.rst", "api/stubs/deepinv.transform.Reflect.rst", "api/stubs/deepinv.transform.Rotate.rst", "api/stubs/deepinv.transform.Scale.rst", "api/stubs/deepinv.transform.Shift.rst", "api/stubs/deepinv.transform.ShiftTime.rst", "api/stubs/deepinv.transform.Transform.rst", "api/stubs/deepinv.transform.projective.Affine.rst", "api/stubs/deepinv.transform.projective.Euclidean.rst", "api/stubs/deepinv.transform.projective.PanTiltRotate.rst", "api/stubs/deepinv.transform.projective.Similarity.rst", "api/stubs/deepinv.unfolded.BaseDEQ.rst", "api/stubs/deepinv.unfolded.BaseUnfold.rst", "api/stubs/deepinv.unfolded.DEQ_builder.rst", "api/stubs/deepinv.unfolded.unfolded_builder.rst", "api/stubs/deepinv.utils.AverageMeter.rst", "api/stubs/deepinv.utils.ProgressMeter.rst", "api/stubs/deepinv.utils.TensorList.rst", "api/stubs/deepinv.utils.demo.demo_mri_model.rst", "api/stubs/deepinv.utils.dirac_like.rst", "api/stubs/deepinv.utils.get_data_home.rst", "api/stubs/deepinv.utils.get_degradation_url.rst", "api/stubs/deepinv.utils.get_freer_gpu.rst", "api/stubs/deepinv.utils.get_image_url.rst", "api/stubs/deepinv.utils.get_timestamp.rst", "api/stubs/deepinv.utils.load_dataset.rst", "api/stubs/deepinv.utils.load_degradation.rst", "api/stubs/deepinv.utils.load_image.rst", "api/stubs/deepinv.utils.load_url_image.rst", "api/stubs/deepinv.utils.ones_like.rst", "api/stubs/deepinv.utils.plot.rst", "api/stubs/deepinv.utils.plot_curves.rst", "api/stubs/deepinv.utils.plot_inset.rst", "api/stubs/deepinv.utils.plot_ortho3D.rst", "api/stubs/deepinv.utils.plot_parameters.rst", "api/stubs/deepinv.utils.plot_videos.rst", "api/stubs/deepinv.utils.rand_like.rst", "api/stubs/deepinv.utils.randn_like.rst", "api/stubs/deepinv.utils.zeros_like.rst", "auto_examples/advanced/demo_ri_basic.rst", "auto_examples/advanced/index.rst", "auto_examples/advanced/sg_execution_times.rst", "auto_examples/adversarial-learning/demo_gan_imaging.rst", "auto_examples/adversarial-learning/index.rst", "auto_examples/adversarial-learning/sg_execution_times.rst", "auto_examples/basics/demo_blur_tour.rst", "auto_examples/basics/demo_custom_prior.rst", "auto_examples/basics/demo_dataset.rst", "auto_examples/basics/demo_dip.rst", "auto_examples/basics/demo_hf_dataset.rst", "auto_examples/basics/demo_lidar.rst", "auto_examples/basics/demo_loading.rst", "auto_examples/basics/demo_microscopy_3d.rst", "auto_examples/basics/demo_phase_retrieval.rst", "auto_examples/basics/demo_physics.rst", "auto_examples/basics/demo_physics_tour.rst", "auto_examples/basics/demo_ptychography.rst", "auto_examples/basics/demo_remote_sensing.rst", "auto_examples/basics/demo_tour_mri.rst", "auto_examples/basics/demo_train_inpainting.rst", "auto_examples/basics/demo_transforms.rst", "auto_examples/basics/index.rst", "auto_examples/basics/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/optimization/demo_3D_wavelets.rst", "auto_examples/optimization/demo_TV_minimisation.rst", "auto_examples/optimization/demo_wavelet_prior.rst", "auto_examples/optimization/index.rst", "auto_examples/optimization/sg_execution_times.rst", "auto_examples/patch-priors/demo_epll.rst", "auto_examples/patch-priors/demo_patch_priors_CT.rst", "auto_examples/patch-priors/index.rst", "auto_examples/patch-priors/sg_execution_times.rst", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur.rst", "auto_examples/plug-and-play/demo_PnP_custom_optim.rst", "auto_examples/plug-and-play/demo_PnP_mirror_descent.rst", "auto_examples/plug-and-play/demo_RED_GSPnP_SR.rst", "auto_examples/plug-and-play/demo_vanilla_PnP.rst", "auto_examples/plug-and-play/index.rst", "auto_examples/plug-and-play/sg_execution_times.rst", "auto_examples/sampling/demo_custom_kernel.rst", "auto_examples/sampling/demo_ddrm.rst", "auto_examples/sampling/demo_diffpir.rst", "auto_examples/sampling/demo_dps.rst", "auto_examples/sampling/demo_sampling.rst", "auto_examples/sampling/index.rst", "auto_examples/sampling/sg_execution_times.rst", "auto_examples/self-supervised-learning/demo_artifact2artifact.rst", "auto_examples/self-supervised-learning/demo_ei_transforms.rst", "auto_examples/self-supervised-learning/demo_equivariant_imaging.rst", "auto_examples/self-supervised-learning/demo_multioperator_imaging.rst", "auto_examples/self-supervised-learning/demo_n2n_denoising.rst", "auto_examples/self-supervised-learning/demo_r2r_denoising.rst", "auto_examples/self-supervised-learning/demo_splitting_loss.rst", "auto_examples/self-supervised-learning/demo_sure_denoising.rst", "auto_examples/self-supervised-learning/demo_unsure.rst", "auto_examples/self-supervised-learning/index.rst", "auto_examples/self-supervised-learning/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/unfolded/demo_DEQ.rst", "auto_examples/unfolded/demo_LISTA.rst", "auto_examples/unfolded/demo_custom_prior_unfolded.rst", "auto_examples/unfolded/demo_learned_primal_dual.rst", "auto_examples/unfolded/demo_unfolded_constrained_LISTA.rst", "auto_examples/unfolded/demo_vanilla_unfolded.rst", "auto_examples/unfolded/index.rst", "auto_examples/unfolded/sg_execution_times.rst", "community.rst", "contributing.rst", "finding_help.rst", "index.rst", "quickstart.rst", "sg_execution_times.rst", "user_guide.rst", "user_guide/other/notation.rst", "user_guide/other/utils.rst", "user_guide/physics/defining.rst", "user_guide/physics/functional.rst", "user_guide/physics/intro.rst", "user_guide/physics/physics.rst", "user_guide/reconstruction/adversarial.rst", "user_guide/reconstruction/artifact.rst", "user_guide/reconstruction/denoisers.rst", "user_guide/reconstruction/introduction.rst", "user_guide/reconstruction/iterative.rst", "user_guide/reconstruction/optimization.rst", "user_guide/reconstruction/sampling.rst", "user_guide/reconstruction/specific.rst", "user_guide/reconstruction/unfolded.rst", "user_guide/reconstruction/weights.rst", "user_guide/training/datasets.rst", "user_guide/training/loss.rst", "user_guide/training/metric.rst", "user_guide/training/multigpu.rst", "user_guide/training/trainer.rst", "user_guide/training/transforms.rst"], "indexentries": {"__add__() (deepinv.loss.metric.metric method)": [[70, "deepinv.loss.metric.Metric.__add__", false]], "__add__() (deepinv.physics.generator.physicsgenerator method)": [[243, "deepinv.physics.generator.PhysicsGenerator.__add__", false]], "__add__() (deepinv.transform.transform method)": [[268, "deepinv.transform.Transform.__add__", false]], "__mul__() (deepinv.physics.inpainting method)": [[183, "deepinv.physics.Inpainting.__mul__", false]], "__mul__() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.__mul__", false]], "__mul__() (deepinv.physics.noisemodel method)": [[189, "deepinv.physics.NoiseModel.__mul__", false]], "__mul__() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.__mul__", false]], "__mul__() (deepinv.transform.transform method)": [[268, "deepinv.transform.Transform.__mul__", false]], "a() (deepinv.physics.blur method)": [[169, "deepinv.physics.Blur.A", false]], "a() (deepinv.physics.blurfft method)": [[170, "deepinv.physics.BlurFFT.A", false]], "a() (deepinv.physics.compressedsensing method)": [[171, "deepinv.physics.CompressedSensing.A", false]], "a() (deepinv.physics.compressivespectralimaging method)": [[172, "deepinv.physics.CompressiveSpectralImaging.A", false]], "a() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.A", false]], "a() (deepinv.physics.downsampling method)": [[177, "deepinv.physics.Downsampling.A", false]], "a() (deepinv.physics.dynamicmri method)": [[178, "deepinv.physics.DynamicMRI.A", false]], "a() (deepinv.physics.haze method)": [[181, "deepinv.physics.Haze.A", false]], "a() (deepinv.physics.hyperspectralunmixing method)": [[182, "deepinv.physics.HyperSpectralUnmixing.A", false]], "a() (deepinv.physics.multicoilmri method)": [[188, "deepinv.physics.MultiCoilMRI.A", false]], "a() (deepinv.physics.phaseretrieval method)": [[191, "deepinv.physics.PhaseRetrieval.A", false]], "a() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.A", false]], "a() (deepinv.physics.ptychographylinearoperator method)": [[196, "deepinv.physics.PtychographyLinearOperator.A", false]], "a() (deepinv.physics.radiointerferometry method)": [[197, "deepinv.physics.RadioInterferometry.A", false]], "a() (deepinv.physics.sequentialmri method)": [[199, "deepinv.physics.SequentialMRI.A", false]], "a() (deepinv.physics.singlephotonlidar method)": [[200, "deepinv.physics.SinglePhotonLidar.A", false]], "a() (deepinv.physics.spacevaryingblur method)": [[202, "deepinv.physics.SpaceVaryingBlur.A", false]], "a() (deepinv.physics.stackedphysics method)": [[204, "deepinv.physics.StackedPhysics.A", false]], "a() (deepinv.physics.tomography method)": [[208, "deepinv.physics.Tomography.A", false]], "a_a_adjoint() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.A_A_adjoint", false]], "a_a_adjoint() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.A_A_adjoint", false]], "a_adjoint() (deepinv.physics.blur method)": [[169, "deepinv.physics.Blur.A_adjoint", false]], "a_adjoint() (deepinv.physics.blurfft method)": [[170, "deepinv.physics.BlurFFT.A_adjoint", false]], "a_adjoint() (deepinv.physics.compressedsensing method)": [[171, "deepinv.physics.CompressedSensing.A_adjoint", false]], "a_adjoint() (deepinv.physics.compressivespectralimaging method)": [[172, "deepinv.physics.CompressiveSpectralImaging.A_adjoint", false]], "a_adjoint() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.downsampling method)": [[177, "deepinv.physics.Downsampling.A_adjoint", false]], "a_adjoint() (deepinv.physics.dynamicmri method)": [[178, "deepinv.physics.DynamicMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.hyperspectralunmixing method)": [[182, "deepinv.physics.HyperSpectralUnmixing.A_adjoint", false]], "a_adjoint() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.mri method)": [[186, "deepinv.physics.MRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.multicoilmri method)": [[188, "deepinv.physics.MultiCoilMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.ptychographylinearoperator method)": [[196, "deepinv.physics.PtychographyLinearOperator.A_adjoint", false]], "a_adjoint() (deepinv.physics.radiointerferometry method)": [[197, "deepinv.physics.RadioInterferometry.A_adjoint", false]], "a_adjoint() (deepinv.physics.sequentialmri method)": [[199, "deepinv.physics.SequentialMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.spacevaryingblur method)": [[202, "deepinv.physics.SpaceVaryingBlur.A_adjoint", false]], "a_adjoint() (deepinv.physics.stackedlinearphysics method)": [[203, "deepinv.physics.StackedLinearPhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.tomography method)": [[208, "deepinv.physics.Tomography.A_adjoint", false]], "a_adjoint_a() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.A_adjoint_A", false]], "a_adjoint_a() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.A_adjoint_A", false]], "a_dagger() (deepinv.physics.compressedsensing method)": [[171, "deepinv.physics.CompressedSensing.A_dagger", false]], "a_dagger() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.A_dagger", false]], "a_dagger() (deepinv.physics.dynamicmri method)": [[178, "deepinv.physics.DynamicMRI.A_dagger", false]], "a_dagger() (deepinv.physics.haze method)": [[181, "deepinv.physics.Haze.A_dagger", false]], "a_dagger() (deepinv.physics.hyperspectralunmixing method)": [[182, "deepinv.physics.HyperSpectralUnmixing.A_dagger", false]], "a_dagger() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.A_dagger", false]], "a_dagger() (deepinv.physics.pansharpen method)": [[190, "deepinv.physics.Pansharpen.A_dagger", false]], "a_dagger() (deepinv.physics.phaseretrieval method)": [[191, "deepinv.physics.PhaseRetrieval.A_dagger", false]], "a_dagger() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.A_dagger", false]], "a_dagger() (deepinv.physics.singlephotonlidar method)": [[200, "deepinv.physics.SinglePhotonLidar.A_dagger", false]], "a_dagger() (deepinv.physics.tomography method)": [[208, "deepinv.physics.Tomography.A_dagger", false]], "a_vjp() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.A_vjp", false]], "a_vjp() (deepinv.physics.phaseretrieval method)": [[191, "deepinv.physics.PhaseRetrieval.A_vjp", false]], "a_vjp() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.A_vjp", false]], "adapt_model() (deepinv.loss.baselossscheduler method)": [[33, "deepinv.loss.BaseLossScheduler.adapt_model", false]], "adapt_model() (deepinv.loss.loss method)": [[39, "deepinv.loss.Loss.adapt_model", false]], "adapt_model() (deepinv.loss.phase2phaseloss method)": [[44, "deepinv.loss.Phase2PhaseLoss.adapt_model", false]], "adapt_model() (deepinv.loss.r2rloss method)": [[45, "deepinv.loss.R2RLoss.adapt_model", false]], "adapt_model() (deepinv.loss.scoreloss method)": [[47, "deepinv.loss.ScoreLoss.adapt_model", false]], "adapt_model() (deepinv.loss.splittingloss method)": [[48, "deepinv.loss.SplittingLoss.adapt_model", false]], "adjoint_function() (in module deepinv.physics)": [[211, "deepinv.physics.adjoint_function", false]], "adjointness_test() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.adjointness_test", false]], "admmiteration (class in deepinv.optim.optim_iterators)": [[150, "deepinv.optim.optim_iterators.ADMMIteration", false]], "adversarial_loss() (deepinv.loss.adversarial.discriminatorloss method)": [[56, "deepinv.loss.adversarial.DiscriminatorLoss.adversarial_loss", false]], "adversarial_loss() (deepinv.loss.adversarial.generatorloss method)": [[58, "deepinv.loss.adversarial.GeneratorLoss.adversarial_loss", false]], "adversarialoptimizer (class in deepinv.training)": [[259, "deepinv.training.AdversarialOptimizer", false]], "adversarialtrainer (class in deepinv.training)": [[260, "deepinv.training.AdversarialTrainer", false]], "affine (class in deepinv.transform.projective)": [[269, "deepinv.transform.projective.Affine", false]], "amplitudeloss (class in deepinv.optim)": [[112, "deepinv.optim.AmplitudeLoss", false]], "amplitudelossdistance (class in deepinv.optim)": [[113, "deepinv.optim.AmplitudeLossDistance", false]], "anderson_acceleration_step() (deepinv.optim.fixedpoint method)": [[123, "deepinv.optim.FixedPoint.anderson_acceleration_step", false]], "artifact2artifactloss (class in deepinv.loss)": [[32, "deepinv.loss.Artifact2ArtifactLoss", false]], "artifact2artifactsplittingmaskgenerator (class in deepinv.physics.generator)": [[230, "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", false]], "artifactremoval (class in deepinv.models)": [[77, "deepinv.models.ArtifactRemoval", false]], "autoencoder (class in deepinv.models)": [[78, "deepinv.models.AutoEncoder", false]], "average() (deepinv.physics.timemixin static method)": [[207, "deepinv.physics.TimeMixin.average", false]], "averagemeter (class in deepinv.utils)": [[277, "deepinv.utils.AverageMeter", false]], "b_dagger() (deepinv.physics.phaseretrieval method)": [[191, "deepinv.physics.PhaseRetrieval.B_dagger", false]], "b_dagger() (deepinv.physics.structuredrandomphaseretrieval method)": [[206, "deepinv.physics.StructuredRandomPhaseRetrieval.B_dagger", false]], "backbone_inference() (deepinv.models.artifactremoval method)": [[77, "deepinv.models.ArtifactRemoval.backbone_inference", false]], "backbone_inference() (deepinv.models.varnet method)": [[108, "deepinv.models.VarNet.backbone_inference", false]], "basedeq (class in deepinv.unfolded)": [[273, "deepinv.unfolded.BaseDEQ", false]], "baselossscheduler (class in deepinv.loss)": [[33, "deepinv.loss.BaseLossScheduler", false]], "basemaskgenerator (class in deepinv.physics.generator)": [[231, "deepinv.physics.generator.BaseMaskGenerator", false]], "baseoptim (class in deepinv.optim)": [[114, "deepinv.optim.BaseOptim", false]], "baseunfold (class in deepinv.unfolded)": [[274, "deepinv.unfolded.BaseUnfold", false]], "batch_step() (deepinv.physics.generator.artifact2artifactsplittingmaskgenerator method)": [[230, "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[232, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.gaussiansplittingmaskgenerator method)": [[238, "deepinv.physics.generator.GaussianSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.phase2phasesplittingmaskgenerator method)": [[242, "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator.batch_step", false]], "bernoullisplittingmaskgenerator (class in deepinv.physics.generator)": [[232, "deepinv.physics.generator.BernoulliSplittingMaskGenerator", false]], "bicgstab() (in module deepinv.optim.utils)": [[164, "deepinv.optim.utils.bicgstab", false]], "bicubic_filter() (in module deepinv.physics.blur)": [[212, "deepinv.physics.blur.bicubic_filter", false]], "bilinear_filter() (in module deepinv.physics.blur)": [[213, "deepinv.physics.blur.bilinear_filter", false]], "blur (class in deepinv.physics)": [[169, "deepinv.physics.Blur", false]], "blurfft (class in deepinv.physics)": [[170, "deepinv.physics.BlurFFT", false]], "bm3d (class in deepinv.models)": [[79, "deepinv.models.BM3D", false]], "bregman (class in deepinv.optim)": [[115, "deepinv.optim.Bregman", false]], "bregman_icnn (class in deepinv.optim)": [[117, "deepinv.optim.Bregman_ICNN", false]], "bregman_prox() (deepinv.optim.potential method)": [[141, "deepinv.optim.Potential.bregman_prox", false]], "bregmanl2 (class in deepinv.optim)": [[116, "deepinv.optim.BregmanL2", false]], "build_probe() (in module deepinv.physics.phase_retrieval)": [[247, "deepinv.physics.phase_retrieval.build_probe", false]], "burgentropy (class in deepinv.optim)": [[118, "deepinv.optim.BurgEntropy", false]], "cbsd68 (class in deepinv.datasets)": [[13, "deepinv.datasets.CBSD68", false]], "check_clip_grad() (deepinv.trainer method)": [[12, "deepinv.Trainer.check_clip_grad", false]], "check_clip_grad_d() (deepinv.training.adversarialtrainer method)": [[260, "deepinv.training.AdversarialTrainer.check_clip_grad_D", false]], "check_conv_fn() (deepinv.optim.baseoptim method)": [[114, "deepinv.optim.BaseOptim.check_conv_fn", false]], "check_dataset_exists() (deepinv.datasets.cbsd68 method)": [[13, "deepinv.datasets.CBSD68.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.flickr2khr method)": [[18, "deepinv.datasets.Flickr2kHR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.nbudataset method)": [[23, "deepinv.datasets.NBUDataset.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.set14hr method)": [[25, "deepinv.datasets.Set14HR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.urban100hr method)": [[27, "deepinv.datasets.Urban100HR.check_dataset_exists", false]], "check_iteration_fn() (deepinv.optim.baseoptim method)": [[114, "deepinv.optim.BaseOptim.check_iteration_fn", false]], "check_mask() (deepinv.physics.dynamicmri method)": [[178, "deepinv.physics.DynamicMRI.check_mask", false]], "check_mask() (deepinv.physics.mrimixin method)": [[187, "deepinv.physics.MRIMixin.check_mask", false]], "check_pixelwise() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[232, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.check_pixelwise", false]], "classify() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.classify", false]], "cmrxreconslicedataset (class in deepinv.datasets)": [[14, "deepinv.datasets.CMRxReconSliceDataset", false]], "component_log_likelihoods() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.component_log_likelihoods", false]], "compressedsensing (class in deepinv.physics)": [[171, "deepinv.physics.CompressedSensing", false]], "compressivespectralimaging (class in deepinv.physics)": [[172, "deepinv.physics.CompressiveSpectralImaging", false]], "compute_alpha() (deepinv.sampling.diffpir method)": [[252, "deepinv.sampling.DiffPIR.compute_alpha", false]], "compute_alpha_betas() (deepinv.sampling.dps method)": [[251, "deepinv.sampling.DPS.compute_alpha_betas", false]], "compute_loss() (deepinv.trainer method)": [[12, "deepinv.Trainer.compute_loss", false]], "compute_loss() (deepinv.training.adversarialtrainer method)": [[260, "deepinv.training.AdversarialTrainer.compute_loss", false]], "compute_metrics() (deepinv.trainer method)": [[12, "deepinv.Trainer.compute_metrics", false]], "compute_norm() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.compute_norm", false]], "condition_number() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.condition_number", false]], "confocalblurgenerator3d (class in deepinv.physics.generator)": [[233, "deepinv.physics.generator.ConfocalBlurGenerator3D", false]], "conjugate() (deepinv.optim.bregman_icnn method)": [[117, "deepinv.optim.Bregman_ICNN.conjugate", false]], "conjugate() (deepinv.optim.bregmanl2 method)": [[116, "deepinv.optim.BregmanL2.conjugate", false]], "conjugate() (deepinv.optim.burgentropy method)": [[118, "deepinv.optim.BurgEntropy.conjugate", false]], "conjugate() (deepinv.optim.negentropy method)": [[134, "deepinv.optim.NegEntropy.conjugate", false]], "conjugate() (deepinv.optim.potential method)": [[141, "deepinv.optim.Potential.conjugate", false]], "conjugate_gradient() (in module deepinv.optim.utils)": [[165, "deepinv.optim.utils.conjugate_gradient", false]], "conv2d() (in module deepinv.physics.functional)": [[218, "deepinv.physics.functional.conv2d", false]], "conv2d_fft() (in module deepinv.physics.functional)": [[219, "deepinv.physics.functional.conv2d_fft", false]], "conv3d_fft() (in module deepinv.physics.functional)": [[220, "deepinv.physics.functional.conv3d_fft", false]], "conv_transpose2d() (in module deepinv.physics.functional)": [[221, "deepinv.physics.functional.conv_transpose2d", false]], "conv_transpose2d_fft() (in module deepinv.physics.functional)": [[222, "deepinv.physics.functional.conv_transpose2d_fft", false]], "conv_transpose3d_fft() (in module deepinv.physics.functional)": [[223, "deepinv.physics.functional.conv_transpose3d_fft", false]], "convdecoder (class in deepinv.models)": [[81, "deepinv.models.ConvDecoder", false]], "convert_to_fp16() (deepinv.models.diffunet method)": [[87, "deepinv.models.DiffUNet.convert_to_fp16", false]], "convert_to_fp32() (deepinv.models.diffunet method)": [[87, "deepinv.models.DiffUNet.convert_to_fp32", false]], "correct_global_phase() (in module deepinv.optim.phase_retrieval)": [[161, "deepinv.optim.phase_retrieval.correct_global_phase", false]], "cpabdiffeomorphism (class in deepinv.transform)": [[261, "deepinv.transform.CPABDiffeomorphism", false]], "cpiteration (class in deepinv.optim.optim_iterators)": [[151, "deepinv.optim.optim_iterators.CPIteration", false]], "create_sampler() (deepinv.models.pannet method)": [[97, "deepinv.models.PanNet.create_sampler", false]], "crop() (deepinv.physics.compressivespectralimaging method)": [[172, "deepinv.physics.CompressiveSpectralImaging.crop", false]], "crop() (deepinv.physics.mrimixin method)": [[187, "deepinv.physics.MRIMixin.crop", false]], "crop_output() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.crop_output", false]], "csgmgenerator (class in deepinv.models)": [[80, "deepinv.models.CSGMGenerator", false]], "d_lambda() (deepinv.loss.metric.qnr method)": [[74, "deepinv.loss.metric.QNR.D_lambda", false]], "d_s() (deepinv.loss.metric.qnr method)": [[74, "deepinv.loss.metric.QNR.D_s", false]], "datafidelity (class in deepinv.optim)": [[120, "deepinv.optim.DataFidelity", false]], "dcgandiscriminator (class in deepinv.models)": [[82, "deepinv.models.DCGANDiscriminator", false]], "dcgangenerator (class in deepinv.models)": [[83, "deepinv.models.DCGANGenerator", false]], "ddrm (class in deepinv.sampling)": [[250, "deepinv.sampling.DDRM", false]], "decolorize (class in deepinv.physics)": [[173, "deepinv.physics.Decolorize", false]], "decomposablephysics (class in deepinv.physics)": [[174, "deepinv.physics.DecomposablePhysics", false]], "deepimageprior (class in deepinv.models)": [[85, "deepinv.models.DeepImagePrior", false]], "demo_mri_model() (in module deepinv.utils.demo)": [[280, "deepinv.utils.demo.demo_mri_model", false]], "demosaicing (class in deepinv.physics)": [[175, "deepinv.physics.Demosaicing", false]], "denoiser (class in deepinv.models)": [[86, "deepinv.models.Denoiser", false]], "denoising (class in deepinv.physics)": [[176, "deepinv.physics.Denoising", false]], "deq_builder() (in module deepinv.unfolded)": [[275, "deepinv.unfolded.DEQ_builder", false]], "diffpir (class in deepinv.sampling)": [[252, "deepinv.sampling.DiffPIR", false]], "diffractionblurgenerator (class in deepinv.physics.generator)": [[234, "deepinv.physics.generator.DiffractionBlurGenerator", false]], "diffractionblurgenerator3d (class in deepinv.physics.generator)": [[235, "deepinv.physics.generator.DiffractionBlurGenerator3D", false]], "diffunet (class in deepinv.models)": [[87, "deepinv.models.DiffUNet", false]], "diffusionsampler (class in deepinv.sampling)": [[253, "deepinv.sampling.DiffusionSampler", false]], "dirac_like() (in module deepinv.utils)": [[281, "deepinv.utils.dirac_like", false]], "discriminatorloss (class in deepinv.loss.adversarial)": [[56, "deepinv.loss.adversarial.DiscriminatorLoss", false]], "discriminatormetric (class in deepinv.loss.adversarial)": [[57, "deepinv.loss.adversarial.DiscriminatorMetric", false]], "distance (class in deepinv.optim)": [[121, "deepinv.optim.Distance", false]], "div() (deepinv.optim.bregman method)": [[115, "deepinv.optim.Bregman.div", false]], "div() (deepinv.optim.bregmanl2 method)": [[116, "deepinv.optim.BregmanL2.div", false]], "div2k (class in deepinv.datasets)": [[15, "deepinv.datasets.DIV2K", false]], "dncnn (class in deepinv.models)": [[88, "deepinv.models.DnCNN", false]], "download() (deepinv.datasets.kohler class method)": [[20, "deepinv.datasets.Kohler.download", false]], "downsampling (class in deepinv.physics)": [[177, "deepinv.physics.Downsampling", false]], "dpir (class in deepinv.optim)": [[119, "deepinv.optim.DPIR", false]], "dps (class in deepinv.sampling)": [[251, "deepinv.sampling.DPS", false]], "drsiteration (class in deepinv.optim.optim_iterators)": [[152, "deepinv.optim.optim_iterators.DRSIteration", false]], "drunet (class in deepinv.models)": [[84, "deepinv.models.DRUNet", false]], "dst1() (in module deepinv.physics.functional)": [[224, "deepinv.physics.functional.dst1", false]], "dwt() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.dwt", false]], "dynamicmri (class in deepinv.physics)": [[178, "deepinv.physics.DynamicMRI", false]], "eiloss (class in deepinv.loss)": [[34, "deepinv.loss.EILoss", false]], "epll (class in deepinv.optim)": [[122, "deepinv.optim.EPLL", false]], "eplldenoiser (class in deepinv.models)": [[89, "deepinv.models.EPLLDenoiser", false]], "epsilon() (deepinv.models.tgvdenoiser static method)": [[103, "deepinv.models.TGVDenoiser.epsilon", false]], "epsilon_adjoint() (deepinv.models.tgvdenoiser static method)": [[103, "deepinv.models.TGVDenoiser.epsilon_adjoint", false]], "equispacedmaskgenerator (class in deepinv.physics.generator)": [[236, "deepinv.physics.generator.EquispacedMaskGenerator", false]], "equivariantdenoiser (class in deepinv.models)": [[91, "deepinv.models.EquivariantDenoiser", false]], "ergas (class in deepinv.loss.metric)": [[64, "deepinv.loss.metric.ERGAS", false]], "esrgandiscriminator (class in deepinv.models)": [[90, "deepinv.models.ESRGANDiscriminator", false]], "euclidean (class in deepinv.transform.projective)": [[270, "deepinv.transform.projective.Euclidean", false]], "f_matern() (deepinv.physics.generator.motionblurgenerator method)": [[240, "deepinv.physics.generator.MotionBlurGenerator.f_matern", false]], "fastmrislicedataset (class in deepinv.datasets)": [[17, "deepinv.datasets.FastMRISliceDataset", false]], "fastmrislicedataset.slicesampleid (class in deepinv.datasets)": [[17, "deepinv.datasets.FastMRISliceDataset.SliceSampleID", false]], "fft() (deepinv.physics.mrimixin static method)": [[187, "deepinv.physics.MRIMixin.fft", false]], "find_nearest() (deepinv.models.diffunet method)": [[87, "deepinv.models.DiffUNet.find_nearest", false]], "find_nearest() (deepinv.sampling.diffpir method)": [[252, "deepinv.sampling.DiffPIR.find_nearest", false]], "fistaiteration (class in deepinv.optim.optim_iterators)": [[153, "deepinv.optim.optim_iterators.FISTAIteration", false]], "fit() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.fit", false]], "fixedpoint (class in deepinv.optim)": [[123, "deepinv.optim.FixedPoint", false]], "flatten() (deepinv.physics.compressivespectralimaging method)": [[172, "deepinv.physics.CompressiveSpectralImaging.flatten", false]], "flatten() (deepinv.physics.timemixin static method)": [[207, "deepinv.physics.TimeMixin.flatten", false]], "flatten_c() (deepinv.physics.timemixin static method)": [[207, "deepinv.physics.TimeMixin.flatten_C", false]], "flatten_coeffs() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.flatten_coeffs", false]], "flickr2khr (class in deepinv.datasets)": [[18, "deepinv.datasets.Flickr2kHR", false]], "fmd (class in deepinv.datasets)": [[16, "deepinv.datasets.FMD", false]], "fmd.noisysampleidentifier (class in deepinv.datasets)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier", false]], "fn() (deepinv.optim.amplitudelossdistance method)": [[113, "deepinv.optim.AmplitudeLossDistance.fn", false]], "fn() (deepinv.optim.bregman_icnn method)": [[117, "deepinv.optim.Bregman_ICNN.fn", false]], "fn() (deepinv.optim.bregmanl2 method)": [[116, "deepinv.optim.BregmanL2.fn", false]], "fn() (deepinv.optim.burgentropy method)": [[118, "deepinv.optim.BurgEntropy.fn", false]], "fn() (deepinv.optim.datafidelity method)": [[120, "deepinv.optim.DataFidelity.fn", false]], "fn() (deepinv.optim.distance method)": [[121, "deepinv.optim.Distance.fn", false]], "fn() (deepinv.optim.indicatorl2distance method)": [[125, "deepinv.optim.IndicatorL2Distance.fn", false]], "fn() (deepinv.optim.l12prior method)": [[127, "deepinv.optim.L12Prior.fn", false]], "fn() (deepinv.optim.l1distance method)": [[128, "deepinv.optim.L1Distance.fn", false]], "fn() (deepinv.optim.l1prior method)": [[129, "deepinv.optim.L1Prior.fn", false]], "fn() (deepinv.optim.l2distance method)": [[131, "deepinv.optim.L2Distance.fn", false]], "fn() (deepinv.optim.logpoissonlikelihooddistance method)": [[133, "deepinv.optim.LogPoissonLikelihoodDistance.fn", false]], "fn() (deepinv.optim.negentropy method)": [[134, "deepinv.optim.NegEntropy.fn", false]], "fn() (deepinv.optim.patchnr method)": [[136, "deepinv.optim.PatchNR.fn", false]], "fn() (deepinv.optim.patchprior method)": [[137, "deepinv.optim.PatchPrior.fn", false]], "fn() (deepinv.optim.poissonlikelihooddistance method)": [[140, "deepinv.optim.PoissonLikelihoodDistance.fn", false]], "fn() (deepinv.optim.potential method)": [[141, "deepinv.optim.Potential.fn", false]], "fn() (deepinv.optim.stackedphysicsdatafidelity method)": [[145, "deepinv.optim.StackedPhysicsDataFidelity.fn", false]], "fn() (deepinv.optim.tikhonov method)": [[147, "deepinv.optim.Tikhonov.fn", false]], "fn() (deepinv.optim.tvprior method)": [[146, "deepinv.optim.TVPrior.fn", false]], "fn() (deepinv.optim.waveletprior method)": [[148, "deepinv.optim.WaveletPrior.fn", false]], "fname (deepinv.datasets.fastmrislicedataset.slicesampleid attribute)": [[17, "deepinv.datasets.FastMRISliceDataset.SliceSampleID.fname", false]], "fname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier.fname", false]], "fnejacobianspectralnorm (class in deepinv.loss)": [[35, "deepinv.loss.FNEJacobianSpectralNorm", false]], "forward() (deepinv.datasets.utils.rescale method)": [[30, "deepinv.datasets.utils.Rescale.forward", false]], "forward() (deepinv.datasets.utils.tocomplex method)": [[31, "deepinv.datasets.utils.ToComplex.forward", false]], "forward() (deepinv.loss.adversarial.discriminatorloss method)": [[56, "deepinv.loss.adversarial.DiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.generatorloss method)": [[58, "deepinv.loss.adversarial.GeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialdiscriminatorloss method)": [[59, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialgeneratorloss method)": [[60, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.uairgeneratorloss method)": [[61, "deepinv.loss.adversarial.UAIRGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialdiscriminatorloss method)": [[62, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialgeneratorloss method)": [[63, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.artifact2artifactloss method)": [[32, "deepinv.loss.Artifact2ArtifactLoss.forward", false]], "forward() (deepinv.loss.baselossscheduler method)": [[33, "deepinv.loss.BaseLossScheduler.forward", false]], "forward() (deepinv.loss.eiloss method)": [[34, "deepinv.loss.EILoss.forward", false]], "forward() (deepinv.loss.fnejacobianspectralnorm method)": [[35, "deepinv.loss.FNEJacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.jacobianspectralnorm method)": [[38, "deepinv.loss.JacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.loss method)": [[39, "deepinv.loss.Loss.forward", false]], "forward() (deepinv.loss.mcloss method)": [[40, "deepinv.loss.MCLoss.forward", false]], "forward() (deepinv.loss.metric.metric method)": [[70, "deepinv.loss.metric.Metric.forward", false]], "forward() (deepinv.loss.moeiloss method)": [[41, "deepinv.loss.MOEILoss.forward", false]], "forward() (deepinv.loss.moiloss method)": [[42, "deepinv.loss.MOILoss.forward", false]], "forward() (deepinv.loss.neighbor2neighbor method)": [[43, "deepinv.loss.Neighbor2Neighbor.forward", false]], "forward() (deepinv.loss.r2rloss method)": [[45, "deepinv.loss.R2RLoss.forward", false]], "forward() (deepinv.loss.scoreloss method)": [[47, "deepinv.loss.ScoreLoss.forward", false]], "forward() (deepinv.loss.scoreloss.scoremodel method)": [[47, "deepinv.loss.ScoreLoss.ScoreModel.forward", false]], "forward() (deepinv.loss.splittingloss method)": [[48, "deepinv.loss.SplittingLoss.forward", false]], "forward() (deepinv.loss.splittingloss.splittingmodel method)": [[48, "deepinv.loss.SplittingLoss.SplittingModel.forward", false]], "forward() (deepinv.loss.stackedphysicsloss method)": [[49, "deepinv.loss.StackedPhysicsLoss.forward", false]], "forward() (deepinv.loss.suploss method)": [[51, "deepinv.loss.SupLoss.forward", false]], "forward() (deepinv.loss.suregaussianloss method)": [[52, "deepinv.loss.SureGaussianLoss.forward", false]], "forward() (deepinv.loss.surepgloss method)": [[53, "deepinv.loss.SurePGLoss.forward", false]], "forward() (deepinv.loss.surepoissonloss method)": [[54, "deepinv.loss.SurePoissonLoss.forward", false]], "forward() (deepinv.loss.tvloss method)": [[55, "deepinv.loss.TVLoss.forward", false]], "forward() (deepinv.models.artifactremoval method)": [[77, "deepinv.models.ArtifactRemoval.forward", false]], "forward() (deepinv.models.autoencoder method)": [[78, "deepinv.models.AutoEncoder.forward", false]], "forward() (deepinv.models.bm3d method)": [[79, "deepinv.models.BM3D.forward", false]], "forward() (deepinv.models.convdecoder method)": [[81, "deepinv.models.ConvDecoder.forward", false]], "forward() (deepinv.models.csgmgenerator method)": [[80, "deepinv.models.CSGMGenerator.forward", false]], "forward() (deepinv.models.dcgandiscriminator method)": [[82, "deepinv.models.DCGANDiscriminator.forward", false]], "forward() (deepinv.models.dcgangenerator method)": [[83, "deepinv.models.DCGANGenerator.forward", false]], "forward() (deepinv.models.deepimageprior method)": [[85, "deepinv.models.DeepImagePrior.forward", false]], "forward() (deepinv.models.denoiser method)": [[86, "deepinv.models.Denoiser.forward", false]], "forward() (deepinv.models.diffunet method)": [[87, "deepinv.models.DiffUNet.forward", false]], "forward() (deepinv.models.dncnn method)": [[88, "deepinv.models.DnCNN.forward", false]], "forward() (deepinv.models.drunet method)": [[84, "deepinv.models.DRUNet.forward", false]], "forward() (deepinv.models.eplldenoiser method)": [[89, "deepinv.models.EPLLDenoiser.forward", false]], "forward() (deepinv.models.equivariantdenoiser method)": [[91, "deepinv.models.EquivariantDenoiser.forward", false]], "forward() (deepinv.models.esrgandiscriminator method)": [[90, "deepinv.models.ESRGANDiscriminator.forward", false]], "forward() (deepinv.models.icnn method)": [[93, "deepinv.models.ICNN.forward", false]], "forward() (deepinv.models.medianfilter method)": [[94, "deepinv.models.MedianFilter.forward", false]], "forward() (deepinv.models.pannet method)": [[97, "deepinv.models.PanNet.forward", false]], "forward() (deepinv.models.patchgandiscriminator method)": [[98, "deepinv.models.PatchGANDiscriminator.forward", false]], "forward() (deepinv.models.pdnet_dualblock method)": [[95, "deepinv.models.PDNet_DualBlock.forward", false]], "forward() (deepinv.models.pdnet_primalblock method)": [[96, "deepinv.models.PDNet_PrimalBlock.forward", false]], "forward() (deepinv.models.reconstructor method)": [[99, "deepinv.models.Reconstructor.forward", false]], "forward() (deepinv.models.restormer method)": [[100, "deepinv.models.Restormer.forward", false]], "forward() (deepinv.models.scunet method)": [[101, "deepinv.models.SCUNet.forward", false]], "forward() (deepinv.models.swinir method)": [[102, "deepinv.models.SwinIR.forward", false]], "forward() (deepinv.models.tgvdenoiser method)": [[103, "deepinv.models.TGVDenoiser.forward", false]], "forward() (deepinv.models.timeagnosticnet method)": [[105, "deepinv.models.TimeAgnosticNet.forward", false]], "forward() (deepinv.models.timeaveragingnet method)": [[106, "deepinv.models.TimeAveragingNet.forward", false]], "forward() (deepinv.models.tvdenoiser method)": [[104, "deepinv.models.TVDenoiser.forward", false]], "forward() (deepinv.models.unet method)": [[107, "deepinv.models.UNet.forward", false]], "forward() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.forward", false]], "forward() (deepinv.models.waveletdictdenoiser method)": [[110, "deepinv.models.WaveletDictDenoiser.forward", false]], "forward() (deepinv.optim.baseoptim method)": [[114, "deepinv.optim.BaseOptim.forward", false]], "forward() (deepinv.optim.distance method)": [[121, "deepinv.optim.Distance.forward", false]], "forward() (deepinv.optim.epll method)": [[122, "deepinv.optim.EPLL.forward", false]], "forward() (deepinv.optim.fixedpoint method)": [[123, "deepinv.optim.FixedPoint.forward", false]], "forward() (deepinv.optim.optim_iterators.admmiteration method)": [[150, "deepinv.optim.optim_iterators.ADMMIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.cpiteration method)": [[151, "deepinv.optim.optim_iterators.CPIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.drsiteration method)": [[152, "deepinv.optim.optim_iterators.DRSIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.fistaiteration method)": [[153, "deepinv.optim.optim_iterators.FISTAIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.gditeration method)": [[154, "deepinv.optim.optim_iterators.GDIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.mditeration method)": [[156, "deepinv.optim.optim_iterators.MDIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.smiteration method)": [[158, "deepinv.optim.optim_iterators.SMIteration.forward", false]], "forward() (deepinv.optim.optimiterator method)": [[135, "deepinv.optim.OptimIterator.forward", false]], "forward() (deepinv.optim.potential method)": [[141, "deepinv.optim.Potential.forward", false]], "forward() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.forward", false]], "forward() (deepinv.physics.functional.iradon method)": [[216, "deepinv.physics.functional.IRadon.forward", false]], "forward() (deepinv.physics.functional.radon method)": [[217, "deepinv.physics.functional.Radon.forward", false]], "forward() (deepinv.physics.gammanoise method)": [[179, "deepinv.physics.GammaNoise.forward", false]], "forward() (deepinv.physics.gaussiannoise method)": [[180, "deepinv.physics.GaussianNoise.forward", false]], "forward() (deepinv.physics.logpoissonnoise method)": [[185, "deepinv.physics.LogPoissonNoise.forward", false]], "forward() (deepinv.physics.noisemodel method)": [[189, "deepinv.physics.NoiseModel.forward", false]], "forward() (deepinv.physics.phaseretrieval method)": [[191, "deepinv.physics.PhaseRetrieval.forward", false]], "forward() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.forward", false]], "forward() (deepinv.physics.poissongaussiannoise method)": [[193, "deepinv.physics.PoissonGaussianNoise.forward", false]], "forward() (deepinv.physics.poissonnoise method)": [[194, "deepinv.physics.PoissonNoise.forward", false]], "forward() (deepinv.physics.uniformgaussiannoise method)": [[209, "deepinv.physics.UniformGaussianNoise.forward", false]], "forward() (deepinv.physics.uniformnoise method)": [[210, "deepinv.physics.UniformNoise.forward", false]], "forward() (deepinv.sampling.ddrm method)": [[250, "deepinv.sampling.DDRM.forward", false]], "forward() (deepinv.sampling.diffpir method)": [[252, "deepinv.sampling.DiffPIR.forward", false]], "forward() (deepinv.sampling.dps method)": [[251, "deepinv.sampling.DPS.forward", false]], "forward() (deepinv.sampling.montecarlo method)": [[254, "deepinv.sampling.MonteCarlo.forward", false]], "forward() (deepinv.transform.transform method)": [[268, "deepinv.transform.Transform.forward", false]], "forward() (deepinv.unfolded.basedeq method)": [[273, "deepinv.unfolded.BaseDEQ.forward", false]], "forward() (deepinv.unfolded.baseunfold method)": [[274, "deepinv.unfolded.BaseUnfold.forward", false]], "forward_denoise() (deepinv.models.diffunet method)": [[87, "deepinv.models.DiffUNet.forward_denoise", false]], "forward_diffusion() (deepinv.models.diffunet method)": [[87, "deepinv.models.DiffUNet.forward_diffusion", false]], "forward_restormer() (deepinv.models.restormer method)": [[100, "deepinv.models.Restormer.forward_restormer", false]], "fov (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier.fov", false]], "from_torch_complex() (deepinv.physics.mrimixin static method)": [[187, "deepinv.physics.MRIMixin.from_torch_complex", false]], "fstep (class in deepinv.optim.optim_iterators)": [[159, "deepinv.optim.optim_iterators.fStep", false]], "gammanoise (class in deepinv.physics)": [[179, "deepinv.physics.GammaNoise", false]], "gaussian_blur() (in module deepinv.physics.blur)": [[214, "deepinv.physics.blur.gaussian_blur", false]], "gaussianmaskgenerator (class in deepinv.physics.generator)": [[237, "deepinv.physics.generator.GaussianMaskGenerator", false]], "gaussianmixturemodel (class in deepinv.optim.utils)": [[163, "deepinv.optim.utils.GaussianMixtureModel", false]], "gaussiannoise (class in deepinv.physics)": [[180, "deepinv.physics.GaussianNoise", false]], "gaussiansplittingmaskgenerator (class in deepinv.physics.generator)": [[238, "deepinv.physics.generator.GaussianSplittingMaskGenerator", false]], "gditeration (class in deepinv.optim.optim_iterators)": [[154, "deepinv.optim.optim_iterators.GDIteration", false]], "generate_coeff() (deepinv.physics.generator.diffractionblurgenerator method)": [[234, "deepinv.physics.generator.DiffractionBlurGenerator.generate_coeff", false]], "generate_dataset() (in module deepinv.datasets)": [[28, "deepinv.datasets.generate_dataset", false]], "generate_shifts() (in module deepinv.physics.phase_retrieval)": [[248, "deepinv.physics.phase_retrieval.generate_shifts", false]], "generatorloss (class in deepinv.loss.adversarial)": [[58, "deepinv.loss.adversarial.GeneratorLoss", false]], "generatormixture (class in deepinv.physics.generator)": [[239, "deepinv.physics.generator.GeneratorMixture", false]], "get_alpha_beta() (deepinv.sampling.diffpir method)": [[252, "deepinv.sampling.DiffPIR.get_alpha_beta", false]], "get_alpha_prod() (deepinv.models.diffunet method)": [[87, "deepinv.models.DiffUNet.get_alpha_prod", false]], "get_alpha_prod() (deepinv.sampling.diffpir method)": [[252, "deepinv.sampling.DiffPIR.get_alpha_prod", false]], "get_chain() (deepinv.sampling.montecarlo method)": [[254, "deepinv.sampling.MonteCarlo.get_chain", false]], "get_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.get_cov", false]], "get_cov_inv_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.get_cov_inv_reg", false]], "get_data_home() (in module deepinv.utils)": [[282, "deepinv.utils.get_data_home", false]], "get_degradation_url() (in module deepinv.utils)": [[283, "deepinv.utils.get_degradation_url", false]], "get_freer_gpu() (in module deepinv.utils)": [[284, "deepinv.utils.get_freer_gpu", false]], "get_image_url() (in module deepinv.utils)": [[285, "deepinv.utils.get_image_url", false]], "get_item() (deepinv.datasets.kohler method)": [[20, "deepinv.datasets.Kohler.get_item", false]], "get_noise_schedule() (deepinv.sampling.diffpir method)": [[252, "deepinv.sampling.DiffPIR.get_noise_schedule", false]], "get_overlap_img() (deepinv.physics.ptychographylinearoperator method)": [[196, "deepinv.physics.PtychographyLinearOperator.get_overlap_img", false]], "get_params() (deepinv.transform.transform method)": [[268, "deepinv.transform.Transform.get_params", false]], "get_pdf() (deepinv.physics.generator.gaussianmaskgenerator method)": [[237, "deepinv.physics.generator.GaussianMaskGenerator.get_pdf", false]], "get_pdf() (deepinv.physics.generator.randommaskgenerator method)": [[245, "deepinv.physics.generator.RandomMaskGenerator.get_pdf", false]], "get_samples() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples", false]], "get_samples_offline() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples_offline", false]], "get_samples_online() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples_online", false]], "get_structure() (deepinv.physics.structuredrandomphaseretrieval static method)": [[206, "deepinv.physics.StructuredRandomPhaseRetrieval.get_structure", false]], "get_timestamp (class in deepinv.utils)": [[286, "deepinv.utils.get_timestamp", false]], "get_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.get_weights", false]], "grad() (deepinv.models.icnn method)": [[93, "deepinv.models.ICNN.grad", false]], "grad() (deepinv.optim.amplitudelossdistance method)": [[113, "deepinv.optim.AmplitudeLossDistance.grad", false]], "grad() (deepinv.optim.bregmanl2 method)": [[116, "deepinv.optim.BregmanL2.grad", false]], "grad() (deepinv.optim.burgentropy method)": [[118, "deepinv.optim.BurgEntropy.grad", false]], "grad() (deepinv.optim.datafidelity method)": [[120, "deepinv.optim.DataFidelity.grad", false]], "grad() (deepinv.optim.l1distance method)": [[128, "deepinv.optim.L1Distance.grad", false]], "grad() (deepinv.optim.l2distance method)": [[131, "deepinv.optim.L2Distance.grad", false]], "grad() (deepinv.optim.negentropy method)": [[134, "deepinv.optim.NegEntropy.grad", false]], "grad() (deepinv.optim.poissonlikelihooddistance method)": [[140, "deepinv.optim.PoissonLikelihoodDistance.grad", false]], "grad() (deepinv.optim.potential method)": [[141, "deepinv.optim.Potential.grad", false]], "grad() (deepinv.optim.red method)": [[143, "deepinv.optim.RED.grad", false]], "grad() (deepinv.optim.scoreprior method)": [[144, "deepinv.optim.ScorePrior.grad", false]], "grad() (deepinv.optim.stackedphysicsdatafidelity method)": [[145, "deepinv.optim.StackedPhysicsDataFidelity.grad", false]], "grad() (deepinv.optim.tikhonov method)": [[147, "deepinv.optim.Tikhonov.grad", false]], "grad_conj() (deepinv.optim.bregmanl2 method)": [[116, "deepinv.optim.BregmanL2.grad_conj", false]], "grad_conj() (deepinv.optim.burgentropy method)": [[118, "deepinv.optim.BurgEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.negentropy method)": [[134, "deepinv.optim.NegEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.potential method)": [[141, "deepinv.optim.Potential.grad_conj", false]], "grad_d() (deepinv.optim.datafidelity method)": [[120, "deepinv.optim.DataFidelity.grad_d", false]], "grad_d() (deepinv.optim.stackedphysicsdatafidelity method)": [[145, "deepinv.optim.StackedPhysicsDataFidelity.grad_d", false]], "gradient_descent() (in module deepinv.optim.utils)": [[166, "deepinv.optim.utils.gradient_descent", false]], "gsdrunet (class in deepinv.models)": [[92, "deepinv.models.GSDRUNet", false]], "gstep (class in deepinv.optim.optim_iterators)": [[160, "deepinv.optim.optim_iterators.gStep", false]], "hard_threshold_topk() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.hard_threshold_topk", false]], "haze (class in deepinv.physics)": [[181, "deepinv.physics.Haze", false]], "hdf5dataset (class in deepinv.datasets)": [[19, "deepinv.datasets.HDF5Dataset", false]], "histogram() (in module deepinv.physics.functional)": [[225, "deepinv.physics.functional.histogram", false]], "histogramdd() (in module deepinv.physics.functional)": [[226, "deepinv.physics.functional.histogramdd", false]], "homography (class in deepinv.transform)": [[262, "deepinv.transform.Homography", false]], "hqsiteration (class in deepinv.optim.optim_iterators)": [[155, "deepinv.optim.optim_iterators.HQSIteration", false]], "hyperspectralunmixing (class in deepinv.physics)": [[182, "deepinv.physics.HyperSpectralUnmixing", false]], "icnn (class in deepinv.models)": [[93, "deepinv.models.ICNN", false]], "identity() (deepinv.transform.transform method)": [[268, "deepinv.transform.Transform.identity", false]], "ifft() (deepinv.physics.mrimixin static method)": [[187, "deepinv.physics.MRIMixin.ifft", false]], "im_to_kspace() (deepinv.physics.mrimixin method)": [[187, "deepinv.physics.MRIMixin.im_to_kspace", false]], "img_type (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier.img_type", false]], "indicatorl2 (class in deepinv.optim)": [[124, "deepinv.optim.IndicatorL2", false]], "indicatorl2distance (class in deepinv.optim)": [[125, "deepinv.optim.IndicatorL2Distance", false]], "init_anderson_acceleration() (deepinv.optim.fixedpoint method)": [[123, "deepinv.optim.FixedPoint.init_anderson_acceleration", false]], "init_iterate_fn() (deepinv.optim.baseoptim method)": [[114, "deepinv.optim.BaseOptim.init_iterate_fn", false]], "init_metrics_fn() (deepinv.optim.baseoptim method)": [[114, "deepinv.optim.BaseOptim.init_metrics_fn", false]], "inpainting (class in deepinv.physics)": [[183, "deepinv.physics.Inpainting", false]], "interleavedepochlossscheduler (class in deepinv.loss)": [[36, "deepinv.loss.InterleavedEpochLossScheduler", false]], "interleavedlossscheduler (class in deepinv.loss)": [[37, "deepinv.loss.InterleavedLossScheduler", false]], "inverse() (deepinv.transform.transform method)": [[268, "deepinv.transform.Transform.inverse", false]], "invert_metric() (deepinv.loss.metric.metric method)": [[70, "deepinv.loss.metric.Metric.invert_metric", false]], "invert_metric() (deepinv.loss.metric.qnr method)": [[74, "deepinv.loss.metric.QNR.invert_metric", false]], "invert_metric() (deepinv.loss.metric.ssim method)": [[75, "deepinv.loss.metric.SSIM.invert_metric", false]], "invert_params() (deepinv.transform.transform method)": [[268, "deepinv.transform.Transform.invert_params", false]], "iradon (class in deepinv.physics.functional)": [[216, "deepinv.physics.functional.IRadon", false]], "is_standard_deblurring_network() (deepinv.models.restormer method)": [[100, "deepinv.models.Restormer.is_standard_deblurring_network", false]], "is_standard_denoising_network() (deepinv.models.restormer method)": [[100, "deepinv.models.Restormer.is_standard_denoising_network", false]], "is_standard_deraining_network() (deepinv.models.restormer method)": [[100, "deepinv.models.Restormer.is_standard_deraining_network", false]], "iwt() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.iwt", false]], "jacobianspectralnorm (class in deepinv.loss)": [[38, "deepinv.loss.JacobianSpectralNorm", false]], "kohler (class in deepinv.datasets)": [[20, "deepinv.datasets.Kohler", false]], "kspace_to_im() (deepinv.physics.mrimixin method)": [[187, "deepinv.physics.MRIMixin.kspace_to_im", false]], "l1 (class in deepinv.optim)": [[126, "deepinv.optim.L1", false]], "l12prior (class in deepinv.optim)": [[127, "deepinv.optim.L12Prior", false]], "l1distance (class in deepinv.optim)": [[128, "deepinv.optim.L1Distance", false]], "l1l2 (class in deepinv.loss.metric)": [[65, "deepinv.loss.metric.L1L2", false]], "l1prior (class in deepinv.optim)": [[129, "deepinv.optim.L1Prior", false]], "l2 (class in deepinv.optim)": [[130, "deepinv.optim.L2", false]], "l2distance (class in deepinv.optim)": [[131, "deepinv.optim.L2Distance", false]], "least_squares() (in module deepinv.optim.utils)": [[167, "deepinv.optim.utils.least_squares", false]], "lidcidrislicedataset (class in deepinv.datasets)": [[21, "deepinv.datasets.LidcIdriSliceDataset", false]], "lidcidrislicedataset.slicesampleidentifier (class in deepinv.datasets)": [[21, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier", false]], "linearphysics (class in deepinv.physics)": [[184, "deepinv.physics.LinearPhysics", false]], "load_dataset() (in module deepinv.utils)": [[287, "deepinv.utils.load_dataset", false]], "load_degradation() (in module deepinv.utils)": [[288, "deepinv.utils.load_degradation", false]], "load_image() (in module deepinv.utils)": [[289, "deepinv.utils.load_image", false]], "load_model() (deepinv.trainer method)": [[12, "deepinv.Trainer.load_model", false]], "load_state_dict() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.load_state_dict", false]], "load_state_dict() (deepinv.training.adversarialoptimizer method)": [[259, "deepinv.training.AdversarialOptimizer.load_state_dict", false]], "load_url_image() (in module deepinv.utils)": [[290, "deepinv.utils.load_url_image", false]], "log_metrics_wandb() (deepinv.trainer method)": [[12, "deepinv.Trainer.log_metrics_wandb", false]], "logpoissonlikelihood (class in deepinv.optim)": [[132, "deepinv.optim.LogPoissonLikelihood", false]], "logpoissonlikelihooddistance (class in deepinv.optim)": [[133, "deepinv.optim.LogPoissonLikelihoodDistance", false]], "logpoissonnoise (class in deepinv.physics)": [[185, "deepinv.physics.LogPoissonNoise", false]], "loss (class in deepinv.loss)": [[39, "deepinv.loss.Loss", false]], "lpips (class in deepinv.loss.metric)": [[66, "deepinv.loss.metric.LPIPS", false]], "lpnorm (class in deepinv.loss.metric)": [[67, "deepinv.loss.metric.LpNorm", false]], "lsdirhr (class in deepinv.datasets)": [[22, "deepinv.datasets.LsdirHR", false]], "lsqr() (in module deepinv.optim.utils)": [[168, "deepinv.optim.utils.lsqr", false]], "mae (class in deepinv.loss.metric)": [[68, "deepinv.loss.metric.MAE", false]], "matern_kernel() (deepinv.physics.generator.motionblurgenerator method)": [[240, "deepinv.physics.generator.MotionBlurGenerator.matern_kernel", false]], "mcloss (class in deepinv.loss)": [[40, "deepinv.loss.MCLoss", false]], "md_step() (deepinv.optim.bregman method)": [[115, "deepinv.optim.Bregman.MD_step", false]], "mditeration (class in deepinv.optim.optim_iterators)": [[156, "deepinv.optim.optim_iterators.MDIteration", false]], "mean_has_converged() (deepinv.sampling.montecarlo method)": [[254, "deepinv.sampling.MonteCarlo.mean_has_converged", false]], "medianfilter (class in deepinv.models)": [[94, "deepinv.models.MedianFilter", false]], "metadata (deepinv.datasets.fastmrislicedataset.slicesampleid attribute)": [[17, "deepinv.datasets.FastMRISliceDataset.SliceSampleID.metadata", false]], "metadata_cache_manager() (deepinv.datasets.fastmrislicedataset method)": [[17, "deepinv.datasets.FastMRISliceDataset.metadata_cache_manager", false]], "metric (class in deepinv.loss.metric)": [[70, "deepinv.loss.metric.Metric", false]], "metric() (deepinv.loss.metric.l1l2 method)": [[65, "deepinv.loss.metric.L1L2.metric", false]], "metric() (deepinv.loss.metric.lpips method)": [[66, "deepinv.loss.metric.LPIPS.metric", false]], "metric() (deepinv.loss.metric.lpnorm method)": [[67, "deepinv.loss.metric.LpNorm.metric", false]], "metric() (deepinv.loss.metric.mae method)": [[68, "deepinv.loss.metric.MAE.metric", false]], "metric() (deepinv.loss.metric.metric method)": [[70, "deepinv.loss.metric.Metric.metric", false]], "metric() (deepinv.loss.metric.mse method)": [[69, "deepinv.loss.metric.MSE.metric", false]], "metric() (deepinv.loss.metric.niqe method)": [[71, "deepinv.loss.metric.NIQE.metric", false]], "metric() (deepinv.loss.metric.nmse method)": [[72, "deepinv.loss.metric.NMSE.metric", false]], "metric() (deepinv.loss.metric.psnr method)": [[73, "deepinv.loss.metric.PSNR.metric", false]], "metric() (deepinv.loss.metric.qnr method)": [[74, "deepinv.loss.metric.QNR.metric", false]], "metric() (deepinv.loss.metric.spectralanglemapper method)": [[76, "deepinv.loss.metric.SpectralAngleMapper.metric", false]], "metric() (deepinv.loss.metric.ssim method)": [[75, "deepinv.loss.metric.SSIM.metric", false]], "model_inference() (deepinv.trainer method)": [[12, "deepinv.Trainer.model_inference", false]], "moeiloss (class in deepinv.loss)": [[41, "deepinv.loss.MOEILoss", false]], "moiloss (class in deepinv.loss)": [[42, "deepinv.loss.MOILoss", false]], "montecarlo (class in deepinv.sampling)": [[254, "deepinv.sampling.MonteCarlo", false]], "motionblurgenerator (class in deepinv.physics.generator)": [[240, "deepinv.physics.generator.MotionBlurGenerator", false]], "mri (class in deepinv.physics)": [[186, "deepinv.physics.MRI", false]], "mrimixin (class in deepinv.physics)": [[187, "deepinv.physics.MRIMixin", false]], "mse (class in deepinv.loss.metric)": [[69, "deepinv.loss.metric.MSE", false]], "multicoilmri (class in deepinv.physics)": [[188, "deepinv.physics.MultiCoilMRI", false]], "multiplier() (in module deepinv.physics.functional)": [[227, "deepinv.physics.functional.multiplier", false]], "multiplier_adjoint() (in module deepinv.physics.functional)": [[228, "deepinv.physics.functional.multiplier_adjoint", false]], "nabla() (deepinv.models.tgvdenoiser static method)": [[103, "deepinv.models.TGVDenoiser.nabla", false]], "nabla() (deepinv.models.tvdenoiser static method)": [[104, "deepinv.models.TVDenoiser.nabla", false]], "nabla() (deepinv.optim.tvprior method)": [[146, "deepinv.optim.TVPrior.nabla", false]], "nabla_adjoint() (deepinv.models.tgvdenoiser static method)": [[103, "deepinv.models.TGVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.models.tvdenoiser static method)": [[104, "deepinv.models.TVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.optim.tvprior method)": [[146, "deepinv.optim.TVPrior.nabla_adjoint", false]], "nbudataset (class in deepinv.datasets)": [[23, "deepinv.datasets.NBUDataset", false]], "negative_log_likelihood() (deepinv.optim.epll method)": [[122, "deepinv.optim.EPLL.negative_log_likelihood", false]], "negentropy (class in deepinv.optim)": [[134, "deepinv.optim.NegEntropy", false]], "neighbor2neighbor (class in deepinv.loss)": [[43, "deepinv.loss.Neighbor2Neighbor", false]], "next_physics() (deepinv.loss.moiloss method)": [[42, "deepinv.loss.MOILoss.next_physics", false]], "niqe (class in deepinv.loss.metric)": [[71, "deepinv.loss.metric.NIQE", false]], "nmse (class in deepinv.loss.metric)": [[72, "deepinv.loss.metric.NMSE", false]], "no_learning_inference() (deepinv.trainer method)": [[12, "deepinv.Trainer.no_learning_inference", false]], "noise() (deepinv.physics.dynamicmri method)": [[178, "deepinv.physics.DynamicMRI.noise", false]], "noise() (deepinv.physics.inpainting method)": [[183, "deepinv.physics.Inpainting.noise", false]], "noise() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.noise", false]], "noise() (deepinv.physics.stackedphysics method)": [[204, "deepinv.physics.StackedPhysics.noise", false]], "noise_dirname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[16, "deepinv.datasets.FMD.NoisySampleIdentifier.noise_dirname", false]], "noisemodel (class in deepinv.physics)": [[189, "deepinv.physics.NoiseModel", false]], "ones_like() (in module deepinv.utils)": [[291, "deepinv.utils.ones_like", false]], "optim_builder() (in module deepinv.optim)": [[149, "deepinv.optim.optim_builder", false]], "optimiterator (class in deepinv.optim)": [[135, "deepinv.optim.OptimIterator", false]], "optimize_z() (deepinv.models.csgmgenerator method)": [[80, "deepinv.models.CSGMGenerator.optimize_z", false]], "pad() (deepinv.physics.compressivespectralimaging method)": [[172, "deepinv.physics.CompressiveSpectralImaging.pad", false]], "pad_input() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.pad_input", false]], "pannet (class in deepinv.models)": [[97, "deepinv.models.PanNet", false]], "pansharpen (class in deepinv.physics)": [[190, "deepinv.physics.Pansharpen", false]], "pantiltrotate (class in deepinv.transform.projective)": [[271, "deepinv.transform.projective.PanTiltRotate", false]], "patchdataset (class in deepinv.datasets)": [[24, "deepinv.datasets.PatchDataset", false]], "patchgandiscriminator (class in deepinv.models)": [[98, "deepinv.models.PatchGANDiscriminator", false]], "patchnr (class in deepinv.optim)": [[136, "deepinv.optim.PatchNR", false]], "patchprior (class in deepinv.optim)": [[137, "deepinv.optim.PatchPrior", false]], "patient_id (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[21, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.patient_id", false]], "pdnet_dualblock (class in deepinv.models)": [[95, "deepinv.models.PDNet_DualBlock", false]], "pdnet_primalblock (class in deepinv.models)": [[96, "deepinv.models.PDNet_PrimalBlock", false]], "pgditeration (class in deepinv.optim.optim_iterators)": [[157, "deepinv.optim.optim_iterators.PGDIteration", false]], "phase2phaseloss (class in deepinv.loss)": [[44, "deepinv.loss.Phase2PhaseLoss", false]], "phase2phasesplittingmaskgenerator (class in deepinv.physics.generator)": [[242, "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", false]], "phaseretrieval (class in deepinv.physics)": [[191, "deepinv.physics.PhaseRetrieval", false]], "physics (class in deepinv.physics)": [[192, "deepinv.physics.Physics", false]], "physicsgenerator (class in deepinv.physics.generator)": [[243, "deepinv.physics.generator.PhysicsGenerator", false]], "placeholderdataset (class in deepinv.datasets.utils)": [[29, "deepinv.datasets.utils.PlaceholderDataset", false]], "plot() (deepinv.trainer method)": [[12, "deepinv.Trainer.plot", false]], "plot() (in module deepinv.utils)": [[292, "deepinv.utils.plot", false]], "plot_curves() (in module deepinv.utils)": [[293, "deepinv.utils.plot_curves", false]], "plot_inset() (in module deepinv.utils)": [[294, "deepinv.utils.plot_inset", false]], "plot_ortho3d() (in module deepinv.utils)": [[295, "deepinv.utils.plot_ortho3D", false]], "plot_parameters() (in module deepinv.utils)": [[296, "deepinv.utils.plot_parameters", false]], "plot_videos() (in module deepinv.utils)": [[297, "deepinv.utils.plot_videos", false]], "pnp (class in deepinv.optim)": [[138, "deepinv.optim.PnP", false]], "poissongaussiannoise (class in deepinv.physics)": [[193, "deepinv.physics.PoissonGaussianNoise", false]], "poissonlikelihood (class in deepinv.optim)": [[139, "deepinv.optim.PoissonLikelihood", false]], "poissonlikelihooddistance (class in deepinv.optim)": [[140, "deepinv.optim.PoissonLikelihoodDistance", false]], "poissonnoise (class in deepinv.physics)": [[194, "deepinv.physics.PoissonNoise", false]], "potential (class in deepinv.optim)": [[141, "deepinv.optim.Potential", false]], "prior (class in deepinv.optim)": [[142, "deepinv.optim.Prior", false]], "product_convolution2d() (in module deepinv.physics.functional)": [[229, "deepinv.physics.functional.product_convolution2d", false]], "productconvolutionblurgenerator (class in deepinv.physics.generator)": [[244, "deepinv.physics.generator.ProductConvolutionBlurGenerator", false]], "progressmeter (class in deepinv.utils)": [[278, "deepinv.utils.ProgressMeter", false]], "prox() (deepinv.optim.indicatorl2 method)": [[124, "deepinv.optim.IndicatorL2.prox", false]], "prox() (deepinv.optim.indicatorl2distance method)": [[125, "deepinv.optim.IndicatorL2Distance.prox", false]], "prox() (deepinv.optim.l1 method)": [[126, "deepinv.optim.L1.prox", false]], "prox() (deepinv.optim.l12prior method)": [[127, "deepinv.optim.L12Prior.prox", false]], "prox() (deepinv.optim.l1distance method)": [[128, "deepinv.optim.L1Distance.prox", false]], "prox() (deepinv.optim.l1prior method)": [[129, "deepinv.optim.L1Prior.prox", false]], "prox() (deepinv.optim.l2 method)": [[130, "deepinv.optim.L2.prox", false]], "prox() (deepinv.optim.l2distance method)": [[131, "deepinv.optim.L2Distance.prox", false]], "prox() (deepinv.optim.pnp method)": [[138, "deepinv.optim.PnP.prox", false]], "prox() (deepinv.optim.poissonlikelihooddistance method)": [[140, "deepinv.optim.PoissonLikelihoodDistance.prox", false]], "prox() (deepinv.optim.potential method)": [[141, "deepinv.optim.Potential.prox", false]], "prox() (deepinv.optim.tikhonov method)": [[147, "deepinv.optim.Tikhonov.prox", false]], "prox() (deepinv.optim.tvprior method)": [[146, "deepinv.optim.TVPrior.prox", false]], "prox() (deepinv.optim.waveletprior method)": [[148, "deepinv.optim.WaveletPrior.prox", false]], "prox_conjugate() (deepinv.optim.potential method)": [[141, "deepinv.optim.Potential.prox_conjugate", false]], "prox_d() (deepinv.optim.datafidelity method)": [[120, "deepinv.optim.DataFidelity.prox_d", false]], "prox_d() (deepinv.optim.stackedphysicsdatafidelity method)": [[145, "deepinv.optim.StackedPhysicsDataFidelity.prox_d", false]], "prox_d_conjugate() (deepinv.optim.datafidelity method)": [[120, "deepinv.optim.DataFidelity.prox_d_conjugate", false]], "prox_d_conjugate() (deepinv.optim.stackedphysicsdatafidelity method)": [[145, "deepinv.optim.StackedPhysicsDataFidelity.prox_d_conjugate", false]], "prox_l0() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.prox_l0", false]], "prox_l1() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.prox_l1", false]], "prox_l2() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.prox_l2", false]], "prox_l2() (deepinv.physics.downsampling method)": [[177, "deepinv.physics.Downsampling.prox_l2", false]], "prox_l2() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.prox_l2", false]], "prox_tau_fx() (deepinv.models.tvdenoiser method)": [[104, "deepinv.models.TVDenoiser.prox_tau_fx", false]], "psfgenerator (class in deepinv.physics.generator)": [[241, "deepinv.physics.generator.PSFGenerator", false]], "psi() (deepinv.models.waveletdenoiser static method)": [[109, "deepinv.models.WaveletDenoiser.psi", false]], "psi() (deepinv.models.waveletdictdenoiser method)": [[110, "deepinv.models.WaveletDictDenoiser.psi", false]], "psi() (deepinv.optim.waveletprior method)": [[148, "deepinv.optim.WaveletPrior.psi", false]], "psnr (class in deepinv.loss.metric)": [[73, "deepinv.loss.metric.PSNR", false]], "ptychography (class in deepinv.physics)": [[195, "deepinv.physics.Ptychography", false]], "ptychographylinearoperator (class in deepinv.physics)": [[196, "deepinv.physics.PtychographyLinearOperator", false]], "qnr (class in deepinv.loss.metric)": [[74, "deepinv.loss.metric.QNR", false]], "r2rloss (class in deepinv.loss)": [[45, "deepinv.loss.R2RLoss", false]], "radiointerferometry (class in deepinv.physics)": [[197, "deepinv.physics.RadioInterferometry", false]], "radon (class in deepinv.physics.functional)": [[217, "deepinv.physics.functional.Radon", false]], "rand_like() (deepinv.physics.noisemodel method)": [[189, "deepinv.physics.NoiseModel.rand_like", false]], "rand_like() (in module deepinv.utils)": [[298, "deepinv.utils.rand_like", false]], "randn_like() (deepinv.physics.noisemodel method)": [[189, "deepinv.physics.NoiseModel.randn_like", false]], "randn_like() (in module deepinv.utils)": [[299, "deepinv.utils.randn_like", false]], "random_latent() (deepinv.models.csgmgenerator method)": [[80, "deepinv.models.CSGMGenerator.random_latent", false]], "randomlossscheduler (class in deepinv.loss)": [[46, "deepinv.loss.RandomLossScheduler", false]], "randommaskgenerator (class in deepinv.physics.generator)": [[245, "deepinv.physics.generator.RandomMaskGenerator", false]], "randomphaseretrieval (class in deepinv.physics)": [[198, "deepinv.physics.RandomPhaseRetrieval", false]], "reconstructor (class in deepinv.models)": [[99, "deepinv.models.Reconstructor", false]], "red (class in deepinv.optim)": [[143, "deepinv.optim.RED", false]], "reflect (class in deepinv.transform)": [[263, "deepinv.transform.Reflect", false]], "relaxation_step() (deepinv.optim.optimiterator method)": [[135, "deepinv.optim.OptimIterator.relaxation_step", false]], "repeat() (deepinv.physics.timemixin static method)": [[207, "deepinv.physics.TimeMixin.repeat", false]], "rescale (class in deepinv.datasets.utils)": [[30, "deepinv.datasets.utils.Rescale", false]], "reset() (deepinv.sampling.montecarlo method)": [[254, "deepinv.sampling.MonteCarlo.reset", false]], "reset() (deepinv.utils.averagemeter method)": [[277, "deepinv.utils.AverageMeter.reset", false]], "reset_metrics() (deepinv.trainer method)": [[12, "deepinv.Trainer.reset_metrics", false]], "reset_rng() (deepinv.physics.generator.physicsgenerator method)": [[243, "deepinv.physics.generator.PhysicsGenerator.reset_rng", false]], "reset_rng() (deepinv.physics.noisemodel method)": [[189, "deepinv.physics.NoiseModel.reset_rng", false]], "reshape_ths() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.reshape_ths", false]], "restormer (class in deepinv.models)": [[100, "deepinv.models.Restormer", false]], "rng_manual_seed() (deepinv.physics.generator.physicsgenerator method)": [[243, "deepinv.physics.generator.PhysicsGenerator.rng_manual_seed", false]], "rng_manual_seed() (deepinv.physics.noisemodel method)": [[189, "deepinv.physics.NoiseModel.rng_manual_seed", false]], "roll_reflect_1d() (deepinv.transform.shifttime method)": [[267, "deepinv.transform.ShiftTime.roll_reflect_1d", false]], "rotate (class in deepinv.transform)": [[264, "deepinv.transform.Rotate", false]], "rss() (deepinv.physics.mrimixin static method)": [[187, "deepinv.physics.MRIMixin.rss", false]], "sample_mask() (deepinv.physics.generator.basemaskgenerator method)": [[231, "deepinv.physics.generator.BaseMaskGenerator.sample_mask", false]], "sample_mask() (deepinv.physics.generator.equispacedmaskgenerator method)": [[236, "deepinv.physics.generator.EquispacedMaskGenerator.sample_mask", false]], "sample_mask() (deepinv.physics.generator.randommaskgenerator method)": [[245, "deepinv.physics.generator.RandomMaskGenerator.sample_mask", false]], "save_model() (deepinv.trainer method)": [[12, "deepinv.Trainer.save_model", false]], "save_model() (deepinv.training.adversarialtrainer method)": [[260, "deepinv.training.AdversarialTrainer.save_model", false]], "save_simple_dataset() (deepinv.datasets.fastmrislicedataset method)": [[17, "deepinv.datasets.FastMRISliceDataset.save_simple_dataset", false]], "scale (class in deepinv.transform)": [[265, "deepinv.transform.Scale", false]], "scan_folder (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[21, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.scan_folder", false]], "schedule() (deepinv.loss.baselossscheduler method)": [[33, "deepinv.loss.BaseLossScheduler.schedule", false]], "schedule() (deepinv.loss.interleavedepochlossscheduler method)": [[36, "deepinv.loss.InterleavedEpochLossScheduler.schedule", false]], "schedule() (deepinv.loss.interleavedlossscheduler method)": [[37, "deepinv.loss.InterleavedLossScheduler.schedule", false]], "schedule() (deepinv.loss.randomlossscheduler method)": [[46, "deepinv.loss.RandomLossScheduler.schedule", false]], "schedule() (deepinv.loss.steplossscheduler method)": [[50, "deepinv.loss.StepLossScheduler.schedule", false]], "scoreloss (class in deepinv.loss)": [[47, "deepinv.loss.ScoreLoss", false]], "scoreloss.scoremodel (class in deepinv.loss)": [[47, "deepinv.loss.ScoreLoss.ScoreModel", false]], "scoreprior (class in deepinv.optim)": [[144, "deepinv.optim.ScorePrior", false]], "scunet (class in deepinv.models)": [[101, "deepinv.models.SCUNet", false]], "sensor() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.sensor", false]], "sensor() (deepinv.physics.stackedphysics method)": [[204, "deepinv.physics.StackedPhysics.sensor", false]], "sequentialmri (class in deepinv.physics)": [[199, "deepinv.physics.SequentialMRI", false]], "set14hr (class in deepinv.datasets)": [[25, "deepinv.datasets.Set14HR", false]], "set_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.set_cov", false]], "set_cov_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.set_cov_reg", false]], "set_ls_solver() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.set_ls_solver", false]], "set_noise_model() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.set_noise_model", false]], "set_noise_model() (deepinv.physics.stackedphysics method)": [[204, "deepinv.physics.StackedPhysics.set_noise_model", false]], "set_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[163, "deepinv.optim.utils.GaussianMixtureModel.set_weights", false]], "setup_train() (deepinv.trainer method)": [[12, "deepinv.Trainer.setup_train", false]], "setup_train() (deepinv.training.adversarialtrainer method)": [[260, "deepinv.training.AdversarialTrainer.setup_train", false]], "shear() (deepinv.physics.compressivespectralimaging method)": [[172, "deepinv.physics.CompressiveSpectralImaging.shear", false]], "shift (class in deepinv.transform)": [[266, "deepinv.transform.Shift", false]], "shift() (deepinv.physics.ptychographylinearoperator method)": [[196, "deepinv.physics.PtychographyLinearOperator.shift", false]], "shifttime (class in deepinv.transform)": [[267, "deepinv.transform.ShiftTime", false]], "sigmagenerator (class in deepinv.physics.generator)": [[246, "deepinv.physics.generator.SigmaGenerator", false]], "similarity (class in deepinv.transform.projective)": [[272, "deepinv.transform.projective.Similarity", false]], "simplefastmrislicedataset (class in deepinv.datasets)": [[26, "deepinv.datasets.SimpleFastMRISliceDataset", false]], "simulate_birdcage_csm() (deepinv.physics.multicoilmri method)": [[188, "deepinv.physics.MultiCoilMRI.simulate_birdcage_csm", false]], "sinc_filter() (in module deepinv.physics.blur)": [[215, "deepinv.physics.blur.sinc_filter", false]], "singlephotonlidar (class in deepinv.physics)": [[200, "deepinv.physics.SinglePhotonLidar", false]], "singlepixelcamera (class in deepinv.physics)": [[201, "deepinv.physics.SinglePixelCamera", false]], "skrock (class in deepinv.sampling)": [[255, "deepinv.sampling.SKRock", false]], "slice_fname (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[21, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.slice_fname", false]], "slice_ind (deepinv.datasets.fastmrislicedataset.slicesampleid attribute)": [[17, "deepinv.datasets.FastMRISliceDataset.SliceSampleID.slice_ind", false]], "smiteration (class in deepinv.optim.optim_iterators)": [[158, "deepinv.optim.optim_iterators.SMIteration", false]], "spacevaryingblur (class in deepinv.physics)": [[202, "deepinv.physics.SpaceVaryingBlur", false]], "spectral_methods() (in module deepinv.optim.phase_retrieval)": [[162, "deepinv.optim.phase_retrieval.spectral_methods", false]], "spectralanglemapper (class in deepinv.loss.metric)": [[76, "deepinv.loss.metric.SpectralAngleMapper", false]], "split() (deepinv.loss.phase2phaseloss static method)": [[44, "deepinv.loss.Phase2PhaseLoss.split", false]], "split() (deepinv.loss.splittingloss static method)": [[48, "deepinv.loss.SplittingLoss.split", false]], "splittingloss (class in deepinv.loss)": [[48, "deepinv.loss.SplittingLoss", false]], "splittingloss.splittingmodel (class in deepinv.loss)": [[48, "deepinv.loss.SplittingLoss.SplittingModel", false]], "ssim (class in deepinv.loss.metric)": [[75, "deepinv.loss.metric.SSIM", false]], "stack() (deepinv.physics.linearphysics method)": [[184, "deepinv.physics.LinearPhysics.stack", false]], "stack() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.stack", false]], "stack() (in module deepinv.physics)": [[249, "deepinv.physics.stack", false]], "stackedlinearphysics (class in deepinv.physics)": [[203, "deepinv.physics.StackedLinearPhysics", false]], "stackedphysics (class in deepinv.physics)": [[204, "deepinv.physics.StackedPhysics", false]], "stackedphysicsdatafidelity (class in deepinv.optim)": [[145, "deepinv.optim.StackedPhysicsDataFidelity", false]], "stackedphysicsloss (class in deepinv.loss)": [[49, "deepinv.loss.StackedPhysicsLoss", false]], "state_dict() (deepinv.training.adversarialoptimizer method)": [[259, "deepinv.training.AdversarialOptimizer.state_dict", false]], "step() (deepinv.physics.generator.basemaskgenerator method)": [[231, "deepinv.physics.generator.BaseMaskGenerator.step", false]], "step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[232, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.step", false]], "step() (deepinv.physics.generator.confocalblurgenerator3d method)": [[233, "deepinv.physics.generator.ConfocalBlurGenerator3D.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator method)": [[234, "deepinv.physics.generator.DiffractionBlurGenerator.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator3d method)": [[235, "deepinv.physics.generator.DiffractionBlurGenerator3D.step", false]], "step() (deepinv.physics.generator.generatormixture method)": [[239, "deepinv.physics.generator.GeneratorMixture.step", false]], "step() (deepinv.physics.generator.motionblurgenerator method)": [[240, "deepinv.physics.generator.MotionBlurGenerator.step", false]], "step() (deepinv.physics.generator.physicsgenerator method)": [[243, "deepinv.physics.generator.PhysicsGenerator.step", false]], "step() (deepinv.physics.generator.productconvolutionblurgenerator method)": [[244, "deepinv.physics.generator.ProductConvolutionBlurGenerator.step", false]], "step() (deepinv.physics.generator.sigmagenerator method)": [[246, "deepinv.physics.generator.SigmaGenerator.step", false]], "step() (deepinv.trainer method)": [[12, "deepinv.Trainer.step", false]], "steplossscheduler (class in deepinv.loss)": [[50, "deepinv.loss.StepLossScheduler", false]], "structuredrandom (class in deepinv.physics)": [[205, "deepinv.physics.StructuredRandom", false]], "structuredrandomphaseretrieval (class in deepinv.physics)": [[206, "deepinv.physics.StructuredRandomPhaseRetrieval", false]], "supadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[59, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", false]], "supadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[60, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss", false]], "suploss (class in deepinv.loss)": [[51, "deepinv.loss.SupLoss", false]], "suregaussianloss (class in deepinv.loss)": [[52, "deepinv.loss.SureGaussianLoss", false]], "surepgloss (class in deepinv.loss)": [[53, "deepinv.loss.SurePGLoss", false]], "surepoissonloss (class in deepinv.loss)": [[54, "deepinv.loss.SurePoissonLoss", false]], "swinir (class in deepinv.models)": [[102, "deepinv.models.SwinIR", false]], "symmetrize() (deepinv.transform.transform method)": [[268, "deepinv.transform.Transform.symmetrize", false]], "tensorlist (class in deepinv.utils)": [[279, "deepinv.utils.TensorList", false]], "test() (deepinv.trainer method)": [[12, "deepinv.Trainer.test", false]], "test() (in module deepinv)": [[257, "deepinv.test", false]], "tgvdenoiser (class in deepinv.models)": [[103, "deepinv.models.TGVDenoiser", false]], "threshold_3d() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.threshold_3D", false]], "threshold_nd() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.threshold_ND", false]], "thresold_2d() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.thresold_2D", false]], "thresold_func() (deepinv.models.waveletdenoiser method)": [[109, "deepinv.models.WaveletDenoiser.thresold_func", false]], "tikhonov (class in deepinv.optim)": [[147, "deepinv.optim.Tikhonov", false]], "timeagnosticnet (class in deepinv.models)": [[105, "deepinv.models.TimeAgnosticNet", false]], "timeaveragingnet (class in deepinv.models)": [[106, "deepinv.models.TimeAveragingNet", false]], "timemixin (class in deepinv.physics)": [[207, "deepinv.physics.TimeMixin", false]], "to_complex_denoiser() (in module deepinv.models.complex)": [[111, "deepinv.models.complex.to_complex_denoiser", false]], "to_static() (deepinv.physics.dynamicmri method)": [[178, "deepinv.physics.DynamicMRI.to_static", false]], "to_torch_complex() (deepinv.physics.mrimixin static method)": [[187, "deepinv.physics.MRIMixin.to_torch_complex", false]], "tocomplex (class in deepinv.datasets.utils)": [[31, "deepinv.datasets.utils.ToComplex", false]], "tomography (class in deepinv.physics)": [[208, "deepinv.physics.Tomography", false]], "torch_shuffle() (deepinv.datasets.fastmrislicedataset static method)": [[17, "deepinv.datasets.FastMRISliceDataset.torch_shuffle", false]], "train() (deepinv.trainer method)": [[12, "deepinv.Trainer.train", false]], "train() (in module deepinv)": [[258, "deepinv.train", false]], "trainer (class in deepinv)": [[12, "deepinv.Trainer", false]], "transform (class in deepinv.transform)": [[268, "deepinv.transform.Transform", false]], "transform() (deepinv.transform.transform method)": [[268, "deepinv.transform.Transform.transform", false]], "tvdenoiser (class in deepinv.models)": [[104, "deepinv.models.TVDenoiser", false]], "tvloss (class in deepinv.loss)": [[55, "deepinv.loss.TVLoss", false]], "tvprior (class in deepinv.optim)": [[146, "deepinv.optim.TVPrior", false]], "u() (deepinv.physics.blurfft method)": [[170, "deepinv.physics.BlurFFT.U", false]], "u() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.U", false]], "u() (deepinv.physics.singlepixelcamera method)": [[201, "deepinv.physics.SinglePixelCamera.U", false]], "u_adjoint() (deepinv.physics.blurfft method)": [[170, "deepinv.physics.BlurFFT.U_adjoint", false]], "u_adjoint() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.U_adjoint", false]], "u_adjoint() (deepinv.physics.singlepixelcamera method)": [[201, "deepinv.physics.SinglePixelCamera.U_adjoint", false]], "uairgeneratorloss (class in deepinv.loss.adversarial)": [[61, "deepinv.loss.adversarial.UAIRGeneratorLoss", false]], "ula (class in deepinv.sampling)": [[256, "deepinv.sampling.ULA", false]], "unet (class in deepinv.models)": [[107, "deepinv.models.UNet", false]], "unflatten() (deepinv.physics.compressivespectralimaging method)": [[172, "deepinv.physics.CompressiveSpectralImaging.unflatten", false]], "unflatten() (deepinv.physics.timemixin static method)": [[207, "deepinv.physics.TimeMixin.unflatten", false]], "unfolded_builder() (in module deepinv.unfolded)": [[276, "deepinv.unfolded.unfolded_builder", false]], "uniformgaussiannoise (class in deepinv.physics)": [[209, "deepinv.physics.UniformGaussianNoise", false]], "uniformnoise (class in deepinv.physics)": [[210, "deepinv.physics.UniformNoise", false]], "unsupadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[62, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", false]], "unsupadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[63, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", false]], "update() (deepinv.physics.physics method)": [[192, "deepinv.physics.Physics.update", false]], "update() (deepinv.utils.averagemeter method)": [[277, "deepinv.utils.AverageMeter.update", false]], "update_data_fidelity_fn() (deepinv.optim.baseoptim method)": [[114, "deepinv.optim.BaseOptim.update_data_fidelity_fn", false]], "update_metrics_fn() (deepinv.optim.baseoptim method)": [[114, "deepinv.optim.BaseOptim.update_metrics_fn", false]], "update_parameters() (deepinv.physics.blur method)": [[169, "deepinv.physics.Blur.update_parameters", false]], "update_parameters() (deepinv.physics.blurfft method)": [[170, "deepinv.physics.BlurFFT.update_parameters", false]], "update_parameters() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.update_parameters", false]], "update_parameters() (deepinv.physics.gammanoise method)": [[179, "deepinv.physics.GammaNoise.update_parameters", false]], "update_parameters() (deepinv.physics.gaussiannoise method)": [[180, "deepinv.physics.GaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.hyperspectralunmixing method)": [[182, "deepinv.physics.HyperSpectralUnmixing.update_parameters", false]], "update_parameters() (deepinv.physics.logpoissonnoise method)": [[185, "deepinv.physics.LogPoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.mri method)": [[186, "deepinv.physics.MRI.update_parameters", false]], "update_parameters() (deepinv.physics.multicoilmri method)": [[188, "deepinv.physics.MultiCoilMRI.update_parameters", false]], "update_parameters() (deepinv.physics.poissongaussiannoise method)": [[193, "deepinv.physics.PoissonGaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.poissonnoise method)": [[194, "deepinv.physics.PoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.spacevaryingblur method)": [[202, "deepinv.physics.SpaceVaryingBlur.update_parameters", false]], "update_parameters() (deepinv.physics.stackedlinearphysics method)": [[203, "deepinv.physics.StackedLinearPhysics.update_parameters", false]], "update_parameters() (deepinv.physics.stackedphysics method)": [[204, "deepinv.physics.StackedPhysics.update_parameters", false]], "update_parameters() (deepinv.physics.uniformnoise method)": [[210, "deepinv.physics.UniformNoise.update_parameters", false]], "update_params_fn() (deepinv.optim.baseoptim method)": [[114, "deepinv.optim.BaseOptim.update_params_fn", false]], "update_prior_fn() (deepinv.optim.baseoptim method)": [[114, "deepinv.optim.BaseOptim.update_prior_fn", false]], "urban100hr (class in deepinv.datasets)": [[27, "deepinv.datasets.Urban100HR", false]], "v() (deepinv.physics.blurfft method)": [[170, "deepinv.physics.BlurFFT.V", false]], "v() (deepinv.physics.decolorize method)": [[173, "deepinv.physics.Decolorize.V", false]], "v() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.V", false]], "v() (deepinv.physics.mri method)": [[186, "deepinv.physics.MRI.V", false]], "v() (deepinv.physics.singlepixelcamera method)": [[201, "deepinv.physics.SinglePixelCamera.V", false]], "v_adjoint() (deepinv.physics.blurfft method)": [[170, "deepinv.physics.BlurFFT.V_adjoint", false]], "v_adjoint() (deepinv.physics.decolorize method)": [[173, "deepinv.physics.Decolorize.V_adjoint", false]], "v_adjoint() (deepinv.physics.decomposablephysics method)": [[174, "deepinv.physics.DecomposablePhysics.V_adjoint", false]], "v_adjoint() (deepinv.physics.mri method)": [[186, "deepinv.physics.MRI.V_adjoint", false]], "v_adjoint() (deepinv.physics.singlepixelcamera method)": [[201, "deepinv.physics.SinglePixelCamera.V_adjoint", false]], "var_has_converged() (deepinv.sampling.montecarlo method)": [[254, "deepinv.sampling.MonteCarlo.var_has_converged", false]], "varnet (class in deepinv.models)": [[108, "deepinv.models.VarNet", false]], "verify_split_dataset_integrity() (deepinv.datasets.div2k method)": [[15, "deepinv.datasets.DIV2K.verify_split_dataset_integrity", false]], "verify_split_dataset_integrity() (deepinv.datasets.lsdirhr method)": [[22, "deepinv.datasets.LsdirHR.verify_split_dataset_integrity", false]], "waveletdenoiser (class in deepinv.models)": [[109, "deepinv.models.WaveletDenoiser", false]], "waveletdictdenoiser (class in deepinv.models)": [[110, "deepinv.models.WaveletDictDenoiser", false]], "waveletprior (class in deepinv.optim)": [[148, "deepinv.optim.WaveletPrior", false]], "wrap_flatten_c() (deepinv.physics.timemixin static method)": [[207, "deepinv.physics.TimeMixin.wrap_flatten_C", false]], "zero_grad() (deepinv.training.adversarialoptimizer method)": [[259, "deepinv.training.AdversarialOptimizer.zero_grad", false]], "zeros_like() (in module deepinv.utils)": [[300, "deepinv.utils.zeros_like", false]]}, "objects": {"deepinv": [[12, 0, 1, "", "Trainer"], [257, 3, 1, "", "test"], [258, 3, 1, "", "train"]], "deepinv.Trainer": [[12, 1, 1, "", "check_clip_grad"], [12, 1, 1, "", "compute_loss"], [12, 1, 1, "", "compute_metrics"], [12, 1, 1, "", "get_samples"], [12, 1, 1, "", "get_samples_offline"], [12, 1, 1, "", "get_samples_online"], [12, 1, 1, "", "load_model"], [12, 1, 1, "", "log_metrics_wandb"], [12, 1, 1, "", "model_inference"], [12, 1, 1, "", "no_learning_inference"], [12, 1, 1, "", "plot"], [12, 1, 1, "", "reset_metrics"], [12, 1, 1, "", "save_model"], [12, 1, 1, "", "setup_train"], [12, 1, 1, "", "step"], [12, 1, 1, "", "test"], [12, 1, 1, "", "train"]], "deepinv.datasets": [[13, 0, 1, "", "CBSD68"], [14, 0, 1, "", "CMRxReconSliceDataset"], [15, 0, 1, "", "DIV2K"], [16, 0, 1, "", "FMD"], [17, 0, 1, "", "FastMRISliceDataset"], [18, 0, 1, "", "Flickr2kHR"], [19, 0, 1, "", "HDF5Dataset"], [20, 0, 1, "", "Kohler"], [21, 0, 1, "", "LidcIdriSliceDataset"], [22, 0, 1, "", "LsdirHR"], [23, 0, 1, "", "NBUDataset"], [24, 0, 1, "", "PatchDataset"], [25, 0, 1, "", "Set14HR"], [26, 0, 1, "", "SimpleFastMRISliceDataset"], [27, 0, 1, "", "Urban100HR"], [28, 3, 1, "", "generate_dataset"]], "deepinv.datasets.CBSD68": [[13, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.DIV2K": [[15, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.FMD": [[16, 0, 1, "", "NoisySampleIdentifier"]], "deepinv.datasets.FMD.NoisySampleIdentifier": [[16, 2, 1, "", "fname"], [16, 2, 1, "", "fov"], [16, 2, 1, "", "img_type"], [16, 2, 1, "", "noise_dirname"]], "deepinv.datasets.FastMRISliceDataset": [[17, 0, 1, "", "SliceSampleID"], [17, 1, 1, "", "metadata_cache_manager"], [17, 1, 1, "", "save_simple_dataset"], [17, 1, 1, "", "torch_shuffle"]], "deepinv.datasets.FastMRISliceDataset.SliceSampleID": [[17, 2, 1, "", "fname"], [17, 2, 1, "", "metadata"], [17, 2, 1, "", "slice_ind"]], "deepinv.datasets.Flickr2kHR": [[18, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Kohler": [[20, 1, 1, "", "download"], [20, 1, 1, "", "get_item"]], "deepinv.datasets.LidcIdriSliceDataset": [[21, 0, 1, "", "SliceSampleIdentifier"]], "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier": [[21, 2, 1, "", "patient_id"], [21, 2, 1, "", "scan_folder"], [21, 2, 1, "", "slice_fname"]], "deepinv.datasets.LsdirHR": [[22, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.NBUDataset": [[23, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Set14HR": [[25, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Urban100HR": [[27, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.utils": [[29, 0, 1, "", "PlaceholderDataset"], [30, 0, 1, "", "Rescale"], [31, 0, 1, "", "ToComplex"]], "deepinv.datasets.utils.Rescale": [[30, 1, 1, "", "forward"]], "deepinv.datasets.utils.ToComplex": [[31, 1, 1, "", "forward"]], "deepinv.loss": [[32, 0, 1, "", "Artifact2ArtifactLoss"], [33, 0, 1, "", "BaseLossScheduler"], [34, 0, 1, "", "EILoss"], [35, 0, 1, "", "FNEJacobianSpectralNorm"], [36, 0, 1, "", "InterleavedEpochLossScheduler"], [37, 0, 1, "", "InterleavedLossScheduler"], [38, 0, 1, "", "JacobianSpectralNorm"], [39, 0, 1, "", "Loss"], [40, 0, 1, "", "MCLoss"], [41, 0, 1, "", "MOEILoss"], [42, 0, 1, "", "MOILoss"], [43, 0, 1, "", "Neighbor2Neighbor"], [44, 0, 1, "", "Phase2PhaseLoss"], [45, 0, 1, "", "R2RLoss"], [46, 0, 1, "", "RandomLossScheduler"], [47, 0, 1, "", "ScoreLoss"], [48, 0, 1, "", "SplittingLoss"], [49, 0, 1, "", "StackedPhysicsLoss"], [50, 0, 1, "", "StepLossScheduler"], [51, 0, 1, "", "SupLoss"], [52, 0, 1, "", "SureGaussianLoss"], [53, 0, 1, "", "SurePGLoss"], [54, 0, 1, "", "SurePoissonLoss"], [55, 0, 1, "", "TVLoss"]], "deepinv.loss.Artifact2ArtifactLoss": [[32, 1, 1, "", "forward"]], "deepinv.loss.BaseLossScheduler": [[33, 1, 1, "", "adapt_model"], [33, 1, 1, "", "forward"], [33, 1, 1, "", "schedule"]], "deepinv.loss.EILoss": [[34, 1, 1, "", "forward"]], "deepinv.loss.FNEJacobianSpectralNorm": [[35, 1, 1, "", "forward"]], "deepinv.loss.InterleavedEpochLossScheduler": [[36, 1, 1, "", "schedule"]], "deepinv.loss.InterleavedLossScheduler": [[37, 1, 1, "", "schedule"]], "deepinv.loss.JacobianSpectralNorm": [[38, 1, 1, "", "forward"]], "deepinv.loss.Loss": [[39, 1, 1, "", "adapt_model"], [39, 1, 1, "", "forward"]], "deepinv.loss.MCLoss": [[40, 1, 1, "", "forward"]], "deepinv.loss.MOEILoss": [[41, 1, 1, "", "forward"]], "deepinv.loss.MOILoss": [[42, 1, 1, "", "forward"], [42, 1, 1, "", "next_physics"]], "deepinv.loss.Neighbor2Neighbor": [[43, 1, 1, "", "forward"]], "deepinv.loss.Phase2PhaseLoss": [[44, 1, 1, "", "adapt_model"], [44, 1, 1, "", "split"]], "deepinv.loss.R2RLoss": [[45, 1, 1, "", "adapt_model"], [45, 1, 1, "", "forward"]], "deepinv.loss.RandomLossScheduler": [[46, 1, 1, "", "schedule"]], "deepinv.loss.ScoreLoss": [[47, 0, 1, "", "ScoreModel"], [47, 1, 1, "", "adapt_model"], [47, 1, 1, "", "forward"]], "deepinv.loss.ScoreLoss.ScoreModel": [[47, 1, 1, "", "forward"]], "deepinv.loss.SplittingLoss": [[48, 0, 1, "", "SplittingModel"], [48, 1, 1, "", "adapt_model"], [48, 1, 1, "", "forward"], [48, 1, 1, "", "split"]], "deepinv.loss.SplittingLoss.SplittingModel": [[48, 1, 1, "", "forward"]], "deepinv.loss.StackedPhysicsLoss": [[49, 1, 1, "", "forward"]], "deepinv.loss.StepLossScheduler": [[50, 1, 1, "", "schedule"]], "deepinv.loss.SupLoss": [[51, 1, 1, "", "forward"]], "deepinv.loss.SureGaussianLoss": [[52, 1, 1, "", "forward"]], "deepinv.loss.SurePGLoss": [[53, 1, 1, "", "forward"]], "deepinv.loss.SurePoissonLoss": [[54, 1, 1, "", "forward"]], "deepinv.loss.TVLoss": [[55, 1, 1, "", "forward"]], "deepinv.loss.adversarial": [[56, 0, 1, "", "DiscriminatorLoss"], [57, 0, 1, "", "DiscriminatorMetric"], [58, 0, 1, "", "GeneratorLoss"], [59, 0, 1, "", "SupAdversarialDiscriminatorLoss"], [60, 0, 1, "", "SupAdversarialGeneratorLoss"], [61, 0, 1, "", "UAIRGeneratorLoss"], [62, 0, 1, "", "UnsupAdversarialDiscriminatorLoss"], [63, 0, 1, "", "UnsupAdversarialGeneratorLoss"]], "deepinv.loss.adversarial.DiscriminatorLoss": [[56, 1, 1, "", "adversarial_loss"], [56, 1, 1, "", "forward"]], "deepinv.loss.adversarial.GeneratorLoss": [[58, 1, 1, "", "adversarial_loss"], [58, 1, 1, "", "forward"]], "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss": [[59, 1, 1, "", "forward"]], "deepinv.loss.adversarial.SupAdversarialGeneratorLoss": [[60, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UAIRGeneratorLoss": [[61, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss": [[62, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss": [[63, 1, 1, "", "forward"]], "deepinv.loss.metric": [[64, 0, 1, "", "ERGAS"], [65, 0, 1, "", "L1L2"], [66, 0, 1, "", "LPIPS"], [67, 0, 1, "", "LpNorm"], [68, 0, 1, "", "MAE"], [69, 0, 1, "", "MSE"], [70, 0, 1, "", "Metric"], [71, 0, 1, "", "NIQE"], [72, 0, 1, "", "NMSE"], [73, 0, 1, "", "PSNR"], [74, 0, 1, "", "QNR"], [75, 0, 1, "", "SSIM"], [76, 0, 1, "", "SpectralAngleMapper"]], "deepinv.loss.metric.L1L2": [[65, 1, 1, "", "metric"]], "deepinv.loss.metric.LPIPS": [[66, 1, 1, "", "metric"]], "deepinv.loss.metric.LpNorm": [[67, 1, 1, "", "metric"]], "deepinv.loss.metric.MAE": [[68, 1, 1, "", "metric"]], "deepinv.loss.metric.MSE": [[69, 1, 1, "", "metric"]], "deepinv.loss.metric.Metric": [[70, 1, 1, "", "__add__"], [70, 1, 1, "", "forward"], [70, 1, 1, "", "invert_metric"], [70, 1, 1, "", "metric"]], "deepinv.loss.metric.NIQE": [[71, 1, 1, "", "metric"]], "deepinv.loss.metric.NMSE": [[72, 1, 1, "", "metric"]], "deepinv.loss.metric.PSNR": [[73, 1, 1, "", "metric"]], "deepinv.loss.metric.QNR": [[74, 1, 1, "", "D_lambda"], [74, 1, 1, "", "D_s"], [74, 1, 1, "", "invert_metric"], [74, 1, 1, "", "metric"]], "deepinv.loss.metric.SSIM": [[75, 1, 1, "", "invert_metric"], [75, 1, 1, "", "metric"]], "deepinv.loss.metric.SpectralAngleMapper": [[76, 1, 1, "", "metric"]], "deepinv.models": [[77, 0, 1, "", "ArtifactRemoval"], [78, 0, 1, "", "AutoEncoder"], [79, 0, 1, "", "BM3D"], [80, 0, 1, "", "CSGMGenerator"], [81, 0, 1, "", "ConvDecoder"], [82, 0, 1, "", "DCGANDiscriminator"], [83, 0, 1, "", "DCGANGenerator"], [84, 0, 1, "", "DRUNet"], [85, 0, 1, "", "DeepImagePrior"], [86, 0, 1, "", "Denoiser"], [87, 0, 1, "", "DiffUNet"], [88, 0, 1, "", "DnCNN"], [89, 0, 1, "", "EPLLDenoiser"], [90, 0, 1, "", "ESRGANDiscriminator"], [91, 0, 1, "", "EquivariantDenoiser"], [92, 0, 1, "", "GSDRUNet"], [93, 0, 1, "", "ICNN"], [94, 0, 1, "", "MedianFilter"], [95, 0, 1, "", "PDNet_DualBlock"], [96, 0, 1, "", "PDNet_PrimalBlock"], [97, 0, 1, "", "PanNet"], [98, 0, 1, "", "PatchGANDiscriminator"], [99, 0, 1, "", "Reconstructor"], [100, 0, 1, "", "Restormer"], [101, 0, 1, "", "SCUNet"], [102, 0, 1, "", "SwinIR"], [103, 0, 1, "", "TGVDenoiser"], [104, 0, 1, "", "TVDenoiser"], [105, 0, 1, "", "TimeAgnosticNet"], [106, 0, 1, "", "TimeAveragingNet"], [107, 0, 1, "", "UNet"], [108, 0, 1, "", "VarNet"], [109, 0, 1, "", "WaveletDenoiser"], [110, 0, 1, "", "WaveletDictDenoiser"]], "deepinv.models.ArtifactRemoval": [[77, 1, 1, "", "backbone_inference"], [77, 1, 1, "", "forward"]], "deepinv.models.AutoEncoder": [[78, 1, 1, "", "forward"]], "deepinv.models.BM3D": [[79, 1, 1, "", "forward"]], "deepinv.models.CSGMGenerator": [[80, 1, 1, "", "forward"], [80, 1, 1, "", "optimize_z"], [80, 1, 1, "", "random_latent"]], "deepinv.models.ConvDecoder": [[81, 1, 1, "", "forward"]], "deepinv.models.DCGANDiscriminator": [[82, 1, 1, "", "forward"]], "deepinv.models.DCGANGenerator": [[83, 1, 1, "", "forward"]], "deepinv.models.DRUNet": [[84, 1, 1, "", "forward"]], "deepinv.models.DeepImagePrior": [[85, 1, 1, "", "forward"]], "deepinv.models.Denoiser": [[86, 1, 1, "", "forward"]], "deepinv.models.DiffUNet": [[87, 1, 1, "", "convert_to_fp16"], [87, 1, 1, "", "convert_to_fp32"], [87, 1, 1, "", "find_nearest"], [87, 1, 1, "", "forward"], [87, 1, 1, "", "forward_denoise"], [87, 1, 1, "", "forward_diffusion"], [87, 1, 1, "", "get_alpha_prod"]], "deepinv.models.DnCNN": [[88, 1, 1, "", "forward"]], "deepinv.models.EPLLDenoiser": [[89, 1, 1, "", "forward"]], "deepinv.models.ESRGANDiscriminator": [[90, 1, 1, "", "forward"]], "deepinv.models.EquivariantDenoiser": [[91, 1, 1, "", "forward"]], "deepinv.models.ICNN": [[93, 1, 1, "", "forward"], [93, 1, 1, "", "grad"]], "deepinv.models.MedianFilter": [[94, 1, 1, "", "forward"]], "deepinv.models.PDNet_DualBlock": [[95, 1, 1, "", "forward"]], "deepinv.models.PDNet_PrimalBlock": [[96, 1, 1, "", "forward"]], "deepinv.models.PanNet": [[97, 1, 1, "", "create_sampler"], [97, 1, 1, "", "forward"]], "deepinv.models.PatchGANDiscriminator": [[98, 1, 1, "", "forward"]], "deepinv.models.Reconstructor": [[99, 1, 1, "", "forward"]], "deepinv.models.Restormer": [[100, 1, 1, "", "forward"], [100, 1, 1, "", "forward_restormer"], [100, 1, 1, "", "is_standard_deblurring_network"], [100, 1, 1, "", "is_standard_denoising_network"], [100, 1, 1, "", "is_standard_deraining_network"]], "deepinv.models.SCUNet": [[101, 1, 1, "", "forward"]], "deepinv.models.SwinIR": [[102, 1, 1, "", "forward"]], "deepinv.models.TGVDenoiser": [[103, 1, 1, "", "epsilon"], [103, 1, 1, "", "epsilon_adjoint"], [103, 1, 1, "", "forward"], [103, 1, 1, "", "nabla"], [103, 1, 1, "", "nabla_adjoint"]], "deepinv.models.TVDenoiser": [[104, 1, 1, "", "forward"], [104, 1, 1, "", "nabla"], [104, 1, 1, "", "nabla_adjoint"], [104, 1, 1, "", "prox_tau_fx"]], "deepinv.models.TimeAgnosticNet": [[105, 1, 1, "", "forward"]], "deepinv.models.TimeAveragingNet": [[106, 1, 1, "", "forward"]], "deepinv.models.UNet": [[107, 1, 1, "", "forward"]], "deepinv.models.VarNet": [[108, 1, 1, "", "backbone_inference"]], "deepinv.models.WaveletDenoiser": [[109, 1, 1, "", "crop_output"], [109, 1, 1, "", "dwt"], [109, 1, 1, "", "flatten_coeffs"], [109, 1, 1, "", "forward"], [109, 1, 1, "", "hard_threshold_topk"], [109, 1, 1, "", "iwt"], [109, 1, 1, "", "pad_input"], [109, 1, 1, "", "prox_l0"], [109, 1, 1, "", "prox_l1"], [109, 1, 1, "", "psi"], [109, 1, 1, "", "reshape_ths"], [109, 1, 1, "", "threshold_3D"], [109, 1, 1, "", "threshold_ND"], [109, 1, 1, "", "thresold_2D"], [109, 1, 1, "", "thresold_func"]], "deepinv.models.WaveletDictDenoiser": [[110, 1, 1, "", "forward"], [110, 1, 1, "", "psi"]], "deepinv.models.complex": [[111, 3, 1, "", "to_complex_denoiser"]], "deepinv.optim": [[112, 0, 1, "", "AmplitudeLoss"], [113, 0, 1, "", "AmplitudeLossDistance"], [114, 0, 1, "", "BaseOptim"], [115, 0, 1, "", "Bregman"], [116, 0, 1, "", "BregmanL2"], [117, 0, 1, "", "Bregman_ICNN"], [118, 0, 1, "", "BurgEntropy"], [119, 0, 1, "", "DPIR"], [120, 0, 1, "", "DataFidelity"], [121, 0, 1, "", "Distance"], [122, 0, 1, "", "EPLL"], [123, 0, 1, "", "FixedPoint"], [124, 0, 1, "", "IndicatorL2"], [125, 0, 1, "", "IndicatorL2Distance"], [126, 0, 1, "", "L1"], [127, 0, 1, "", "L12Prior"], [128, 0, 1, "", "L1Distance"], [129, 0, 1, "", "L1Prior"], [130, 0, 1, "", "L2"], [131, 0, 1, "", "L2Distance"], [132, 0, 1, "", "LogPoissonLikelihood"], [133, 0, 1, "", "LogPoissonLikelihoodDistance"], [134, 0, 1, "", "NegEntropy"], [135, 0, 1, "", "OptimIterator"], [136, 0, 1, "", "PatchNR"], [137, 0, 1, "", "PatchPrior"], [138, 0, 1, "", "PnP"], [139, 0, 1, "", "PoissonLikelihood"], [140, 0, 1, "", "PoissonLikelihoodDistance"], [141, 0, 1, "", "Potential"], [142, 0, 1, "", "Prior"], [143, 0, 1, "", "RED"], [144, 0, 1, "", "ScorePrior"], [145, 0, 1, "", "StackedPhysicsDataFidelity"], [146, 0, 1, "", "TVPrior"], [147, 0, 1, "", "Tikhonov"], [148, 0, 1, "", "WaveletPrior"], [149, 3, 1, "", "optim_builder"]], "deepinv.optim.AmplitudeLossDistance": [[113, 1, 1, "", "fn"], [113, 1, 1, "", "grad"]], "deepinv.optim.BaseOptim": [[114, 1, 1, "", "check_conv_fn"], [114, 1, 1, "", "check_iteration_fn"], [114, 1, 1, "", "forward"], [114, 1, 1, "", "init_iterate_fn"], [114, 1, 1, "", "init_metrics_fn"], [114, 1, 1, "", "update_data_fidelity_fn"], [114, 1, 1, "", "update_metrics_fn"], [114, 1, 1, "", "update_params_fn"], [114, 1, 1, "", "update_prior_fn"]], "deepinv.optim.Bregman": [[115, 1, 1, "", "MD_step"], [115, 1, 1, "", "div"]], "deepinv.optim.BregmanL2": [[116, 1, 1, "", "conjugate"], [116, 1, 1, "", "div"], [116, 1, 1, "", "fn"], [116, 1, 1, "", "grad"], [116, 1, 1, "", "grad_conj"]], "deepinv.optim.Bregman_ICNN": [[117, 1, 1, "", "conjugate"], [117, 1, 1, "", "fn"]], "deepinv.optim.BurgEntropy": [[118, 1, 1, "", "conjugate"], [118, 1, 1, "", "fn"], [118, 1, 1, "", "grad"], [118, 1, 1, "", "grad_conj"]], "deepinv.optim.DataFidelity": [[120, 1, 1, "", "fn"], [120, 1, 1, "", "grad"], [120, 1, 1, "", "grad_d"], [120, 1, 1, "", "prox_d"], [120, 1, 1, "", "prox_d_conjugate"]], "deepinv.optim.Distance": [[121, 1, 1, "", "fn"], [121, 1, 1, "", "forward"]], "deepinv.optim.EPLL": [[122, 1, 1, "", "forward"], [122, 1, 1, "", "negative_log_likelihood"]], "deepinv.optim.FixedPoint": [[123, 1, 1, "", "anderson_acceleration_step"], [123, 1, 1, "", "forward"], [123, 1, 1, "", "init_anderson_acceleration"]], "deepinv.optim.IndicatorL2": [[124, 1, 1, "", "prox"]], "deepinv.optim.IndicatorL2Distance": [[125, 1, 1, "", "fn"], [125, 1, 1, "", "prox"]], "deepinv.optim.L1": [[126, 1, 1, "", "prox"]], "deepinv.optim.L12Prior": [[127, 1, 1, "", "fn"], [127, 1, 1, "", "prox"]], "deepinv.optim.L1Distance": [[128, 1, 1, "", "fn"], [128, 1, 1, "", "grad"], [128, 1, 1, "", "prox"]], "deepinv.optim.L1Prior": [[129, 1, 1, "", "fn"], [129, 1, 1, "", "prox"]], "deepinv.optim.L2": [[130, 1, 1, "", "prox"]], "deepinv.optim.L2Distance": [[131, 1, 1, "", "fn"], [131, 1, 1, "", "grad"], [131, 1, 1, "", "prox"]], "deepinv.optim.LogPoissonLikelihoodDistance": [[133, 1, 1, "", "fn"]], "deepinv.optim.NegEntropy": [[134, 1, 1, "", "conjugate"], [134, 1, 1, "", "fn"], [134, 1, 1, "", "grad"], [134, 1, 1, "", "grad_conj"]], "deepinv.optim.OptimIterator": [[135, 1, 1, "", "forward"], [135, 1, 1, "", "relaxation_step"]], "deepinv.optim.PatchNR": [[136, 1, 1, "", "fn"]], "deepinv.optim.PatchPrior": [[137, 1, 1, "", "fn"]], "deepinv.optim.PnP": [[138, 1, 1, "", "prox"]], "deepinv.optim.PoissonLikelihoodDistance": [[140, 1, 1, "", "fn"], [140, 1, 1, "", "grad"], [140, 1, 1, "", "prox"]], "deepinv.optim.Potential": [[141, 1, 1, "", "bregman_prox"], [141, 1, 1, "", "conjugate"], [141, 1, 1, "", "fn"], [141, 1, 1, "", "forward"], [141, 1, 1, "", "grad"], [141, 1, 1, "", "grad_conj"], [141, 1, 1, "", "prox"], [141, 1, 1, "", "prox_conjugate"]], "deepinv.optim.RED": [[143, 1, 1, "", "grad"]], "deepinv.optim.ScorePrior": [[144, 1, 1, "", "grad"]], "deepinv.optim.StackedPhysicsDataFidelity": [[145, 1, 1, "", "fn"], [145, 1, 1, "", "grad"], [145, 1, 1, "", "grad_d"], [145, 1, 1, "", "prox_d"], [145, 1, 1, "", "prox_d_conjugate"]], "deepinv.optim.TVPrior": [[146, 1, 1, "", "fn"], [146, 1, 1, "", "nabla"], [146, 1, 1, "", "nabla_adjoint"], [146, 1, 1, "", "prox"]], "deepinv.optim.Tikhonov": [[147, 1, 1, "", "fn"], [147, 1, 1, "", "grad"], [147, 1, 1, "", "prox"]], "deepinv.optim.WaveletPrior": [[148, 1, 1, "", "fn"], [148, 1, 1, "", "prox"], [148, 1, 1, "", "psi"]], "deepinv.optim.optim_iterators": [[150, 0, 1, "", "ADMMIteration"], [151, 0, 1, "", "CPIteration"], [152, 0, 1, "", "DRSIteration"], [153, 0, 1, "", "FISTAIteration"], [154, 0, 1, "", "GDIteration"], [155, 0, 1, "", "HQSIteration"], [156, 0, 1, "", "MDIteration"], [157, 0, 1, "", "PGDIteration"], [158, 0, 1, "", "SMIteration"], [159, 0, 1, "", "fStep"], [160, 0, 1, "", "gStep"]], "deepinv.optim.optim_iterators.ADMMIteration": [[150, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.CPIteration": [[151, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.DRSIteration": [[152, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.FISTAIteration": [[153, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.GDIteration": [[154, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.MDIteration": [[156, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.SMIteration": [[158, 1, 1, "", "forward"]], "deepinv.optim.phase_retrieval": [[161, 3, 1, "", "correct_global_phase"], [162, 3, 1, "", "spectral_methods"]], "deepinv.optim.utils": [[163, 0, 1, "", "GaussianMixtureModel"], [164, 3, 1, "", "bicgstab"], [165, 3, 1, "", "conjugate_gradient"], [166, 3, 1, "", "gradient_descent"], [167, 3, 1, "", "least_squares"], [168, 3, 1, "", "lsqr"]], "deepinv.optim.utils.GaussianMixtureModel": [[163, 1, 1, "", "classify"], [163, 1, 1, "", "component_log_likelihoods"], [163, 1, 1, "", "fit"], [163, 1, 1, "", "forward"], [163, 1, 1, "", "get_cov"], [163, 1, 1, "", "get_cov_inv_reg"], [163, 1, 1, "", "get_weights"], [163, 1, 1, "", "load_state_dict"], [163, 1, 1, "", "set_cov"], [163, 1, 1, "", "set_cov_reg"], [163, 1, 1, "", "set_weights"]], "deepinv.physics": [[169, 0, 1, "", "Blur"], [170, 0, 1, "", "BlurFFT"], [171, 0, 1, "", "CompressedSensing"], [172, 0, 1, "", "CompressiveSpectralImaging"], [173, 0, 1, "", "Decolorize"], [174, 0, 1, "", "DecomposablePhysics"], [175, 0, 1, "", "Demosaicing"], [176, 0, 1, "", "Denoising"], [177, 0, 1, "", "Downsampling"], [178, 0, 1, "", "DynamicMRI"], [179, 0, 1, "", "GammaNoise"], [180, 0, 1, "", "GaussianNoise"], [181, 0, 1, "", "Haze"], [182, 0, 1, "", "HyperSpectralUnmixing"], [183, 0, 1, "", "Inpainting"], [184, 0, 1, "", "LinearPhysics"], [185, 0, 1, "", "LogPoissonNoise"], [186, 0, 1, "", "MRI"], [187, 0, 1, "", "MRIMixin"], [188, 0, 1, "", "MultiCoilMRI"], [189, 0, 1, "", "NoiseModel"], [190, 0, 1, "", "Pansharpen"], [191, 0, 1, "", "PhaseRetrieval"], [192, 0, 1, "", "Physics"], [193, 0, 1, "", "PoissonGaussianNoise"], [194, 0, 1, "", "PoissonNoise"], [195, 0, 1, "", "Ptychography"], [196, 0, 1, "", "PtychographyLinearOperator"], [197, 0, 1, "", "RadioInterferometry"], [198, 0, 1, "", "RandomPhaseRetrieval"], [199, 0, 1, "", "SequentialMRI"], [200, 0, 1, "", "SinglePhotonLidar"], [201, 0, 1, "", "SinglePixelCamera"], [202, 0, 1, "", "SpaceVaryingBlur"], [203, 0, 1, "", "StackedLinearPhysics"], [204, 0, 1, "", "StackedPhysics"], [205, 0, 1, "", "StructuredRandom"], [206, 0, 1, "", "StructuredRandomPhaseRetrieval"], [207, 0, 1, "", "TimeMixin"], [208, 0, 1, "", "Tomography"], [209, 0, 1, "", "UniformGaussianNoise"], [210, 0, 1, "", "UniformNoise"], [211, 3, 1, "", "adjoint_function"], [249, 3, 1, "", "stack"]], "deepinv.physics.Blur": [[169, 1, 1, "", "A"], [169, 1, 1, "", "A_adjoint"], [169, 1, 1, "", "update_parameters"]], "deepinv.physics.BlurFFT": [[170, 1, 1, "", "A"], [170, 1, 1, "", "A_adjoint"], [170, 1, 1, "", "U"], [170, 1, 1, "", "U_adjoint"], [170, 1, 1, "", "V"], [170, 1, 1, "", "V_adjoint"], [170, 1, 1, "", "update_parameters"]], "deepinv.physics.CompressedSensing": [[171, 1, 1, "", "A"], [171, 1, 1, "", "A_adjoint"], [171, 1, 1, "", "A_dagger"]], "deepinv.physics.CompressiveSpectralImaging": [[172, 1, 1, "", "A"], [172, 1, 1, "", "A_adjoint"], [172, 1, 1, "", "crop"], [172, 1, 1, "", "flatten"], [172, 1, 1, "", "pad"], [172, 1, 1, "", "shear"], [172, 1, 1, "", "unflatten"]], "deepinv.physics.Decolorize": [[173, 1, 1, "", "V"], [173, 1, 1, "", "V_adjoint"]], "deepinv.physics.DecomposablePhysics": [[174, 1, 1, "", "A"], [174, 1, 1, "", "A_A_adjoint"], [174, 1, 1, "", "A_adjoint"], [174, 1, 1, "", "A_adjoint_A"], [174, 1, 1, "", "A_dagger"], [174, 1, 1, "", "U"], [174, 1, 1, "", "U_adjoint"], [174, 1, 1, "", "V"], [174, 1, 1, "", "V_adjoint"], [174, 1, 1, "", "prox_l2"], [174, 1, 1, "", "update_parameters"]], "deepinv.physics.Downsampling": [[177, 1, 1, "", "A"], [177, 1, 1, "", "A_adjoint"], [177, 1, 1, "", "prox_l2"]], "deepinv.physics.DynamicMRI": [[178, 1, 1, "", "A"], [178, 1, 1, "", "A_adjoint"], [178, 1, 1, "", "A_dagger"], [178, 1, 1, "", "check_mask"], [178, 1, 1, "", "noise"], [178, 1, 1, "", "to_static"]], "deepinv.physics.GammaNoise": [[179, 1, 1, "", "forward"], [179, 1, 1, "", "update_parameters"]], "deepinv.physics.GaussianNoise": [[180, 1, 1, "", "forward"], [180, 1, 1, "", "update_parameters"]], "deepinv.physics.Haze": [[181, 1, 1, "", "A"], [181, 1, 1, "", "A_dagger"]], "deepinv.physics.HyperSpectralUnmixing": [[182, 1, 1, "", "A"], [182, 1, 1, "", "A_adjoint"], [182, 1, 1, "", "A_dagger"], [182, 1, 1, "", "update_parameters"]], "deepinv.physics.Inpainting": [[183, 1, 1, "", "__mul__"], [183, 1, 1, "", "noise"]], "deepinv.physics.LinearPhysics": [[184, 1, 1, "", "A_A_adjoint"], [184, 1, 1, "", "A_adjoint"], [184, 1, 1, "", "A_adjoint_A"], [184, 1, 1, "", "A_dagger"], [184, 1, 1, "", "A_vjp"], [184, 1, 1, "", "__mul__"], [184, 1, 1, "", "adjointness_test"], [184, 1, 1, "", "compute_norm"], [184, 1, 1, "", "condition_number"], [184, 1, 1, "", "prox_l2"], [184, 1, 1, "", "stack"]], "deepinv.physics.LogPoissonNoise": [[185, 1, 1, "", "forward"], [185, 1, 1, "", "update_parameters"]], "deepinv.physics.MRI": [[186, 1, 1, "", "A_adjoint"], [186, 1, 1, "", "V"], [186, 1, 1, "", "V_adjoint"], [186, 1, 1, "", "update_parameters"]], "deepinv.physics.MRIMixin": [[187, 1, 1, "", "check_mask"], [187, 1, 1, "", "crop"], [187, 1, 1, "", "fft"], [187, 1, 1, "", "from_torch_complex"], [187, 1, 1, "", "ifft"], [187, 1, 1, "", "im_to_kspace"], [187, 1, 1, "", "kspace_to_im"], [187, 1, 1, "", "rss"], [187, 1, 1, "", "to_torch_complex"]], "deepinv.physics.MultiCoilMRI": [[188, 1, 1, "", "A"], [188, 1, 1, "", "A_adjoint"], [188, 1, 1, "", "simulate_birdcage_csm"], [188, 1, 1, "", "update_parameters"]], "deepinv.physics.NoiseModel": [[189, 1, 1, "", "__mul__"], [189, 1, 1, "", "forward"], [189, 1, 1, "", "rand_like"], [189, 1, 1, "", "randn_like"], [189, 1, 1, "", "reset_rng"], [189, 1, 1, "", "rng_manual_seed"]], "deepinv.physics.Pansharpen": [[190, 1, 1, "", "A_dagger"]], "deepinv.physics.PhaseRetrieval": [[191, 1, 1, "", "A"], [191, 1, 1, "", "A_dagger"], [191, 1, 1, "", "A_vjp"], [191, 1, 1, "", "B_dagger"], [191, 1, 1, "", "forward"]], "deepinv.physics.Physics": [[192, 1, 1, "", "A"], [192, 1, 1, "", "A_dagger"], [192, 1, 1, "", "A_vjp"], [192, 1, 1, "", "__mul__"], [192, 1, 1, "", "forward"], [192, 1, 1, "", "noise"], [192, 1, 1, "", "sensor"], [192, 1, 1, "", "set_ls_solver"], [192, 1, 1, "", "set_noise_model"], [192, 1, 1, "", "stack"], [192, 1, 1, "", "update"]], "deepinv.physics.PoissonGaussianNoise": [[193, 1, 1, "", "forward"], [193, 1, 1, "", "update_parameters"]], "deepinv.physics.PoissonNoise": [[194, 1, 1, "", "forward"], [194, 1, 1, "", "update_parameters"]], "deepinv.physics.PtychographyLinearOperator": [[196, 1, 1, "", "A"], [196, 1, 1, "", "A_adjoint"], [196, 1, 1, "", "get_overlap_img"], [196, 1, 1, "", "shift"]], "deepinv.physics.RadioInterferometry": [[197, 1, 1, "", "A"], [197, 1, 1, "", "A_adjoint"]], "deepinv.physics.SequentialMRI": [[199, 1, 1, "", "A"], [199, 1, 1, "", "A_adjoint"]], "deepinv.physics.SinglePhotonLidar": [[200, 1, 1, "", "A"], [200, 1, 1, "", "A_dagger"]], "deepinv.physics.SinglePixelCamera": [[201, 1, 1, "", "U"], [201, 1, 1, "", "U_adjoint"], [201, 1, 1, "", "V"], [201, 1, 1, "", "V_adjoint"]], "deepinv.physics.SpaceVaryingBlur": [[202, 1, 1, "", "A"], [202, 1, 1, "", "A_adjoint"], [202, 1, 1, "", "update_parameters"]], "deepinv.physics.StackedLinearPhysics": [[203, 1, 1, "", "A_adjoint"], [203, 1, 1, "", "update_parameters"]], "deepinv.physics.StackedPhysics": [[204, 1, 1, "", "A"], [204, 1, 1, "", "noise"], [204, 1, 1, "", "sensor"], [204, 1, 1, "", "set_noise_model"], [204, 1, 1, "", "update_parameters"]], "deepinv.physics.StructuredRandomPhaseRetrieval": [[206, 1, 1, "", "B_dagger"], [206, 1, 1, "", "get_structure"]], "deepinv.physics.TimeMixin": [[207, 1, 1, "", "average"], [207, 1, 1, "", "flatten"], [207, 1, 1, "", "flatten_C"], [207, 1, 1, "", "repeat"], [207, 1, 1, "", "unflatten"], [207, 1, 1, "", "wrap_flatten_C"]], "deepinv.physics.Tomography": [[208, 1, 1, "", "A"], [208, 1, 1, "", "A_adjoint"], [208, 1, 1, "", "A_dagger"]], "deepinv.physics.UniformGaussianNoise": [[209, 1, 1, "", "forward"]], "deepinv.physics.UniformNoise": [[210, 1, 1, "", "forward"], [210, 1, 1, "", "update_parameters"]], "deepinv.physics.blur": [[212, 3, 1, "", "bicubic_filter"], [213, 3, 1, "", "bilinear_filter"], [214, 3, 1, "", "gaussian_blur"], [215, 3, 1, "", "sinc_filter"]], "deepinv.physics.functional": [[216, 0, 1, "", "IRadon"], [217, 0, 1, "", "Radon"], [218, 3, 1, "", "conv2d"], [219, 3, 1, "", "conv2d_fft"], [220, 3, 1, "", "conv3d_fft"], [221, 3, 1, "", "conv_transpose2d"], [222, 3, 1, "", "conv_transpose2d_fft"], [223, 3, 1, "", "conv_transpose3d_fft"], [224, 3, 1, "", "dst1"], [225, 3, 1, "", "histogram"], [226, 3, 1, "", "histogramdd"], [227, 3, 1, "", "multiplier"], [228, 3, 1, "", "multiplier_adjoint"], [229, 3, 1, "", "product_convolution2d"]], "deepinv.physics.functional.IRadon": [[216, 1, 1, "", "forward"]], "deepinv.physics.functional.Radon": [[217, 1, 1, "", "forward"]], "deepinv.physics.generator": [[230, 0, 1, "", "Artifact2ArtifactSplittingMaskGenerator"], [231, 0, 1, "", "BaseMaskGenerator"], [232, 0, 1, "", "BernoulliSplittingMaskGenerator"], [233, 0, 1, "", "ConfocalBlurGenerator3D"], [234, 0, 1, "", "DiffractionBlurGenerator"], [235, 0, 1, "", "DiffractionBlurGenerator3D"], [236, 0, 1, "", "EquispacedMaskGenerator"], [237, 0, 1, "", "GaussianMaskGenerator"], [238, 0, 1, "", "GaussianSplittingMaskGenerator"], [239, 0, 1, "", "GeneratorMixture"], [240, 0, 1, "", "MotionBlurGenerator"], [241, 0, 1, "", "PSFGenerator"], [242, 0, 1, "", "Phase2PhaseSplittingMaskGenerator"], [243, 0, 1, "", "PhysicsGenerator"], [244, 0, 1, "", "ProductConvolutionBlurGenerator"], [245, 0, 1, "", "RandomMaskGenerator"], [246, 0, 1, "", "SigmaGenerator"]], "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator": [[230, 1, 1, "", "batch_step"]], "deepinv.physics.generator.BaseMaskGenerator": [[231, 1, 1, "", "sample_mask"], [231, 1, 1, "", "step"]], "deepinv.physics.generator.BernoulliSplittingMaskGenerator": [[232, 1, 1, "", "batch_step"], [232, 1, 1, "", "check_pixelwise"], [232, 1, 1, "", "step"]], "deepinv.physics.generator.ConfocalBlurGenerator3D": [[233, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator": [[234, 1, 1, "", "generate_coeff"], [234, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator3D": [[235, 1, 1, "", "step"]], "deepinv.physics.generator.EquispacedMaskGenerator": [[236, 1, 1, "", "sample_mask"]], "deepinv.physics.generator.GaussianMaskGenerator": [[237, 1, 1, "", "get_pdf"]], "deepinv.physics.generator.GaussianSplittingMaskGenerator": [[238, 1, 1, "", "batch_step"]], "deepinv.physics.generator.GeneratorMixture": [[239, 1, 1, "", "step"]], "deepinv.physics.generator.MotionBlurGenerator": [[240, 1, 1, "", "f_matern"], [240, 1, 1, "", "matern_kernel"], [240, 1, 1, "", "step"]], "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator": [[242, 1, 1, "", "batch_step"]], "deepinv.physics.generator.PhysicsGenerator": [[243, 1, 1, "", "__add__"], [243, 1, 1, "", "reset_rng"], [243, 1, 1, "", "rng_manual_seed"], [243, 1, 1, "", "step"]], "deepinv.physics.generator.ProductConvolutionBlurGenerator": [[244, 1, 1, "", "step"]], "deepinv.physics.generator.RandomMaskGenerator": [[245, 1, 1, "", "get_pdf"], [245, 1, 1, "", "sample_mask"]], "deepinv.physics.generator.SigmaGenerator": [[246, 1, 1, "", "step"]], "deepinv.physics.phase_retrieval": [[247, 3, 1, "", "build_probe"], [248, 3, 1, "", "generate_shifts"]], "deepinv.sampling": [[250, 0, 1, "", "DDRM"], [251, 0, 1, "", "DPS"], [252, 0, 1, "", "DiffPIR"], [253, 0, 1, "", "DiffusionSampler"], [254, 0, 1, "", "MonteCarlo"], [255, 0, 1, "", "SKRock"], [256, 0, 1, "", "ULA"]], "deepinv.sampling.DDRM": [[250, 1, 1, "", "forward"]], "deepinv.sampling.DPS": [[251, 1, 1, "", "compute_alpha_betas"], [251, 1, 1, "", "forward"]], "deepinv.sampling.DiffPIR": [[252, 1, 1, "", "compute_alpha"], [252, 1, 1, "", "find_nearest"], [252, 1, 1, "", "forward"], [252, 1, 1, "", "get_alpha_beta"], [252, 1, 1, "", "get_alpha_prod"], [252, 1, 1, "", "get_noise_schedule"]], "deepinv.sampling.MonteCarlo": [[254, 1, 1, "", "forward"], [254, 1, 1, "", "get_chain"], [254, 1, 1, "", "mean_has_converged"], [254, 1, 1, "", "reset"], [254, 1, 1, "", "var_has_converged"]], "deepinv.training": [[259, 0, 1, "", "AdversarialOptimizer"], [260, 0, 1, "", "AdversarialTrainer"]], "deepinv.training.AdversarialOptimizer": [[259, 1, 1, "", "load_state_dict"], [259, 1, 1, "", "state_dict"], [259, 1, 1, "", "zero_grad"]], "deepinv.training.AdversarialTrainer": [[260, 1, 1, "", "check_clip_grad_D"], [260, 1, 1, "", "compute_loss"], [260, 1, 1, "", "save_model"], [260, 1, 1, "", "setup_train"]], "deepinv.transform": [[261, 0, 1, "", "CPABDiffeomorphism"], [262, 0, 1, "", "Homography"], [263, 0, 1, "", "Reflect"], [264, 0, 1, "", "Rotate"], [265, 0, 1, "", "Scale"], [266, 0, 1, "", "Shift"], [267, 0, 1, "", "ShiftTime"], [268, 0, 1, "", "Transform"]], "deepinv.transform.ShiftTime": [[267, 1, 1, "", "roll_reflect_1d"]], "deepinv.transform.Transform": [[268, 1, 1, "", "__add__"], [268, 1, 1, "", "__mul__"], [268, 1, 1, "", "forward"], [268, 1, 1, "", "get_params"], [268, 1, 1, "", "identity"], [268, 1, 1, "", "inverse"], [268, 1, 1, "", "invert_params"], [268, 1, 1, "", "symmetrize"], [268, 1, 1, "", "transform"]], "deepinv.transform.projective": [[269, 0, 1, "", "Affine"], [270, 0, 1, "", "Euclidean"], [271, 0, 1, "", "PanTiltRotate"], [272, 0, 1, "", "Similarity"]], "deepinv.unfolded": [[273, 0, 1, "", "BaseDEQ"], [274, 0, 1, "", "BaseUnfold"], [275, 3, 1, "", "DEQ_builder"], [276, 3, 1, "", "unfolded_builder"]], "deepinv.unfolded.BaseDEQ": [[273, 1, 1, "", "forward"]], "deepinv.unfolded.BaseUnfold": [[274, 1, 1, "", "forward"]], "deepinv.utils": [[277, 0, 1, "", "AverageMeter"], [278, 0, 1, "", "ProgressMeter"], [279, 0, 1, "", "TensorList"], [281, 3, 1, "", "dirac_like"], [282, 3, 1, "", "get_data_home"], [283, 3, 1, "", "get_degradation_url"], [284, 3, 1, "", "get_freer_gpu"], [285, 3, 1, "", "get_image_url"], [286, 0, 1, "", "get_timestamp"], [287, 3, 1, "", "load_dataset"], [288, 3, 1, "", "load_degradation"], [289, 3, 1, "", "load_image"], [290, 3, 1, "", "load_url_image"], [291, 3, 1, "", "ones_like"], [292, 3, 1, "", "plot"], [293, 3, 1, "", "plot_curves"], [294, 3, 1, "", "plot_inset"], [295, 3, 1, "", "plot_ortho3D"], [296, 3, 1, "", "plot_parameters"], [297, 3, 1, "", "plot_videos"], [298, 3, 1, "", "rand_like"], [299, 3, 1, "", "randn_like"], [300, 3, 1, "", "zeros_like"]], "deepinv.utils.AverageMeter": [[277, 1, 1, "", "reset"], [277, 1, 1, "", "update"]], "deepinv.utils.demo": [[280, 3, 1, "", "demo_mri_model"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "terms": {"": [12, 20, 23, 41, 47, 61, 84, 87, 88, 92, 97, 101, 102, 103, 104, 118, 119, 144, 168, 171, 172, 174, 177, 182, 199, 234, 240, 254, 257, 258, 259, 260, 272, 294, 301, 304, 307, 308, 309, 310, 313, 314, 315, 319, 320, 321, 322, 325, 326, 327, 331, 332, 335, 336, 337, 338, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 361, 362, 363, 364, 365, 366, 382, 388, 392], "0": [16, 17, 20, 21, 23, 26, 28, 32, 34, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 87, 92, 93, 94, 97, 100, 101, 102, 104, 109, 110, 114, 115, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 193, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 217, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 250, 251, 252, 254, 255, 256, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 288, 292, 294, 295, 298, 301, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 373, 374, 379, 380, 381, 384, 386, 387, 388, 390, 391, 394, 396, 397], "00": [22, 304, 308, 309, 310, 313, 315, 319, 320, 321, 324, 327, 330, 331, 332, 334, 335, 336, 338, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 362, 365, 366, 368, 374], "000": [16, 308, 315, 349, 351, 360, 364, 392], "0000": [127, 169, 170, 173, 174, 178, 183, 186, 243, 387, 394], "00000": 13, "0000001": 22, "000001": 18, "00001": 13, "0000250": 22, "0001": [15, 21], "0001000": 22, "001": [21, 47, 342, 349, 364], "0014": [307, 314], "00143": 177, "0018759227120798843": 364, "002": [319, 356, 364, 365], "0022": [307, 314], "002592722410522517": 335, "002650": 18, "003": [304, 335, 349, 357, 364], "003231370587838091": 349, "0034": 315, "0037754916896422706": 335, "00378": 335, "004": [304, 335, 357], "00490826": 151, "005": [357, 361], "006": [321, 357, 365], "0064": [307, 314], "007": [304, 355, 357], "008": [321, 350], "0084001": 22, "0084991": 22, "0085000": 22, "008716236651714974": 319, "0089": [307, 314], "009": 319, "0096": [307, 314], "00e": [308, 328, 343], "01": [52, 53, 54, 60, 66, 104, 246, 303, 304, 306, 308, 313, 316, 324, 327, 331, 332, 335, 336, 339, 341, 342, 343, 344, 345, 346, 348, 355, 357, 359, 362, 365, 366, 368, 373, 374, 386, 394], "0100": 313, "0109": [307, 314], "011": 319, "011435804285508791": 319, "0144": 313, "0145": [307, 314], "0146": [177, 198, 313], "015": [321, 357], "0157": 313, "016": 335, "0164958180264647": 335, "01831": 91, "01985": [52, 53, 357], "01it": 332, "02": [304, 330, 332, 334, 339, 341, 342, 343, 344, 345, 359, 362, 374], "020": 356, "020025727886898": 356, "0202": 38, "0204": [307, 314], "021": [332, 334, 374], "024": 350, "0241": 177, "0247": [307, 314], "0271": 313, "029": 357, "03": [294, 308, 316, 324, 332, 335, 336, 338, 339, 343, 345, 348, 355, 359, 361, 362, 366, 368, 374], "0306": 313, "0318": [307, 314], "032": [350, 355], "0322": [307, 314], "0335": [307, 314], "0349": [307, 314], "03521": 171, "03679": 77, "039": 319, "03942249119281769": 319, "0398": 177, "03981": 88, "03it": [310, 332], "04": [236, 237, 245, 315, 324, 332, 344, 345, 348, 374], "0413": 315, "0420": 318, "0431": [307, 314], "04715": 256, "04it": 342, "05": [114, 149, 190, 252, 255, 256, 308, 317, 319, 321, 324, 327, 328, 332, 337, 338, 344, 345, 349, 357, 364, 368, 374, 380, 392], "050": 357, "0501": [307, 314], "0515": [307, 314], "0519": [307, 314], "052": [354, 355], "0523070216572739": 355, "0545": 319, "055": 357, "0559": [307, 314], "055923461914062": 355, "056": 355, "0568": [307, 314], "0588": 313, "05it": 308, "06": [308, 315, 324, 328, 330, 332, 334, 344, 345, 355, 362, 374], "0603": 186, "0605": 318, "062": 362, "0623": [307, 314], "0642": [307, 314], "06474": [95, 96], "066": 357, "0667": 313, "0671": 313, "07": [324, 332, 338, 341, 344, 345, 353, 374], "0707": [307, 314], "0710": 315, "0712": [176, 183], "0732": [307, 314], "077": [208, 217, 319, 349, 359, 374], "07730712890625": 319, "077b83af57538aa183971a2fe0971ec1": 47, "07886": 215, "07it": 332, "08": [301, 324, 332, 341, 345, 368, 374, 379], "0800": 15, "0801": 15, "082": 357, "0864": 198, "0872": 313, "08845": 255, "08995": 252, "08it": [304, 310], "08m": 362, "09": [335, 344, 345, 368, 374], "0900": 15, "09327": [262, 271], "094": 366, "094568888346355": 365, "095": 365, "09500349114552311": 314, "097": 357, "098": [310, 320, 324, 374], "09it": 350, "0m": [304, 315, 320, 321, 331, 352, 366], "0mb": [352, 362], "0mib": [309, 365], "0x7fb357838870": [310, 317, 346], "1": [12, 14, 16, 17, 20, 21, 23, 24, 26, 29, 32, 34, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 84, 87, 89, 91, 92, 97, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 292, 294, 295, 297, 298, 301, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 373, 377, 379, 380, 381, 382, 384, 386, 387, 388, 390, 392, 393, 394, 397], "10": [35, 38, 50, 73, 88, 93, 110, 158, 162, 169, 170, 171, 177, 196, 198, 208, 217, 225, 226, 244, 247, 250, 254, 255, 304, 307, 310, 312, 314, 316, 318, 320, 322, 326, 331, 332, 338, 342, 343, 344, 345, 346, 349, 350, 351, 352, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 369, 379, 392, 394], "100": [12, 15, 18, 27, 83, 114, 124, 126, 149, 163, 167, 168, 171, 184, 250, 252, 258, 304, 308, 309, 310, 311, 312, 313, 315, 318, 319, 320, 321, 327, 331, 332, 335, 336, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 362, 364, 365, 366, 392], "1000": [47, 78, 87, 103, 104, 146, 240, 251, 252, 315, 321, 344, 345, 351, 355, 361, 362, 363, 366, 392], "10000": 332, "1006": [183, 243], "100e": 233, "100mb": 320, "101": [304, 310, 332, 345, 350], "1010": 21, "1018": 21, "102": [332, 345], "1024": [132, 133, 185, 319, 332], "1024x1024": 23, "103": [332, 345], "1036": 312, "104": [332, 345], "105": [332, 345], "106": [332, 345], "1068": 208, "106mb": [304, 345], "107": [332, 345], "108": [326, 332, 345, 357], "1080": 314, "10847507169258835": 357, "108m": 304, "108mb": 350, "109": [332, 345], "10x": [362, 363], "11": [50, 104, 215, 304, 314, 321, 332, 339, 344, 345, 346, 350, 357, 362, 363, 366, 369], "110": [318, 332, 345, 349], "1102": 215, "110940551757814": 304, "111": [304, 332, 345], "112": [332, 345, 357], "11232": [34, 41], "113": [332, 345], "1135": 178, "1137": 88, "113m": 345, "114": [332, 345], "1140": 316, "1145": 327, "114m": 315, "114mb": [336, 351], "115": [332, 345], "116": [332, 345], "117": [332, 345], "11793": 250, "118": [332, 345], "11888": 343, "119": [332, 345], "119510806875491": 365, "11it": [332, 343], "12": [14, 16, 20, 50, 108, 113, 304, 319, 320, 326, 332, 338, 344, 345, 351, 354, 355, 359, 362, 363, 374], "120": [304, 318, 332, 345, 365], "1200": [292, 294, 319], "12000": 392, "1200x1280": 392, "1202718281006854": 304, "121": [332, 344, 345], "12151": 42, "122": [332, 344, 345], "12231": 318, "1227": 183, "122m": 350, "123": [332, 345], "123mb": [304, 320, 345], "124": [332, 345, 364], "125": [307, 332, 345], "125m": 315, "126": [332, 345], "1269": 318, "127": [332, 344, 345], "128": [66, 71, 83, 84, 87, 92, 102, 182, 304, 316, 318, 320, 321, 322, 332, 335, 345, 349, 351, 364, 365, 384, 391], "128x128": [182, 304, 318, 321, 349, 351, 365], "129": [332, 345, 354], "129271799567431": 354, "129m": [304, 350], "129mb": 338, "12it": [320, 332, 346], "13": [164, 308, 314, 315, 331, 332, 335, 344, 345, 350, 352, 354, 359, 374, 392], "130": [318, 332, 344, 345], "131": [332, 345], "132": [320, 332, 345], "1322": 364, "13247v2": [35, 38], "133": [332, 345, 355, 359, 374], "1332": 364, "1336401602927466": 335, "133m": 345, "134": [332, 335, 345], "135": [332, 345], "135388067": [304, 350], "136": [304, 332, 345], "137": [332, 345], "138": [332, 345], "1386": 320, "139": [332, 345], "13it": [320, 332], "13m": 355, "13mb": 362, "14": [25, 215, 304, 321, 328, 332, 338, 344, 345, 350, 355, 357, 362, 392], "140": [318, 332, 345, 366], "1406": 240, "140e": 314, "141": [332, 345], "141mb": [338, 351], "142": [332, 345], "1428": 319, "143": [332, 345, 363], "144": [304, 332, 342, 345, 348, 363, 374], "145": [332, 345, 363], "146": [316, 324, 332, 345, 363, 366, 374], "14610": 318, "14687": 251, "147": [332, 345, 363], "14756": 34, "148": [332, 345, 363], "148mb": 350, "149": [332, 345, 354], "14it": [320, 332], "14m": [353, 354, 356], "15": [102, 182, 234, 235, 308, 321, 327, 331, 332, 334, 338, 342, 344, 345, 352, 354, 355, 362, 363, 365, 366, 374, 391], "150": [23, 318, 332, 345, 349, 351], "1500": 344, "1506": 171, "150mb": 304, "151": [332, 345], "1510": 177, "1518": 198, "152": [332, 345, 363], "153": [332, 345], "154": [332, 345], "155": [332, 345, 363, 364], "156": [332, 345], "157": [332, 345], "157mb": 350, "158": [103, 104, 332, 345, 364], "158m": 345, "158mb": 345, "159": [332, 345], "15it": [320, 332], "16": [16, 17, 22, 89, 122, 169, 170, 177, 184, 201, 202, 262, 269, 270, 271, 272, 276, 295, 297, 307, 315, 320, 321, 324, 331, 332, 338, 339, 341, 344, 345, 351, 354, 355, 361, 374, 377, 379, 380, 390, 393, 394], "160": [318, 331, 332, 345], "1608": 88, "161": [313, 324, 332, 345, 374], "1611": 77, "162": [332, 345], "163": [332, 345], "164": [332, 345], "16461435953776": 335, "165": [319, 332, 335, 345], "1650": 208, "1653334600767409": 319, "1655": 127, "165mb": 304, "166": [332, 345], "1666": 208, "1668": 171, "167": [332, 345], "168": [332, 345], "169": [332, 345], "1696": 318, "169877507234071e": 349, "16it": 310, "16m": [349, 355], "16mb": 362, "16x16": [169, 170, 262, 269, 270, 271, 272, 379], "17": [292, 295, 304, 308, 321, 332, 342, 344, 345, 350, 357, 362], "170": [318, 332, 345], "1707": [95, 96], "171": [332, 345], "172": [328, 330, 332, 345, 374], "173": [307, 332, 345], "173828125": 301, "174": [332, 345, 357], "175": [332, 345], "175mb": 338, "176": [332, 345, 349], "176mb": 304, "177": [332, 345], "178": [332, 345, 365], "1788": [174, 183], "179": [332, 345], "17it": 345, "17m": 351, "18": [104, 308, 315, 332, 344, 345, 364], "180": [102, 208, 216, 217, 262, 264, 269, 270, 271, 272, 318, 332, 345], "181": [320, 332, 345], "1814": 186, "182": [332, 345, 364], "1820": 183, "182m": 345, "183": [332, 345], "1830": 328, "184": [332, 345, 361, 368, 374], "184mb": 349, "185": [332, 345], "186": [332, 345], "186646143595378": 335, "187": [304, 332, 335, 345, 363], "187019": [349, 351], "188": [332, 345, 350, 366], "188174": 366, "189": [332, 345], "189mb": 345, "18it": [332, 345], "19": [304, 310, 321, 332, 335, 338, 343, 344, 345, 350, 352, 353, 356, 357, 364, 365], "190": [315, 318, 332, 345], "1908": 255, "191": [332, 345], "192": [304, 332, 345], "193": [332, 345], "194": [320, 332, 345, 350, 364], "194541857761619e": 349, "195": [332, 345], "195mb": [304, 319], "196": [304, 332, 345], "197": [332, 345, 350], "197mb": 345, "198": [20, 304, 332, 345], "1982": 168, "1985": 176, "199": [20, 332, 345], "1991": 314, "1992": 164, "19it": [332, 345], "1_alex": 335, "1conv": 102, "1d": [91, 237, 238, 245, 322, 379], "1e": [35, 38, 52, 53, 54, 80, 85, 103, 104, 113, 114, 123, 124, 126, 141, 146, 161, 162, 163, 164, 165, 166, 167, 168, 170, 184, 192, 253, 254, 255, 256, 273, 301, 304, 308, 310, 316, 321, 326, 327, 332, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 364, 365, 366, 387], "1e16": 125, "1e2": [164, 165, 166, 253, 342], "1e3": [254, 255, 256, 342], "1e4": 364, "1e8": 168, "1f": 155, "1j": [301, 315, 318], "1m": [304, 315, 350], "1mb": [346, 352, 356], "1mib": 321, "1x1024x1024": 392, "1z2us9zhjdgolu6r1jee0s2bbej2xv5": 332, "2": [14, 16, 17, 21, 23, 26, 31, 32, 34, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 84, 85, 86, 87, 89, 91, 92, 94, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 116, 122, 123, 124, 126, 127, 128, 130, 131, 135, 141, 144, 146, 147, 148, 151, 152, 153, 157, 158, 161, 164, 167, 168, 169, 170, 171, 174, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 220, 230, 232, 233, 234, 235, 236, 237, 238, 240, 245, 251, 252, 253, 254, 255, 256, 260, 263, 268, 270, 272, 292, 294, 295, 297, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 326, 327, 328, 331, 332, 334, 335, 336, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 377, 379, 380, 381, 382, 386, 387, 388, 391, 392, 394, 397], "20": [16, 73, 87, 88, 252, 301, 303, 313, 315, 317, 318, 321, 327, 331, 332, 335, 337, 343, 344, 345, 355, 357, 361, 363, 365, 374, 387, 391], "200": [20, 89, 122, 318, 332, 336, 337, 345, 350, 362, 363, 365, 392], "2000": 327, "2000x2000": 392, "2007": 79, "2009": [104, 308, 326, 327, 335, 338], "200mb": 350, "201": 315, "2010": 103, "2011": 122, "2012": [35, 38], "2013": [103, 104], "2017": [97, 119, 229, 308, 335], "2018": [85, 310, 364], "20185546875": 355, "202": [328, 355], "2020": 364, "2021": 47, "2022": [310, 342, 343, 346], "2023": 14, "2024": [301, 369], "2025": [335, 369], "203mb": 315, "2040": 15, "2040x2040": 392, "204661061157774": [321, 365], "2048": 317, "204m": 345, "205": [321, 365], "2064": 176, "2067779": 321, "2069441": 352, "206mb": 345, "208": [336, 341, 374], "208mb": 345, "209mb": 350, "20it": 345, "20m1387961": 88, "21": [215, 233, 235, 310, 313, 320, 322, 327, 332, 334, 336, 344, 345, 349, 350, 357, 361], "210": 304, "2103": [34, 256], "212": 350, "212mb": 304, "213": [17, 320, 361, 364], "2139": 176, "214": 320, "214mb": [345, 350], "2160x2160": 392, "216mb": 345, "217": 320, "219": 362, "2197": 171, "21it": [310, 345], "22": [304, 320, 321, 331, 332, 344, 345, 357, 362, 366], "2201": [42, 250], "2209": [251, 343], "221mb": 350, "223": [308, 324, 374], "224": 311, "224x224": 311, "226mb": [315, 320], "2270": 127, "227mb": 345, "228": [319, 341, 357], "228mb": [320, 345], "229mb": 345, "22it": 345, "23": [304, 319, 320, 332, 336, 337, 342, 344, 345, 350, 352, 356, 357, 366], "2305": 252, "2312": [34, 41, 91], "231m": 345, "231mb": 350, "233mb": 345, "2348": 127, "234mb": 315, "235": 304, "236mb": [315, 345], "2372": 320, "2376": 320, "238": 355, "23841247558594": 355, "238mb": 304, "23it": [332, 345], "24": [304, 306, 310, 319, 320, 321, 324, 328, 332, 344, 345, 348, 353, 355, 356, 362, 364, 365, 369, 374], "2402": [14, 318], "2403": [262, 271], "24033": 318, "2409": [52, 53, 357], "240mb": [315, 320], "2419": 104, "241mb": [315, 345], "242": 356, "2434": 104, "243mb": 304, "245": [312, 324, 374], "245mb": 320, "24695321": 320, "246mb": 320, "248": 392, "2489": 318, "24966812133789": 304, "24it": [332, 345], "25": [102, 196, 197, 234, 235, 240, 244, 248, 252, 301, 304, 314, 331, 332, 342, 344, 345, 361, 391], "250": [22, 304], "2500": [80, 85, 169, 170, 379], "251mb": 345, "253": 304, "2532": [243, 246], "2544": 318, "255": [102, 331, 332, 344, 345, 346, 391], "2550": 316, "25592549641927": 338, "256": [14, 81, 84, 87, 92, 101, 136, 202, 234, 292, 304, 307, 308, 309, 317, 319, 320, 327, 328, 338, 344, 345, 350, 352, 384, 391], "256m": 345, "256x256": [344, 345], "258": [208, 217], "25852": [118, 337], "2588": 198, "25it": 332, "26": [332, 343, 344, 345, 361, 364, 369], "264": [311, 324, 374], "2640": 208, "265": 363, "266": 355, "2674": 208, "26it": 332, "26m": 362, "27": [332, 338, 344, 345, 364, 365], "270": [264, 338], "2704836828395761": 338, "2744": 127, "275": 319, "27505362033843994": 319, "276": [25, 366], "279m": 345, "27it": 332, "28": [315, 319, 320, 331, 332, 342, 344, 345, 346, 352, 355, 362, 363, 369, 380, 392], "282": [345, 348, 374], "285": 215, "286": [309, 324, 374], "28690": 301, "288": [362, 363], "2899": 318, "28crop": [310, 342, 343, 346], "28it": 332, "28m": 365, "28mb": 355, "29": [310, 317, 320, 332, 338, 342, 343, 344, 345, 346, 350, 355, 364, 365], "2908": 186, "293": 321, "296": [321, 324, 362, 374], "297": 364, "298856479885389": 304, "2989": 316, "299": 304, "29it": 332, "29mb": 355, "2_2": [61, 73, 304], "2a": 53, "2artifact": 32, "2ax_": 336, "2cm": 123, "2d": [14, 17, 21, 26, 109, 169, 172, 178, 186, 187, 188, 195, 196, 197, 199, 201, 205, 218, 219, 221, 222, 229, 231, 234, 238, 240, 241, 262, 264, 265, 266, 269, 270, 271, 272, 301, 307, 317, 322, 349, 350, 379, 392], "2e": [301, 304, 316], "2f": [35, 301, 310, 315, 316, 326, 327, 328, 331, 332, 336, 337, 339, 342, 343, 346], "2m": [171, 198, 304, 350], "2mb": 331, "2mib": [321, 366], "2nd": 103, "2x": 349, "2x2": [169, 170, 186, 188, 380], "2x320x320": 26, "2x_": [336, 365], "3": [12, 16, 21, 23, 35, 38, 45, 46, 47, 49, 53, 54, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 82, 83, 84, 87, 88, 89, 92, 93, 95, 96, 98, 100, 101, 102, 103, 107, 109, 110, 122, 127, 130, 141, 145, 148, 153, 171, 173, 174, 175, 176, 183, 184, 190, 198, 199, 200, 201, 208, 211, 212, 215, 232, 234, 235, 238, 239, 240, 243, 250, 252, 254, 255, 256, 261, 262, 268, 269, 270, 271, 272, 280, 292, 295, 297, 301, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 319, 321, 326, 327, 328, 330, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 349, 350, 352, 354, 355, 357, 361, 362, 363, 364, 365, 366, 377, 379, 380, 384, 390, 392, 393, 394, 396, 397], "30": [268, 304, 315, 318, 320, 332, 335, 338, 339, 343, 344, 345, 362, 364, 365, 369], "300": [315, 327, 328, 380, 392], "304m": 345, "307": [317, 321, 324, 374], "309": 366, "30e": 308, "31": [241, 307, 327, 332, 345, 355, 362, 364, 366], "3132": 316, "316": 320, "31it": 332, "32": [32, 44, 75, 78, 89, 95, 96, 122, 171, 172, 177, 184, 190, 201, 202, 250, 252, 304, 307, 309, 310, 313, 315, 316, 321, 331, 332, 335, 338, 339, 342, 343, 345, 346, 351, 353, 354, 356, 357, 361, 364, 365, 366, 368, 374, 380, 384], "320": [17, 178, 186, 188, 199, 331], "320x320": [320, 349, 351, 392], "3223": 176, "323": 361, "326": [363, 364], "328k": 355, "32it": 332, "32x32": [177, 184, 190, 201, 250, 252, 321, 365], "33": [308, 332, 338, 343, 344, 345, 366], "3322": 318, "332m": 345, "333": 229, "334": 308, "334139506022137": 308, "34": [332, 345, 348, 349, 374], "3429": 318, "343": [315, 319, 324, 344, 348, 374], "343320846557617": 319, "345": 324, "346": [353, 356], "346023559570312": [353, 356], "3467": 318, "348": 229, "3487": 318, "349": 365, "34it": 332, "34m": [355, 362], "35": [304, 314, 315, 324, 331, 332, 345, 374], "353": 352, "3534247181200976": 352, "3542": 318, "355": 366, "356": 361, "356m": 345, "357": 87, "357m": 345, "359": [351, 359, 364, 374], "35it": 332, "36": [331, 332, 344, 345, 349], "360": [208, 264], "3608000": 304, "360k": 362, "3617": 349, "362": 332, "3624": 176, "363": [307, 324, 374], "3636": 127, "3637": 322, "3695": 127, "36it": [310, 332], "37": [233, 320, 321, 332, 341, 344, 345, 351, 364, 365], "371": [362, 363], "3731": [183, 318], "374": 357, "3744": 186, "375": 352, "3750396285973236": 352, "37it": [304, 332, 343], "38": [332, 344, 345], "3809": 318, "384": 320, "3856": 208, "385k": [309, 327, 335, 366], "3881": 127, "38e": 308, "38it": 332, "39": [332, 345, 366], "3929": [119, 335], "3938": [119, 335], "393k": [355, 362], "395e": [233, 314], "397": 301, "397kb": 355, "3986": [174, 183], "39it": [332, 350], "3c353_gdth": 301, "3conv": 102, "3d": [17, 79, 86, 109, 110, 148, 169, 180, 184, 186, 187, 188, 189, 192, 220, 223, 233, 235, 241, 243, 271, 284, 292, 295, 323, 324, 325, 329, 330, 349, 350, 374, 377, 379, 381], "3f": [315, 357], "3k": [313, 355, 362], "3m": [304, 366], "3mb": [304, 332, 353], "3x3": [127, 171, 173, 176, 183, 184, 198, 208], "4": [14, 16, 17, 20, 21, 23, 28, 32, 44, 52, 53, 64, 80, 81, 84, 89, 91, 94, 97, 100, 101, 102, 105, 106, 107, 114, 122, 123, 127, 169, 170, 175, 182, 184, 187, 190, 192, 208, 211, 212, 215, 231, 235, 236, 237, 238, 245, 263, 268, 273, 292, 294, 295, 301, 304, 307, 308, 309, 312, 314, 315, 317, 319, 321, 322, 326, 328, 331, 332, 335, 336, 338, 339, 343, 344, 345, 349, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 369, 377, 379, 380, 387, 392], "40": [304, 318, 326, 330, 331, 332, 337, 343, 344, 345, 350, 351, 374], "402": 335, "4024091561635335": 335, "4033": [174, 183], "407": [354, 368], "4081": 127, "409": 342, "4099398": 52, "40it": 332, "41": [320, 332, 344, 345, 364], "411": [344, 345], "4133": 319, "41it": 332, "41m": 321, "42": [311, 315, 332, 345, 350, 352], "421": 321, "423kb": 362, "4249": 318, "4290": 186, "42it": 332, "43": [168, 304, 310, 315, 327, 332, 338, 344, 345], "430": 304, "430047607421876": 304, "4312": 318, "4322": 176, "4375": 301, "4385367335731565": 355, "439": [351, 355, 364], "43928527832031": 351, "43it": 332, "44": [332, 345, 366], "444737": [353, 354, 355, 356, 357], "444867": [304, 350], "4453": 178, "4468237274226996": 335, "447": [316, 335], "449944205275518": 319, "44it": [332, 343], "44m": 304, "45": [208, 304, 316, 317, 332, 345], "450": 319, "451": 364, "455": 392, "4564": 186, "4569": 315, "458": 363, "45it": 332, "46": [301, 304, 320, 332, 335, 344, 345, 363], "460": [103, 104], "465": 357, "4666": 127, "467kb": 355, "468": [301, 303, 342, 374], "46it": 332, "47": [20, 332, 342, 344, 345, 366], "4710": 318, "4736": 319, "4746": 318, "476": 364, "4776": 127, "479": [103, 104], "47it": 332, "48": [20, 100, 201, 332, 338, 344, 345, 362, 368, 374, 392], "480": 320, "4805": 318, "481x321": 392, "482": 365, "4860": 208, "4882": 208, "489e": [233, 314], "49": [38, 304, 330, 332, 345, 359], "492": 103, "4949": 127, "49it": 332, "4a": 212, "4e": 304, "4k": 320, "4m": [304, 338, 345, 350, 365, 366], "4mb": [331, 345, 355, 362], "4mib": [327, 366], "4x": [14, 178, 320], "4x4": [175, 208], "5": [16, 23, 45, 47, 48, 49, 53, 54, 61, 65, 87, 93, 95, 96, 97, 102, 103, 104, 107, 114, 123, 124, 126, 127, 136, 161, 162, 163, 164, 165, 166, 170, 171, 172, 176, 184, 187, 188, 205, 206, 208, 209, 211, 212, 213, 217, 234, 239, 240, 246, 250, 252, 256, 262, 265, 269, 270, 271, 272, 273, 274, 276, 294, 297, 301, 304, 307, 308, 310, 313, 314, 315, 316, 317, 319, 321, 322, 326, 331, 332, 338, 341, 342, 343, 344, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 362, 363, 364, 365, 366, 373, 379, 380, 384, 386, 387, 390, 392], "50": [16, 38, 102, 123, 132, 133, 141, 158, 162, 184, 185, 192, 200, 215, 262, 269, 270, 271, 272, 273, 301, 304, 312, 313, 315, 317, 318, 319, 321, 331, 332, 343, 344, 345, 352, 353, 365, 380, 391], "500": [184, 308], "5000": [16, 301, 331], "501": 353, "5012940824804186": 353, "503": [363, 368, 374], "505": [363, 374], "507": [338, 341, 355, 374], "5073385957994816": 355, "50e": 233, "50it": [310, 332], "50m": 331, "50th": 312, "51": [38, 233, 235, 314, 328, 332, 344, 345], "510": 392, "512": [14, 16, 17, 21, 25, 84, 92, 233, 235, 320, 373, 386, 392], "512x256x12": 392, "512x512": 392, "518": [343, 348, 374], "51it": 332, "51mb": 355, "52": [332, 345], "526": 103, "5281": [208, 217], "5282": 171, "529": 363, "52it": 332, "52mb": [355, 362], "53": [331, 332, 344, 345, 350], "533": [346, 348, 374], "534": 363, "5369": 127, "538": [321, 363], "539": 322, "53it": [304, 332], "54": [301, 310, 315, 332, 335, 344, 345], "5410": [174, 183], "543": 363, "548789978027344": 355, "549": [355, 361], "54it": 332, "54k": [355, 362], "54m": 355, "55": [23, 308, 314, 318, 332, 345, 366], "5513": 127, "553": 363, "556": [362, 368, 374], "5567108": 181, "558": [353, 356, 357], "55it": [320, 343], "55m": [319, 336], "56": [320, 327, 332, 344, 345, 366], "566": 320, "568": 351, "5684": [171, 174, 183], "56m": 346, "57": [208, 217, 301, 318, 332, 344, 345], "5720": 208, "5748996872970398": 338, "575": 338, "576": 365, "5779": 171, "579": 363, "57it": [332, 343], "57mb": [355, 362], "58": [229, 332, 344, 345, 350], "5842": 215, "586": [319, 321, 324, 374], "5870": 316, "58754328": 320, "588": 364, "58it": 332, "59": [332, 344, 345], "5955": 318, "5976": 301, "5a": 212, "5d": [32, 44, 268, 314, 384, 397], "5e": [321, 351, 352, 353, 356, 357, 363, 366], "5e3": 346, "5j": 315, "5k": 355, "5m": [315, 345, 366], "5mb": 304, "5mib": 366, "5x5": [342, 344], "6": [16, 23, 24, 89, 96, 100, 102, 122, 136, 137, 167, 168, 184, 198, 232, 238, 301, 304, 307, 314, 318, 321, 326, 327, 331, 332, 343, 344, 345, 350, 355, 357, 362, 363, 364, 365, 366, 368, 369, 392], "60": [16, 23, 304, 318, 328, 332, 343, 344, 345], "604": 320, "607": [318, 324, 374], "60it": 310, "61": [309, 332, 345], "611": 364, "61101531982422": 364, "615": [331, 334, 374], "6160": 171, "6179": 318, "61e": 343, "61it": 343, "62": [304, 332, 345, 350, 355], "6209": 186, "62mb": 362, "63": [304, 331, 332, 344, 345, 350, 354, 362, 366], "631": 164, "633": 353, "633206176757813": 353, "635": 334, "638": 364, "639": 365, "64": [29, 70, 74, 82, 83, 84, 88, 92, 93, 98, 101, 182, 236, 237, 244, 245, 304, 307, 310, 316, 317, 327, 328, 331, 332, 336, 337, 338, 345, 349, 352, 362, 363, 366, 384], "640x320": 392, "6418031": 67, "644": 164, "64it": [343, 350], "64x64": [317, 344], "65": [310, 332, 345, 355], "650": 392, "651": 361, "653": [366, 368, 374], "6536": 208, "658": [352, 359, 374], "6592": 318, "65it": [308, 310, 343], "65m": [355, 362], "66": [100, 332, 338, 342, 345], "668229": 361, "6687": 316, "66it": [332, 343], "66mb": 362, "67": [304, 308, 315, 332, 338, 343, 344, 345, 366], "671": 363, "6714502": [53, 54], "6752": 171, "677": 363, "678": 362, "679": 362, "67it": 343, "68": [13, 332, 345, 392], "68080139160156": 349, "681": 349, "683": [353, 359, 374], "6879638671875": 354, "688": 354, "68878173828125": 357, "689": [352, 357], "68945770263672": 352, "68it": 343, "69": [332, 345], "69037": 344, "694kb": 362, "697": [357, 359, 374], "698kb": 355, "6995": 208, "69it": 343, "6m": [304, 320, 338, 345, 366], "6mb": [352, 355], "6mib": 366, "7": [16, 81, 95, 169, 170, 172, 177, 183, 197, 215, 244, 252, 301, 304, 308, 319, 321, 331, 332, 337, 343, 344, 345, 350, 357, 363, 364, 365, 366, 379], "70": [183, 318, 332, 343, 344, 345], "7012": 318, "702": [322, 324, 374], "705": 304, "7051143970949734": 304, "7061": 318, "70888900756836": 354, "709": [354, 365, 368, 374], "70e": [308, 314], "70it": 304, "71": [168, 332, 343, 345, 366], "7125": 127, "7137": 208, "717": 366, "7193": [174, 183], "72": [103, 332, 337, 345, 365], "722": 363, "73": [315, 332, 344, 345], "7302": 176, "7325177722415908": 304, "733": 304, "7340": 208, "735636393229164": 308, "736": 308, "738": 355, "73807144244024": 355, "739k": 332, "74": [321, 332, 345], "7400": 318, "741": [350, 356, 359, 374], "7412": 315, "7444": 240, "744kb": 362, "74856948852539": 351, "7488": 318, "749": 351, "74it": 332, "75": [178, 265, 317, 319, 321, 332, 338, 344, 345, 350, 363, 366], "7510": 318, "752": 320, "754": 350, "754k": 362, "755": 364, "75595": 364, "757126": 301, "75it": 310, "76": [310, 321, 332, 345, 350, 366], "768": [25, 392], "769": 363, "77": [331, 332, 338, 344, 345, 365, 366], "77124": 319, "7715": 318, "775": 357, "776": 363, "7765691388022045": 354, "7769": 171, "777": 354, "78": [301, 332, 343, 345, 362, 363, 365, 366], "782": 361, "786": [353, 356], "78632784200239": [353, 356], "7883": 127, "78it": [308, 350], "79": [304, 312, 332, 338, 343, 345, 346, 353, 355], "7914941": 319, "792": [314, 324, 349, 374], "7930": 318, "794": [327, 330, 374], "7944": 318, "795": [362, 363], "7969": 178, "797": 363, "79it": 310, "7db": 355, "7m": [304, 320, 331], "7mb": [319, 331], "7mib": 366, "8": [16, 21, 23, 45, 48, 64, 65, 67, 68, 69, 72, 73, 76, 89, 100, 102, 104, 105, 106, 122, 146, 165, 168, 169, 170, 190, 215, 236, 237, 238, 244, 245, 295, 297, 301, 304, 307, 308, 310, 314, 317, 319, 321, 322, 327, 328, 331, 332, 335, 336, 338, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 379, 380, 384, 392], "80": [73, 310, 315, 318, 331, 332, 343, 344, 345], "800": 392, "800x800": 392, "801k": [320, 351], "802": [364, 368, 374], "8064": 176, "8075": 198, "81": [332, 345, 355, 362], "811": 364, "812": [335, 341, 374], "8137": 178, "814": [337, 341, 374], "8181": 171, "81it": 332, "82": [332, 345, 352], "820": 348, "820529": [320, 351], "820534": 320, "821": [354, 359, 374], "822": 330, "823": 364, "826": 357, "83": [315, 320, 332, 338, 344, 345, 352], "8307932": [208, 217], "833": 364, "833044052124023": 364, "8343": 318, "8380": 183, "8395": 318, "83it": 332, "84": [304, 332, 345, 350, 352], "8405": 198, "842": 364, "843": 364, "84390640258789": 349, "844": 349, "84499": 392, "8457": 208, "8477": 318, "848833121419835": 321, "849": 321, "84mb": 332, "85": [250, 301, 304, 332, 345, 350], "851647675037384": 349, "852": [349, 364], "855": [326, 330, 374], "856": 364, "8567": 183, "859": 321, "85it": 332, "85m": 366, "86": [331, 332, 335, 345, 346], "8622": 186, "864": 366, "87": [304, 310, 332, 336, 344, 345], "871": [304, 306, 374], "872": 349, "8746174573898315": 349, "875": 349, "876": [349, 356], "876023864746095": 356, "88": [315, 332, 345, 356], "881": 357, "8814043693576259": 357, "887": [339, 341, 374], "88it": [319, 346], "88m": 345, "88mb": 355, "89": [332, 345, 366], "893": 319, "8986": 127, "8994": 243, "899650573730469": [321, 365], "89it": 332, "89mb": 362, "8a": 212, "8m": [304, 315, 321, 350, 352, 365, 366], "8mb": [345, 354], "8mib": [335, 365, 366], "8x64x64": [236, 237, 245], "9": [48, 52, 53, 94, 114, 184, 232, 233, 238, 304, 307, 308, 314, 319, 321, 322, 328, 332, 338, 343, 344, 345, 346, 349, 350, 355, 357, 359, 361, 362, 363, 364, 365], "90": [23, 91, 264, 268, 307, 318, 322, 326, 332, 343, 344, 345, 351], "900": [97, 320, 321, 351, 365], "9000": 127, "9002": 208, "902": [315, 338], "902320861816406": 338, "9026750869443771": 308, "903": 308, "908": 321, "90it": 320, "90m": 350, "91": [310, 315, 332, 343, 345], "910": 359, "9127841": 200, "91e": 316, "91it": 342, "91m": [355, 362], "92": [315, 320, 331, 332, 345, 346], "921": 321, "921340942382812": 321, "926": [320, 324, 374], "92it": 350, "93": [332, 344, 345, 346, 352], "9332": 171, "9360": 208, "9387": 318, "93it": [304, 332], "94": [304, 331, 332, 345], "941720581054687": 352, "942": 352, "946": 320, "9493": 208, "95": [215, 304, 315, 332, 345, 350], "952": 361, "953": 335, "9531": 318, "954": 335, "9547": 392, "955k": 319, "96": [316, 332, 345, 364], "9605e": 379, "9648": 318, "97": [310, 332, 337, 344, 345], "972": 320, "973": 392, "978": 304, "978289794921874": 304, "9793": 208, "98": [310, 331, 332, 345, 350, 355, 362], "98084411621094": 357, "981": 357, "9860": 178, "9897": 208, "98it": [308, 332], "99": [104, 332, 336, 345, 364], "996": [320, 366], "9971": 208, "999": 315, "9999": [50, 394], "99e": 328, "9k": [332, 355, 362], "9m": [304, 320, 331, 338, 345, 352], "9mb": [313, 320, 331, 355], "9mib": [321, 366], "A": [12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 38, 40, 45, 48, 52, 53, 54, 77, 84, 86, 87, 97, 99, 103, 104, 109, 114, 120, 123, 124, 126, 135, 151, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 211, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 231, 234, 236, 237, 239, 240, 241, 243, 244, 245, 249, 251, 255, 256, 257, 260, 274, 284, 285, 290, 292, 297, 301, 308, 313, 316, 319, 321, 323, 324, 325, 326, 327, 328, 331, 332, 336, 337, 338, 339, 342, 344, 345, 352, 360, 362, 363, 364, 365, 372, 374, 375, 376, 378, 380, 381, 382, 383, 385, 386, 387, 388, 390, 392, 396, 397], "AT": [167, 168], "And": [100, 107, 168], "As": [118, 142, 148, 182, 280, 301, 304, 326, 331, 332, 335, 337, 344, 345, 349, 350, 351, 352], "At": [32, 44, 47, 48, 80, 100], "By": [12, 17, 20, 26, 28, 32, 34, 40, 41, 42, 43, 44, 47, 48, 51, 52, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 100, 114, 127, 135, 140, 141, 143, 184, 186, 190, 192, 254, 255, 256, 258, 262, 264, 265, 282, 307, 320, 322, 349, 351, 394], "For": [23, 45, 48, 56, 58, 91, 100, 103, 104, 108, 114, 142, 148, 156, 164, 165, 171, 172, 185, 192, 200, 206, 219, 222, 232, 236, 237, 245, 255, 256, 262, 264, 268, 273, 275, 301, 304, 307, 310, 313, 314, 319, 320, 321, 322, 326, 327, 328, 332, 336, 337, 339, 344, 345, 349, 350, 355, 361, 362, 363, 365, 366, 386, 387, 392, 394, 395, 396, 397], "If": [12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26, 27, 28, 32, 41, 42, 47, 48, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 87, 88, 91, 92, 97, 100, 101, 102, 108, 109, 114, 122, 125, 135, 136, 141, 144, 148, 149, 150, 151, 152, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 205, 206, 207, 208, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 241, 242, 243, 254, 255, 256, 257, 260, 268, 273, 274, 275, 276, 280, 289, 290, 292, 295, 297, 301, 313, 316, 332, 352, 362, 363, 365, 370, 371, 380, 385, 388, 396, 397], "In": [12, 20, 21, 28, 44, 74, 77, 87, 104, 112, 119, 126, 151, 171, 173, 184, 201, 208, 301, 304, 307, 308, 311, 312, 313, 314, 315, 317, 319, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 342, 343, 344, 345, 346, 349, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 375, 384, 387, 390, 393, 394, 395, 396], "It": [12, 13, 20, 27, 28, 32, 34, 41, 44, 55, 70, 71, 79, 87, 88, 94, 106, 109, 110, 130, 136, 165, 169, 170, 177, 184, 185, 190, 192, 201, 202, 205, 206, 212, 213, 250, 260, 279, 307, 314, 318, 320, 327, 328, 332, 376, 377, 380, 384, 390], "No": [74, 89, 122, 186, 238, 268, 301, 384, 385, 387, 393, 397], "On": 332, "One": [307, 345, 362], "Or": 320, "The": [12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 57, 61, 70, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 114, 116, 118, 119, 120, 122, 123, 125, 127, 128, 134, 135, 136, 139, 140, 142, 145, 153, 154, 155, 156, 157, 158, 161, 162, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 196, 197, 199, 200, 201, 203, 204, 206, 207, 208, 211, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 233, 234, 235, 236, 237, 239, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 260, 262, 268, 271, 273, 292, 294, 295, 296, 304, 307, 308, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 326, 327, 328, 332, 335, 336, 337, 338, 339, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 396, 397], "Their": 364, "Then": [14, 91, 188, 215, 307, 332, 349], "There": [16, 20, 21, 132, 133, 197, 301, 345, 354, 356, 357, 382, 397], "These": [9, 12, 26, 108, 142, 208, 261, 269, 270, 272, 274, 304, 317, 319, 320, 322, 350, 362, 363, 380, 393, 397], "To": [14, 17, 21, 28, 32, 44, 45, 48, 70, 73, 75, 100, 142, 162, 230, 242, 268, 297, 304, 307, 314, 317, 320, 331, 344, 345, 349, 355, 361, 365, 366, 384, 394], "With": [311, 315, 345], "_": [21, 38, 41, 42, 59, 60, 61, 62, 63, 91, 103, 104, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 135, 138, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 158, 174, 239, 251, 252, 301, 304, 315, 320, 326, 327, 328, 332, 336, 344, 345, 349, 352, 361, 362, 363, 365, 366, 379, 382, 386, 387], "_0": 345, "_1": [114, 123, 126, 128, 129, 326, 362, 387, 394], "_2": [35, 38, 45, 52, 53, 54, 55, 103, 104, 114, 116, 123, 124, 125, 126, 127, 128, 130, 131, 147, 208, 255, 256, 301, 304, 308, 326, 327, 328, 345, 352, 356, 357, 362, 363, 365, 382, 387, 394], "_4": 322, "__add__": [70, 243, 268], "__class__": 350, "__getitem__": 20, "__init__": [56, 58, 59, 60, 61, 62, 63, 254, 301, 308, 311, 316, 336, 338, 342, 364], "__iter__": 311, "__mul__": [183, 184, 189, 192, 268], "__name__": 350, "_c": [310, 317, 346], "_description_": 14, "_f": [135, 274, 390], "_g": [274, 390], "_get_param": 268, "_i": [49, 73, 182, 394], "_k": 304, "_m": 48, "_n": [109, 110], "_p": [67, 394], "_t": [251, 252, 344, 345], "_transform": 268, "_vf": 322, "_x": [120, 145, 184, 192], "_z": [304, 382], "a_": [41, 42, 171, 184, 191, 192, 352], "a_1": [41, 43, 48, 145, 183, 184, 192, 204, 249, 353, 355, 380], "a_2": [41, 43, 48, 145, 183, 184, 189, 192, 204, 249, 353, 355, 380], "a_a_adjoint": [174, 184], "a_adjoint": [12, 17, 114, 123, 169, 170, 171, 172, 174, 177, 178, 182, 184, 186, 188, 196, 197, 199, 202, 203, 208, 211, 257, 301, 310, 313, 316, 317, 319, 320, 327, 328, 336, 337, 339, 342, 343, 344, 346, 349, 361, 362, 363, 365, 366, 378, 380], "a_adjoint_a": [174, 184, 320], "a_dagg": [12, 52, 171, 174, 178, 181, 182, 184, 190, 191, 192, 200, 208, 257, 301, 312, 315, 316, 317, 319, 332, 355, 364, 380], "a_forward": [114, 123], "a_g": 42, "a_i": [145, 203, 249], "a_n": [204, 249], "a_t": [251, 345], "a_vjp": [120, 145, 184, 191, 192], "aa": [174, 184], "aat": 167, "ab": [34, 35, 38, 41, 42, 52, 53, 88, 91, 95, 96, 171, 177, 201, 250, 251, 252, 255, 256, 262, 271, 307, 314, 318, 320, 343, 344, 346, 357], "abc": 231, "aberr": [307, 314], "abl": [261, 311, 344, 345], "about": [20, 99, 161, 301, 315, 354, 356, 384, 392, 393], "about_mapstyle_vs_iter": 311, "abov": [23, 50, 91, 114, 151, 172, 178, 186, 188, 199, 297, 301, 304, 320, 344, 350, 380, 381], "abs_angl": [111, 315], "absenc": [139, 140], "absolut": [68, 102, 111, 164, 165, 166, 192], "abstract": [52, 53, 54, 67, 181, 200, 231], "abud": 319, "abund": [182, 319], "abus": 135, "ac": [18, 349], "acar": [48, 238], "acc": [14, 320], "acceler": [14, 81, 108, 114, 123, 178, 186, 188, 199, 220, 223, 231, 236, 237, 245, 255, 261, 273, 317, 342, 349, 351, 388], "accept": [9, 111, 268, 397], "access": [17, 20, 21, 25, 27, 311, 350, 380], "accfactor04": 14, "accord": [14, 80, 175, 187, 196, 201, 231, 232, 236, 237, 238, 239, 245, 393], "accordingli": [89, 122, 396], "account": [84, 342, 370, 393], "accur": 307, "achiev": [45, 114, 261, 355], "acknowledg": 370, "acm": 168, "acorss": 182, "acquir": [20, 315], "acquisit": [114, 184, 192, 201, 254, 255, 256, 274, 351, 375, 380], "across": [12, 28, 106, 114, 201, 207, 224, 231, 236, 237, 245, 248, 273, 274, 294, 313, 349, 362, 363, 365, 366, 379, 392, 393, 396, 397], "act": [105, 106, 114, 185, 268, 310, 356, 380, 387], "act_mod": [84, 92], "action": [91, 269, 270, 271, 272], "activ": [50, 84, 88, 92, 98, 233, 234, 235, 307, 314, 373, 393], "actual": [44, 135, 345, 349], "ad": [45, 180, 185, 193, 194, 209, 210, 243, 325, 344, 376, 382], "adam": [85, 260, 304, 310, 319, 320, 321, 332, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "adapt": [12, 32, 33, 39, 43, 44, 45, 47, 48, 49, 52, 53, 54, 80, 87, 98, 100, 102, 103, 104, 105, 106, 108, 114, 119, 145, 168, 208, 217, 238, 309, 349, 355, 377, 382, 383, 384, 393], "adapt_model": [32, 33, 39, 44, 45, 47, 48, 349, 354, 355], "add": [12, 31, 45, 100, 102, 179, 180, 184, 185, 189, 192, 193, 194, 207, 209, 210, 237, 301, 308, 309, 320, 326, 327, 335, 338, 344, 361, 380, 392], "addit": [12, 35, 45, 84, 87, 92, 100, 114, 130, 149, 159, 160, 171, 184, 205, 206, 208, 260, 275, 276, 304, 315, 345, 387, 393], "addition": [260, 265, 345], "address": 370, "adj_project": 301, "adjnufftobj": 301, "adjoint": [77, 103, 104, 114, 122, 146, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 184, 186, 188, 196, 197, 199, 202, 203, 208, 211, 218, 219, 220, 222, 223, 227, 228, 301, 316, 319, 320, 327, 328, 339, 364, 365, 376, 378, 379, 380, 383], "adjoint_funct": [184, 378], "adjointness_test": [184, 316], "adjust": [174, 187, 237, 308], "adler": 364, "admit": 326, "admm": [123, 149, 150, 274, 275, 276, 308, 372, 387], "adv": [59, 60, 61, 62, 63, 304, 382], "advanc": [12, 80, 303, 307, 314, 374, 393], "advantag": 342, "adversari": [12, 19, 27, 28, 39, 51, 56, 57, 58, 59, 60, 61, 62, 63, 80, 82, 83, 86, 90, 98, 99, 107, 169, 184, 192, 240, 241, 243, 259, 260, 282, 284, 306, 374, 375, 385], "adversarial_loss": [56, 58], "adversarialoptim": [260, 304], "adversarialschedul": 304, "adversarialtrain": [304, 382], "advis": 345, "af_": 310, "aff": [269, 350], "affect": [28, 124, 184, 192, 375, 380], "affin": [261, 262, 322, 350, 397], "after": [17, 20, 50, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 100, 102, 123, 140, 196, 197, 254, 260, 268, 296, 297, 301, 304, 313, 318, 326, 332, 342, 355, 370], "afterward": 364, "ag_": 85, "again": [13, 15, 16, 18, 19, 22, 25, 26, 27], "against": 20, "aggreg": 12, "aghabigl": 301, "agnost": [105, 384], "agre": [17, 26, 320, 349, 351], "agreement": [17, 26, 320, 349, 351], "ahead": 260, "ai": [12, 75, 301], "aim": [182, 301, 370, 382, 390], "airi": [233, 301, 307, 314], "al": [48, 59, 60, 61, 62, 63, 74, 79, 80, 82, 83, 85, 87, 90, 97, 98, 103, 107, 108, 237, 238, 261, 262, 271, 301, 304, 308, 310, 319, 322, 327, 335, 338, 344, 345, 349, 350, 391], "algebra": 342, "algorithm": [5, 7, 10, 12, 13, 19, 25, 28, 39, 51, 80, 86, 88, 94, 95, 96, 103, 104, 110, 114, 115, 118, 119, 120, 123, 124, 126, 130, 135, 138, 139, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 174, 177, 180, 184, 189, 192, 194, 201, 207, 208, 214, 237, 251, 252, 253, 254, 255, 256, 257, 273, 274, 275, 276, 282, 284, 285, 287, 288, 290, 292, 293, 296, 301, 313, 315, 316, 318, 325, 340, 341, 347, 348, 365, 367, 368, 372, 374, 375, 385, 392], "alia": [16, 17, 21, 258], "alias": 215, "align": [150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 214, 251, 252, 274, 326, 336, 344, 345, 365, 386, 390], "all": [9, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 30, 33, 39, 41, 48, 68, 69, 70, 84, 85, 89, 91, 100, 109, 114, 121, 122, 137, 148, 149, 164, 165, 167, 168, 183, 187, 206, 208, 216, 217, 226, 230, 232, 238, 242, 261, 263, 268, 274, 275, 276, 294, 297, 301, 307, 308, 309, 310, 311, 315, 320, 321, 322, 325, 326, 335, 336, 337, 338, 339, 345, 349, 350, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366, 370, 374, 375, 380, 381, 384, 385, 387, 388, 391, 392, 393, 394, 395, 396, 397], "allclos": [184, 211, 315, 320, 380], "allow": [17, 20, 104, 170, 178, 183, 201, 260, 261, 279, 377, 397], "almost": 232, "alon": [34, 385, 393], "along": [14, 87, 96, 114, 123, 178, 214, 257, 262, 268, 269, 270, 271, 272, 301, 308, 327, 328, 336, 337, 339, 364], "alongsid": [260, 320], "alparon": 74, "alpha": [45, 65, 74, 87, 92, 251, 252, 254, 255, 256, 342, 344, 345, 346, 394], "alpha_j": 345, "alpha_k": [153, 387], "alpha_t": [87, 345], "alphas_cumprod": 344, "alreadi": [13, 15, 16, 18, 22, 25, 26, 27, 28, 106, 339, 356], "also": [12, 17, 19, 28, 32, 41, 44, 48, 52, 53, 70, 84, 87, 88, 92, 101, 102, 109, 128, 142, 144, 168, 170, 174, 178, 183, 184, 188, 199, 205, 206, 207, 226, 260, 268, 304, 307, 314, 315, 316, 317, 319, 320, 322, 339, 343, 345, 349, 354, 355, 356, 357, 362, 363, 370, 378, 380, 381, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397], "altern": [12, 36, 37, 135, 150, 178, 183, 199, 304, 311, 335, 339, 344, 345, 382, 387], "although": [48, 142], "altogeth": 355, "alwai": [65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 201, 238, 268, 320, 345, 387], "ambientgan": [62, 63, 80, 382], "among": [16, 21, 148, 307, 311, 327, 335, 361, 364, 387, 395], "amount": [182, 256, 267, 268, 339, 344, 376], "amplitud": [112, 113, 210, 233, 235, 314], "amplitudeloss": 387, "an": [12, 20, 21, 32, 35, 44, 52, 53, 54, 70, 77, 80, 81, 83, 84, 85, 87, 88, 91, 92, 98, 99, 101, 103, 104, 109, 110, 114, 120, 121, 130, 135, 136, 139, 141, 142, 148, 149, 151, 153, 156, 162, 163, 168, 171, 174, 178, 180, 182, 183, 184, 186, 188, 189, 191, 192, 196, 198, 201, 205, 206, 214, 232, 233, 235, 238, 241, 251, 252, 254, 255, 256, 257, 260, 262, 265, 268, 271, 273, 274, 275, 276, 280, 284, 287, 289, 290, 292, 295, 297, 301, 304, 307, 308, 309, 311, 313, 315, 316, 317, 319, 321, 322, 323, 324, 325, 331, 332, 336, 337, 338, 342, 343, 345, 346, 349, 350, 351, 352, 354, 356, 357, 362, 363, 365, 369, 370, 371, 374, 375, 377, 379, 380, 382, 383, 385, 387, 390, 392, 393, 394, 397], "analog": 260, "analogi": 182, "analysi": [369, 379], "analyz": [182, 377], "anatomi": [26, 320], "ancestr": 345, "anderson": [114, 123, 273], "anderson_acceler": [114, 123, 361], "anderson_acceleration_backward": [273, 361], "anderson_acceleration_step": 123, "andrew": 372, "angap": 314, "angl": [12, 24, 76, 89, 120, 122, 132, 136, 137, 141, 142, 174, 176, 184, 185, 189, 192, 208, 210, 214, 216, 217, 262, 264, 269, 270, 271, 272, 292, 307, 314, 315, 317, 318, 325, 331, 333, 334, 339, 355, 364, 374, 391, 397], "angular": 314, "ani": [12, 17, 28, 32, 34, 40, 41, 42, 43, 44, 48, 51, 52, 57, 68, 69, 80, 91, 93, 108, 136, 151, 178, 184, 186, 188, 192, 199, 207, 208, 217, 237, 245, 257, 258, 268, 273, 274, 304, 309, 311, 315, 316, 319, 322, 370, 371, 381, 382, 384, 385, 386, 390, 393], "anim": [297, 349, 377], "anim_kwarg": 297, "anim_writ": 297, "anisotrop": 214, "anneal": 47, "annoi": 207, "annot": [21, 392], "annual": 369, "anoth": 32, "ansi": 307, "ansi_standard_indic": 307, "anti": 215, "antiproportion": 185, "anyth": 349, "ap": 102, "apertur": [172, 233, 235, 314, 319], "appear": [301, 380], "append": [279, 315, 318, 344, 345], "appli": [14, 16, 19, 33, 44, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 86, 87, 91, 93, 94, 97, 99, 101, 103, 104, 107, 109, 111, 114, 144, 146, 148, 161, 169, 170, 172, 173, 174, 177, 178, 182, 183, 184, 186, 188, 190, 191, 196, 197, 199, 200, 201, 202, 204, 207, 216, 220, 223, 232, 238, 251, 262, 269, 270, 271, 272, 301, 304, 307, 310, 319, 326, 327, 328, 332, 336, 342, 343, 344, 345, 346, 355, 362, 366, 379, 382, 383, 385, 387], "applic": [103, 104, 196, 301, 319, 379, 380], "apply_mask": 14, "apply_nois": [34, 41, 42], "approach": [77, 80, 172, 182, 301, 322, 352, 364, 395], "appropri": [32, 44, 48, 66, 71, 109, 130, 344], "approx": [14, 38, 47, 208, 342, 345, 346, 376, 382, 392], "approxim": [20, 45, 47, 52, 53, 54, 91, 109, 122, 144, 148, 184, 208, 229, 232, 238, 251, 255, 301, 314, 317, 332, 339, 342, 346, 363, 380, 388, 391], "ar": [3, 12, 14, 16, 17, 20, 21, 23, 26, 28, 29, 32, 33, 40, 41, 42, 44, 45, 47, 48, 50, 53, 57, 77, 80, 85, 86, 87, 88, 91, 95, 96, 99, 100, 104, 107, 108, 109, 110, 111, 114, 123, 135, 139, 140, 148, 150, 151, 152, 155, 164, 165, 167, 168, 169, 171, 173, 174, 177, 178, 181, 183, 184, 186, 187, 188, 190, 192, 195, 196, 198, 199, 202, 203, 204, 205, 206, 208, 214, 216, 217, 221, 226, 229, 230, 232, 234, 236, 237, 238, 242, 243, 244, 249, 251, 254, 255, 256, 257, 260, 262, 264, 268, 269, 270, 272, 274, 289, 290, 292, 294, 295, 296, 297, 301, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 350, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 370, 373, 375, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397], "arang": [32, 44, 216, 217], "arbitrari": [109, 268, 315, 320, 344, 345, 392], "architectur": [10, 77, 78, 81, 84, 88, 92, 97, 100, 101, 102, 107, 276, 280, 304, 310, 313, 320, 321, 344, 349, 351, 353, 354, 355, 356, 357, 361, 365, 366, 372, 375, 382, 384, 385], "archiv": 20, "aren": [66, 71, 268], "arg": [30, 31, 34, 42, 56, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 83, 89, 91, 97, 103, 104, 109, 110, 113, 114, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 158, 163, 184, 192, 231, 232, 236, 237, 238, 245, 258, 259, 261, 263, 264, 265, 266, 267, 268, 273, 274, 297, 301, 308, 320, 326, 332, 338, 363, 364, 365, 386, 387], "argentina": [310, 342, 343, 346], "argmin": [87, 124, 126, 128, 130, 131, 141, 252, 304, 344, 382], "args_model": 35, "argument": [19, 22, 23, 26, 35, 51, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 89, 100, 114, 122, 123, 132, 133, 149, 159, 160, 167, 189, 207, 225, 258, 260, 268, 274, 275, 276, 311, 322, 392, 394], "aris": 332, "arithmet": [268, 322], "around": [214, 312, 369, 377], "arrai": [21, 87, 195, 196, 248, 252, 277, 301, 317, 344], "arridg": 364, "arriv": 396, "arrow": 13, "art": [301, 372], "artefact": 391, "artifact": [12, 32, 77, 102, 208, 217, 257, 258, 349, 352, 375, 382, 384, 385], "artifact2artifact": [12, 26, 32, 39, 44, 48, 174, 178, 184, 186, 187, 192, 199, 207, 230, 231, 232, 237, 243, 245, 280, 282, 284, 292, 297, 325, 358, 359, 374], "artifact2artifactloss": [48, 230, 349, 393], "artifact2artifactsplittingmaskgener": 381, "artifact_remov": 365, "artifactremov": [49, 86, 108, 171, 184, 208, 321, 352, 353, 354, 355, 356, 357, 383, 395], "arxiv": [34, 35, 38, 41, 42, 52, 53, 77, 88, 91, 95, 96, 171, 177, 240, 250, 251, 252, 255, 256, 262, 271, 343, 357], "asarrai": 344, "ascent": [52, 53], "ask": 370, "assert": [301, 315, 320, 380], "assess": 74, "assign": [28, 190, 349, 381], "associ": [20, 28, 32, 34, 39, 40, 41, 42, 43, 45, 47, 48, 52, 53, 54, 56, 58, 103, 104, 114, 123, 130, 141, 146, 196, 226, 254, 301, 312, 317, 320, 344, 362, 391, 392, 396], "assum": [12, 34, 41, 60, 61, 63, 87, 106, 125, 170, 182, 187, 207, 208, 216, 217, 255, 256, 268, 319, 320, 344, 345, 349, 393, 396], "assumpt": [151, 251, 393], "astigmat": 307, "at_next": 345, "ata": 167, "atan": 339, "aten": [312, 322], "atmospher": 181, "attempt": [268, 284, 385], "attent": [87, 100, 102, 339], "attn_drop_r": 102, "attr": 322, "attribut": [70, 80, 150, 151, 152, 172, 180, 185, 193, 194, 209, 210, 296, 309, 344, 381, 395], "atu": 96, "au": [124, 126, 130], "augment": [9, 24, 28, 34, 39, 41, 42, 86, 91, 94, 180, 189, 207, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 285, 290, 292, 297, 323, 324, 325, 374, 375, 397], "author": [87, 102, 344, 345, 364, 391], "authorship": 370, "auto_exampl": [303, 306, 324, 330, 334, 341, 348, 359, 360, 368], "auto_examples_jupyt": 325, "auto_examples_python": 325, "autocalibr": 238, "autoencod": [32, 44, 384], "autograd": [345, 378], "automat": [12, 141, 142, 143, 184, 192, 268, 308, 314, 315, 320, 339, 345, 370, 378, 391, 396], "aux": 114, "aux_x": 345, "auxiliari": [103, 114, 123], "avail": [77, 84, 87, 88, 91, 92, 101, 102, 109, 110, 124, 126, 148, 167, 184, 192, 229, 301, 307, 311, 318, 319, 320, 321, 326, 351, 365, 377, 379, 381, 382, 384, 386, 390, 391, 392], "averag": [12, 16, 44, 45, 48, 84, 91, 92, 106, 132, 133, 169, 170, 172, 173, 184, 185, 190, 207, 257, 268, 277, 316, 322, 326, 343, 346, 349, 355, 377, 380, 384, 394, 397], "averagemet": [12, 377, 394], "avg": [332, 396], "avg16": 16, "avg2": 16, "avg4": 16, "avg8": 16, "avgpool": [84, 92], "avoid": [28, 85, 113, 137, 254, 260, 310, 311, 342], "awar": 384, "award": 369, "awgn": 345, "ax": [114, 122, 123, 126, 130, 151, 164, 165, 167, 168, 171, 174, 184, 208, 214, 263, 292, 301, 308, 327, 328, 331, 332, 346, 362, 363, 365, 379, 388], "ax_": 342, "ax_cur": 95, "ax_k": [362, 363], "axi": [14, 127, 208, 217, 262, 263, 269, 326, 344, 392], "axial": [233, 314], "b": [14, 32, 44, 52, 53, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 93, 94, 97, 102, 105, 106, 112, 113, 121, 124, 125, 128, 131, 133, 158, 162, 164, 165, 167, 168, 169, 172, 173, 178, 182, 186, 187, 188, 191, 195, 196, 198, 199, 200, 202, 206, 207, 211, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 236, 242, 244, 245, 254, 255, 256, 268, 292, 295, 297, 304, 310, 312, 313, 314, 315, 318, 319, 320, 331, 332, 336, 338, 342, 343, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 362, 363, 365, 381, 384, 387, 394, 397], "b1hw": 74, "b4": [310, 342, 343, 346], "b_": [196, 198, 200, 312], "b_1": 196, "b_2": 196, "b_dagger": [191, 206], "b_i": [52, 112, 387], "b_l": 196, "b_t": [251, 345], "back": [12, 28, 77, 116, 208, 275, 276, 301, 344, 362, 363], "backbon": [47, 77, 80, 97, 108, 280, 310, 320, 321, 362, 390, 394, 395], "backbone_gener": 80, "backbone_infer": [77, 108], "backbone_net": [77, 97, 105, 106, 352], "backend": 301, "background": [139, 140, 200, 312], "backproject": [96, 301, 317, 332, 361, 362, 363, 364, 366], "backpropag": [35, 38, 79, 136, 345, 375, 388], "backtrack": [114, 308, 328, 338], "backtrak": 308, "backward": [12, 60, 61, 63, 124, 126, 208, 260, 273, 308, 332, 372, 390, 396], "balanc": [382, 394], "ball": [124, 125, 126, 365], "band": [148, 172, 182, 190, 319, 362, 394], "bar": [12, 28, 80, 252, 257, 321, 345, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "barbara": [307, 336], "bare": 20, "base": [1, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 278, 280, 286, 304, 310, 320, 331, 342, 345, 349, 364, 372, 379, 382, 384, 385, 386, 387, 388, 392, 393, 394], "base_dir": [304, 308, 309, 313, 315, 321, 326, 327, 328, 335, 336, 337, 338, 339, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "baseclass": 70, "basedeq": [275, 390], "baselin": [304, 355], "baselossschedul": [36, 37, 46, 50, 393], "basemaskgener": [14, 236, 237, 245], "baseoptim": [119, 149, 274, 276, 335, 338, 339, 387], "baseunfold": [273, 275, 276, 390], "bash": 284, "basi": [313, 326, 362, 365, 369], "basic": [169, 170, 182, 184, 188, 260, 262, 317, 324, 372, 374, 379, 380], "basplib": 301, "batch": [12, 21, 24, 28, 30, 32, 39, 44, 47, 56, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 84, 85, 87, 88, 89, 98, 105, 107, 113, 114, 121, 122, 125, 128, 131, 133, 136, 163, 164, 165, 167, 168, 178, 182, 183, 186, 199, 200, 207, 211, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 245, 246, 257, 261, 262, 265, 268, 269, 270, 271, 272, 277, 292, 294, 295, 309, 311, 327, 332, 335, 338, 351, 352, 361, 362, 363, 384, 394], "batch_dimens": 163, "batch_norm": [98, 107, 304, 321, 350], "batch_siz": [21, 28, 52, 53, 54, 55, 84, 89, 95, 96, 122, 183, 196, 207, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 304, 307, 308, 309, 311, 314, 320, 321, 331, 332, 335, 338, 345, 349, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 380, 392], "batch_step": [230, 232, 238, 242], "batchnorm": 107, "batchnorm2d": 107, "batchwis": 268, "bay": 345, "bayer": [175, 317], "bayer_filt": 175, "bayesian": 346, "bch": 74, "beam": [208, 217], "becaus": [14, 313, 365], "beck": 104, "been": [12, 13, 15, 18, 22, 25, 27, 28, 43, 123, 301, 304, 308, 309, 310, 319, 320, 321, 335, 337, 338, 339, 344, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366], "befor": [14, 28, 32, 33, 38, 39, 44, 45, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 85, 102, 106, 123, 149, 177, 183, 186, 188, 194, 199, 268, 274, 275, 276, 296, 304, 344, 345, 365], "begin": [12, 114, 124, 125, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 172, 184, 192, 196, 204, 212, 213, 214, 215, 249, 251, 252, 273, 274, 301, 326, 327, 328, 332, 336, 344, 345, 362, 365, 380, 386, 387, 390], "beginn": [82, 83], "behav": 103, "behavior": 20, "behaviour": [68, 69, 268], "behind": 20, "being": [12, 20, 140, 315, 344, 392], "belong": 45, "below": [14, 32, 44, 64, 70, 76, 183, 301, 307, 314, 370, 376, 385, 393], "benchmark": [13, 20, 23, 185, 319, 392], "benefit": [70, 261], "bergman": 337, "berkelei": [13, 392], "bernoulli": [53, 54, 183, 232, 355, 356], "bernoullisplittingmaskgener": [48, 172, 183, 238, 242, 349, 355, 381], "besid": 315, "bessel": 197, "best": [45, 48, 80, 315, 344, 345, 353, 354, 355, 356, 357], "beta": [74, 89, 122, 123, 135, 139, 140, 150, 151, 152, 181, 215, 251, 252, 331, 344, 345, 364, 366, 387, 394], "beta_": 345, "beta_anderson_acc": [114, 123], "beta_anderson_acc_backward": 273, "beta_end": [87, 252, 344, 345], "beta_start": [87, 252, 344, 345], "beta_t": 345, "better": [20, 45, 48, 70, 74, 75, 315, 320, 321, 326, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 385, 394], "between": [12, 15, 16, 17, 20, 22, 34, 35, 36, 37, 41, 46, 48, 59, 60, 62, 63, 65, 66, 76, 78, 104, 107, 114, 120, 121, 135, 141, 171, 184, 191, 192, 197, 203, 208, 217, 235, 244, 252, 254, 256, 264, 292, 295, 301, 304, 308, 310, 318, 332, 335, 338, 339, 344, 345, 376, 382, 386, 387, 394, 397], "beyond": [322, 350, 351], "bfbatchnorm2d": 107, "bi": 164, "bia": [88, 95, 96, 98, 100, 102, 107, 321, 351, 352, 353, 354, 356, 361, 362, 363, 364, 365, 366, 382], "bias": [12, 88, 107], "biasfre": [100, 107], "bicgstab": [167, 171, 184, 192, 208], "biconjug": [164, 167], "biconjugate_gradient_stabilized_method": 164, "bicub": [177, 190, 212, 265, 338], "bicubic_filt": 381, "bigcup_t": 199, "bigger": [48, 171, 201, 292, 295], "bilinear": [177, 190, 213, 262, 269, 270, 271, 272], "bilinear_filt": 381, "bin": [200, 225, 226, 312], "binari": [172, 174, 178, 183, 186, 188, 199, 201, 232, 238, 317, 352], "binomi": 45, "biolog": 16, "birdcag": [188, 320], "bkg": [139, 140], "bkg_level": 312, "black": [169, 170, 177, 184, 370, 379], "blank": [17, 230, 242], "blind": [59, 60, 98, 101, 107, 304, 380, 392], "bling": 100, "blob": 391, "block": [57, 84, 92, 95, 96, 100, 102, 136, 238, 292, 384, 390, 395], "blue": [312, 319], "blur": [20, 170, 174, 177, 184, 190, 192, 202, 212, 213, 214, 215, 218, 221, 229, 234, 239, 240, 241, 243, 244, 285, 290, 292, 304, 314, 323, 324, 325, 328, 337, 338, 342, 344, 361, 366, 374, 380, 381], "blur_col": 314, "blur_confoc": 314, "blur_gener": 304, "blurfft": [307, 308, 327, 335, 337, 342, 361, 380, 381], "blurri": [20, 392], "blurry_shot": 20, "bm3d": 384, "bmatrix": [184, 192, 204, 249, 380], "bologna": 369, "bool": [12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 32, 34, 35, 38, 41, 42, 44, 47, 48, 52, 53, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 85, 87, 88, 91, 92, 93, 95, 96, 98, 100, 101, 102, 103, 104, 107, 114, 123, 135, 137, 139, 140, 148, 149, 159, 160, 161, 162, 163, 164, 165, 168, 171, 172, 178, 183, 184, 186, 187, 188, 190, 194, 196, 197, 198, 199, 201, 206, 208, 216, 217, 218, 220, 221, 223, 226, 232, 238, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 264, 268, 273, 274, 275, 276, 284, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 301], "boolean": [94, 136, 254], "bora": [59, 60, 62, 63, 80, 304], "borrow": 226, "both": [12, 20, 167, 189, 201, 208, 238, 240, 241, 259, 260, 304, 314, 320, 332, 339, 349, 351, 355, 362, 363, 364, 380, 387, 396], "bottom": [17, 172, 294], "bound": [225, 226], "boundari": [137, 244, 301, 307], "box": [254, 255, 256, 342], "brain": [16, 17, 26, 320, 326, 392], "brain_dataset": 320, "brainweb": [320, 326], "brainweb_t1_icbm_1mm_subject_0": [314, 320, 326], "breath": [32, 44, 230, 242], "bredi": 103, "bregman": [116, 117, 118, 134, 141, 149, 156, 275, 276, 337], "bregman_icnn": 387, "bregman_potenti": [141, 149, 156, 275, 276, 337], "bregman_prox": 141, "bregmanl2": [156, 387], "briefli": 391, "briggs_weight": 301, "bright": 301, "broad": 100, "broadcast": [183, 218, 219, 221, 222, 227, 228], "brovei": [190, 319], "bsd68": 13, "bsds500": [89, 122, 331, 391], "buffer_s": 311, "bug": 371, "build": [24, 57, 86, 94, 120, 130, 137, 141, 142, 144, 149, 170, 174, 180, 184, 189, 192, 247, 254, 256, 275, 276, 284, 290, 292, 301, 309, 322, 325, 336, 346, 347, 348, 372, 374, 380, 384, 390, 395], "build_prob": [195, 196, 318, 381], "builder": 390, "built": [93, 136], "burg": [118, 337], "burgentropi": [337, 387], "burn": [254, 255, 256], "burnin": [253, 342], "burnin_ratio": [253, 254, 255, 256, 342], "butterfli": [337, 344, 345], "bx": [191, 195], "byaman14": 238, "bz": 166, "c": [14, 23, 24, 32, 44, 53, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 85, 87, 93, 97, 100, 102, 105, 106, 125, 168, 169, 170, 171, 172, 173, 174, 175, 178, 182, 183, 186, 187, 188, 190, 196, 197, 198, 199, 201, 202, 205, 206, 207, 211, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 236, 237, 238, 242, 244, 245, 268, 292, 295, 297, 301, 314, 317, 320, 326, 349, 363, 365, 380, 384, 392, 394, 397], "c2": 345, "c_": 148, "c_1": 394, "c_2": 394, "cach": [17, 304, 313, 315, 319, 320, 331, 332, 335, 336, 338, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356], "cal": 184, "cal_psnr": 315, "calcul": [45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 93, 116, 118, 120, 127, 129, 134, 141, 143, 145, 147, 186, 188, 199, 207, 268, 292, 297, 318, 342, 394], "call": [12, 20, 33, 37, 39, 46, 51, 56, 58, 91, 104, 120, 123, 135, 145, 183, 184, 211, 230, 257, 268, 292, 297, 307, 314, 315, 322, 380, 384, 388, 390], "callabl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 52, 70, 91, 114, 115, 120, 121, 123, 137, 138, 141, 142, 143, 149, 162, 164, 165, 166, 167, 168, 174, 184, 189, 192, 204, 205, 207, 211, 243, 253, 254, 255, 256, 268, 275, 276, 287], "camera": [20, 182, 201, 269, 270, 271, 272, 336, 350, 391, 397], "cameraman": [373, 386], "can": [1, 9, 12, 14, 17, 20, 23, 26, 28, 32, 34, 40, 41, 42, 43, 44, 45, 48, 51, 52, 53, 54, 57, 70, 78, 79, 80, 84, 85, 86, 87, 88, 91, 92, 93, 101, 102, 105, 106, 107, 109, 110, 111, 114, 123, 127, 130, 136, 144, 148, 149, 171, 177, 178, 183, 184, 186, 188, 189, 190, 191, 192, 197, 198, 199, 201, 202, 208, 211, 217, 218, 219, 220, 221, 222, 223, 227, 228, 231, 232, 236, 238, 243, 245, 250, 251, 254, 257, 258, 261, 273, 274, 275, 276, 282, 294, 296, 297, 301, 304, 307, 308, 309, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 325, 326, 327, 328, 335, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 370, 372, 373, 375, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397], "cancer": [21, 392], "cancerimagingarch": 21, "capabl": 207, "capac": 311, "capitol": [118, 337], "captur": [182, 184, 192, 375, 376, 380], "cardiac": [320, 392], "care": [252, 342, 393, 396], "carefulli": 344, "carlo": [32, 45, 48, 52, 53, 54, 91, 253, 254, 255, 256, 268, 322, 342, 346, 384, 385], "cartesian": [178, 186, 188, 199, 236, 237, 245, 317, 320], "cascad": [108, 237, 280, 320], "case": [28, 32, 44, 45, 47, 73, 75, 77, 87, 112, 124, 125, 126, 135, 162, 171, 172, 184, 192, 201, 208, 212, 213, 215, 251, 269, 270, 271, 272, 301, 307, 309, 311, 312, 314, 320, 326, 327, 336, 345, 349, 355, 362, 384, 386, 387, 392, 395, 396], "cassi": [172, 319], "cast": 19, "cat": [107, 312, 316, 317, 320, 345], "caus": [20, 107], "caveat": [12, 345], "cbar": [292, 301], "cbsb68": 13, "cbsbd68": 13, "cbsd500": [361, 366], "cbsd68": [308, 317, 321, 365, 392], "cbsd_0010": [307, 317, 318, 331], "cc": 47, "cdot": [109, 110, 114, 120, 124, 144, 145, 148, 158, 161, 162, 182, 187, 213, 215, 251, 252, 268, 304, 326, 344, 345, 375, 382, 387, 388, 390, 394], "celeba": [28, 392], "celeba_exampl": [66, 71, 322, 350], "cell": [16, 261], "center": [124, 125, 126, 169, 170, 177, 184, 187, 218, 220, 231, 236, 237, 238, 245, 365], "center_block": 238, "center_fract": [231, 236, 237, 245], "centercrop": [17, 304, 308, 309, 320, 321, 327, 328, 335, 338, 350, 361, 365, 366], "centr": 349, "certain": [20, 85, 268, 310, 311, 392], "cfloat": [19, 171, 198, 206, 301], "cg": [164, 165, 167, 171, 184, 192, 208], "cgan": 382, "cgstab": 164, "ch": 22, "chain": [120, 145, 253, 254, 255, 256, 268, 322, 385, 397], "challeng": [14, 15, 301, 320, 392], "chambol": [12, 19, 28, 39, 51, 86, 103, 104, 109, 120, 124, 138, 141, 142, 149, 151, 153, 174, 183, 184, 192, 257, 274, 275, 276, 284, 287, 313, 325, 364, 367, 368, 374, 387], "chang": [12, 114, 123, 169, 192, 268, 307, 354, 370, 396], "channel": [17, 24, 29, 48, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 87, 88, 89, 92, 93, 95, 96, 98, 100, 101, 102, 107, 122, 136, 161, 171, 172, 173, 175, 178, 182, 183, 186, 187, 188, 198, 199, 200, 201, 205, 207, 218, 219, 220, 221, 222, 223, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 245, 292, 295, 307, 309, 310, 312, 316, 317, 318, 326, 327, 331, 335, 338, 349, 361, 364, 391], "channelwis": [171, 198, 317], "character": [184, 192, 375, 380], "characteris": 304, "cheap": 109, "chebyshev": [255, 388], "check": [12, 13, 15, 16, 18, 22, 25, 27, 100, 114, 123, 184, 186, 187, 188, 232, 260, 268, 301, 363, 365, 366, 370], "check_clip_grad": [12, 260], "check_clip_grad_d": 260, "check_conv_fn": [114, 123], "check_dataset_exist": [13, 18, 23, 25, 27], "check_grad": 12, "check_input_rang": [66, 71], "check_iteration_fn": [114, 123], "check_mask": [178, 186, 187, 188], "check_pixelwis": 232, "checkpoint": [12, 102, 304, 308, 313, 315, 319, 320, 331, 332, 336, 338, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356], "checksum": 15, "chen": [322, 350, 372], "child": [142, 231, 236, 245, 273, 274, 387], "choic": [20, 52, 53, 54, 89, 119, 122, 331, 332, 339, 376, 382, 384, 387], "choos": [23, 32, 36, 37, 43, 46, 83, 87, 114, 123, 148, 171, 175, 184, 203, 208, 218, 220, 221, 223, 308, 313, 317, 321, 332, 336, 344, 345, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 390], "choosen": 332, "chose": [327, 335, 361], "chosen": [12, 28, 91, 102, 114, 167, 184, 185, 257, 331, 337, 339, 344, 361, 366, 386], "chung": 345, "chunk": [32, 230, 349], "chw": 73, "cine": [14, 320, 392], "cine_lax": 14, "cine_lax_mask": 14, "cine_sax": 14, "cine_sax_mask": 14, "cine_xax_mask": 14, "circ": [67, 183, 184, 189, 192, 387], "circl": [208, 216, 217, 339, 364], "circular": [107, 169, 170, 177, 184, 190, 202, 208, 217, 218, 219, 220, 221, 222, 223, 229, 244, 266, 304, 307, 314, 379], "circular_pad": [107, 304, 350], "cirm": 369, "ckp_": 12, "ckp_10_demo_r2r_poisson": 354, "ckp_10_demo_sur": 356, "ckp_50_demo_n2n": 353, "ckp_interv": [12, 351, 352], "ckpt": [304, 313, 319, 320, 321, 337, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 391], "ckpt_dir": [313, 321, 337, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "ckpt_path": 77, "ckpt_pretrain": 12, "ckpt_state_dict": 313, "claim": 114, "clamp": [148, 301, 320, 328, 344], "clamp_max": 148, "clamp_min": [148, 301], "class": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 286, 301, 307, 308, 309, 311, 314, 315, 316, 317, 319, 320, 321, 326, 327, 328, 332, 335, 336, 339, 343, 344, 345, 346, 349, 357, 361, 362, 363, 364, 365, 366, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 390, 392, 393, 394, 396], "classic": [190, 319, 375], "classif": 260, "classifi": [56, 58, 98, 163, 393, 394], "classmethod": 20, "clean": [16, 45, 171, 178, 183, 192, 208, 364, 366, 370, 382], "click": 21, "clip": [12, 30, 194, 253, 254, 255, 256, 257, 260, 264, 292, 295, 315, 331, 332, 342, 345, 373, 386, 387, 392], "clip_posit": 194, "clone": [317, 326, 332, 337, 344, 345], "close": [109, 110, 124, 125, 126, 132, 133, 171, 177, 184, 192, 208, 316, 326, 342, 343, 378, 380, 382, 385], "closer": [184, 250, 252, 315], "cm": [208, 217], "cmap": [292, 294, 295, 301, 326], "cmrxrecon": [14, 320, 392], "cmrxreconslicedataset": [320, 392], "cnn": [119, 310, 335, 384], "co": [13, 18, 27, 214, 304, 311, 313, 314, 315, 319, 320, 326, 331, 332, 336, 338, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 373, 386, 391], "code": [12, 14, 43, 73, 75, 87, 102, 103, 104, 108, 123, 168, 172, 236, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 370, 378, 386, 387, 391, 395, 396], "coeff": [109, 234, 235, 307, 314], "coeff_col": [233, 314], "coeff_il": 233, "coeffic": 109, "coeffici": [109, 110, 148, 173, 233, 234, 235, 307, 314, 315, 317], "coil": [17, 108, 178, 186, 187, 188, 199, 320, 349, 351], "coil_map": [188, 320], "coil_map_0": 320, "coil_map_1": 320, "coil_map_2": 320, "coincid": 314, "colab": 325, "coll": 314, "collabor": 79, "collat": 268, "collate_batch": 268, "collect": [2, 4, 21, 91, 233, 268, 314, 349, 372, 380, 387, 390], "colon": 376, "color": [13, 89, 122, 175, 182, 190, 307, 308, 309, 315, 316, 317, 318, 321, 327, 328, 335, 336, 337, 338, 339, 361, 364, 365, 366, 391], "colorjitt": 322, "colormap": [292, 295, 301], "colour": [307, 316, 322], "column": [183, 237, 245, 292, 295, 362, 363], "com": [188, 325, 332, 373], "combett": 326, "combin": [65, 172, 182, 184, 189, 192, 203, 204, 243, 244, 252, 319, 322, 344, 378, 395], "come": [115, 121, 141, 142, 184, 275, 276, 380, 387], "command": [284, 370], "comment": [304, 349], "commerci": 16, "common": [148, 301, 310, 342, 343, 346, 361, 362, 366, 387, 397], "commonli": [25, 27, 123, 379], "commun": 370, "commut": 91, "compar": [12, 15, 20, 32, 57, 80, 230, 273, 304, 320, 342, 343, 346], "compare_no_learn": [12, 319], "comparison": [12, 20, 57, 257], "compat": [14, 109, 186, 188, 319, 320, 393, 395], "compens": 301, "compil": 23, "complet": [172, 260], "complex": [19, 28, 31, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 111, 148, 161, 171, 178, 186, 187, 188, 197, 201, 292, 295, 301, 313, 315, 317, 318, 320, 326, 392, 394], "complex64": [188, 318, 320], "complex_ab": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 320], "complex_denois": 384, "complex_dtyp": 19, "compliant": 370, "complic": 304, "compon": [89, 122, 163, 332, 345], "component_log_likelihood": 163, "compos": [17, 21, 49, 57, 88, 110, 126, 145, 184, 268, 304, 308, 309, 311, 320, 321, 322, 327, 328, 335, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 380, 392], "composit": [103, 104, 380], "compound": [9, 268, 397], "comprehens": [370, 373, 392], "compress": [12, 19, 28, 39, 51, 59, 60, 80, 102, 120, 130, 141, 142, 148, 157, 171, 172, 184, 192, 274, 276, 282, 284, 292, 296, 304, 319, 325, 367, 368, 374, 381, 392], "compressedsens": [317, 362, 363, 380, 381, 392], "compressivespectralimag": [319, 381], "comptu": 161, "comput": [12, 14, 21, 24, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 66, 71, 73, 75, 86, 88, 89, 94, 103, 104, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 156, 164, 167, 170, 171, 173, 174, 176, 177, 178, 180, 183, 184, 185, 189, 190, 191, 192, 196, 197, 198, 199, 201, 203, 204, 206, 208, 210, 211, 215, 216, 217, 220, 223, 225, 226, 240, 248, 251, 252, 253, 254, 255, 256, 257, 260, 273, 274, 276, 284, 285, 290, 292, 293, 301, 307, 308, 309, 310, 315, 316, 321, 325, 326, 327, 328, 331, 333, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 369, 378, 379, 380, 387, 388, 391, 396], "compute_alpha": [252, 345], "compute_alpha_beta": 251, "compute_invers": [198, 317], "compute_loss": [12, 260, 332, 396], "compute_metr": [12, 74, 114, 123, 273, 274, 301, 315, 327, 328, 336, 337, 339, 396], "compute_norm": [184, 256, 301, 316, 387], "concanten": 183, "concaten": [95, 96, 102, 183, 184, 189, 192, 196, 262, 268, 269, 270, 271, 272], "conclus": 315, "condat": [86, 88, 103, 104, 114, 120, 130, 135, 138, 141, 142, 149, 159, 160, 174, 180, 184, 189, 192, 201, 284, 285, 290, 292, 293, 325, 340, 341, 374, 386], "condatvu": 336, "condit": [20, 59, 60, 87, 98, 168, 184, 220, 223, 244, 252, 307, 344, 352, 375, 380], "condition_numb": 184, "confer": [119, 335, 338], "config": [101, 312, 344], "config_matplotlib": [312, 344], "confirm": [17, 26, 320, 349, 351], "confoc": [16, 233], "confocal_bpae_b": 16, "confocal_bpae_g": 16, "confocal_bpae_r": 16, "confocal_fish": 16, "confocal_mic": 16, "confocalblurgenerator3d": [314, 381], "conj": [158, 161, 162, 184, 387], "conj_model": 117, "conjug": [115, 116, 117, 118, 120, 121, 134, 141, 145, 151, 161, 165, 167, 177, 184, 190, 336, 387], "conjugate_gradi": 387, "conjugate_gradient_method": 165, "conjunct": [12, 257, 284], "conlim": 168, "connect": [78, 102, 107, 384], "consecut": [20, 141, 308, 338], "consequ": 185, "consid": [17, 89, 122, 136, 164, 165, 167, 168, 219, 222, 230, 232, 233, 234, 235, 238, 242, 264, 317, 331, 332, 345, 364], "consider": 236, "consist": [16, 20, 21, 25, 28, 32, 40, 42, 43, 44, 48, 51, 59, 60, 61, 62, 63, 80, 87, 108, 114, 186, 190, 301, 313, 317, 319, 336, 344, 345, 349, 351, 352, 365, 376, 390, 392], "consol": [12, 28, 163, 164, 165, 168, 257], "consortium": 21, "const": 332, "constant": [52, 53, 54, 100, 103, 104, 132, 133, 161, 166, 181, 184, 185, 218, 251, 254, 255, 256, 268, 320, 331, 345, 361, 393, 396], "constant_batch": 261, "constant_shap": [264, 268], "constrain": [12, 19, 28, 39, 51, 86, 104, 109, 120, 124, 138, 141, 142, 174, 183, 184, 192, 257, 274, 276, 284, 287, 313, 322, 325, 367, 368, 374, 397], "constraint": [254, 255, 256, 391], "construct": [5, 28, 32, 44, 59, 60, 62, 63, 247, 304, 314, 317, 344, 345, 349, 355, 385], "constructor": [20, 239, 258], "consumpt": [89, 122], "contain": [4, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 21, 23, 25, 27, 28, 41, 42, 109, 110, 114, 123, 135, 149, 150, 151, 152, 153, 154, 156, 158, 163, 169, 170, 193, 197, 200, 208, 217, 244, 254, 255, 256, 274, 275, 276, 288, 289, 290, 296, 307, 309, 312, 313, 314, 319, 336, 349, 362, 380, 387, 388, 390, 391, 392, 393, 394, 397], "content": [15, 320], "context": [47, 274, 304, 311], "continu": [261, 350, 397], "contrast": 332, "contribut": [226, 369], "contributor": [369, 370], "control": [20, 48, 52, 91, 107, 119, 179, 251, 256, 339, 342, 344, 346, 355, 376, 393], "conv": [98, 100, 101, 102], "conv1d": 312, "conv2d": [169, 221, 379], "conv2d_fft": [222, 379], "conv3d": 169, "conv3d_fft": [169, 223, 379], "conv_transpose2d": [218, 379], "conv_transpose2d_fft": [219, 379], "conv_transpose3d_fft": [220, 379], "convdecod": [85, 310, 382], "conveni": [20, 187, 319, 320, 326, 327, 328, 342, 349, 351, 394], "convent": [64, 76, 109, 173, 234, 326], "converg": [12, 35, 38, 103, 104, 114, 123, 124, 126, 135, 141, 146, 155, 164, 184, 253, 254, 255, 256, 301, 308, 316, 326, 327, 328, 335, 336, 337, 338, 339, 343, 364, 387], "convers": 371, "convert": [17, 26, 31, 86, 87, 111, 173, 174, 178, 289, 290, 315, 316, 343, 349, 383, 384, 388], "convert_to_fp16": 87, "convert_to_fp32": 87, "convex": [93, 103, 104, 115, 116, 117, 118, 120, 121, 125, 134, 141, 145, 156, 337, 365, 387], "convolut": [81, 82, 83, 84, 85, 88, 92, 93, 95, 96, 100, 102, 107, 144, 169, 170, 197, 202, 218, 219, 220, 221, 222, 223, 229, 237, 301, 308, 310, 312, 327, 346, 379, 380, 382, 387, 388], "convolv": [144, 218, 219, 220, 221, 222, 223, 307, 388], "convtranspos": [84, 92], "coordin": [214, 240, 294, 301], "copi": [312, 314, 317, 326, 344, 345, 361, 362, 363, 365, 366], "core": 311, "corner": 294, "correct": [80, 87, 161, 197, 301, 318, 339], "correct_global_phas": [315, 318], "correctli": [13, 15, 18, 22, 25, 27, 365], "correl": [218, 221, 353], "correspond": [16, 44, 80, 100, 114, 116, 118, 132, 133, 134, 135, 151, 158, 161, 162, 178, 179, 184, 185, 186, 191, 192, 195, 196, 199, 203, 204, 205, 206, 218, 219, 220, 221, 222, 223, 243, 249, 260, 269, 270, 271, 272, 294, 301, 307, 314, 317, 332, 336, 338, 344, 345, 362, 363, 366, 384, 387], "corrupt": [45, 47, 337, 353, 354, 356, 357], "cosin": [162, 315], "cosine_similar": [162, 315], "cosineannealinglr": 364, "cost": [53, 114, 123, 135, 149, 150, 151, 152, 153, 154, 156, 184, 275, 276, 308, 315, 327, 328, 336, 338, 387], "cost_tv": 327, "cost_tv_prox": 327, "cost_wv": 328, "cost_wv_prox": 328, "could": [12, 310], "count": 226, "coupl": 332, "cours": 349, "cov": 163, "cov_regular": 163, "covari": [158, 162, 163, 240], "coverag": 301, "cp": [149, 274, 275, 276, 313, 365, 387], "cpab": 261, "cpabdiffeomorph": [320, 322, 397], "cpiter": [364, 365], "cpp": [312, 322], "cpu": [12, 28, 32, 44, 56, 57, 58, 59, 60, 61, 62, 63, 66, 71, 77, 84, 86, 88, 89, 92, 93, 97, 99, 100, 101, 105, 106, 109, 110, 119, 122, 136, 148, 163, 169, 170, 171, 172, 173, 175, 177, 178, 182, 183, 186, 187, 188, 190, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 208, 211, 216, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 245, 246, 247, 250, 251, 252, 257, 261, 262, 269, 270, 271, 272, 274, 276, 280, 289, 290, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 373, 386], "craft": [384, 385], "creat": [19, 28, 32, 38, 42, 44, 48, 57, 70, 89, 91, 114, 122, 123, 171, 174, 176, 178, 180, 182, 183, 184, 186, 188, 189, 192, 198, 199, 207, 230, 231, 232, 237, 238, 242, 243, 245, 250, 254, 258, 268, 276, 284, 287, 292, 308, 315, 318, 322, 323, 324, 325, 335, 336, 374, 378, 380, 384, 387, 390], "create_sampl": 97, "creation": 316, "crit": [103, 104, 308, 328, 343], "crit_conv": [114, 124, 126, 254, 256, 308, 338], "criteria": [80, 254, 308, 335, 338], "criterion": [103, 104, 114, 123, 124, 126, 146, 184, 326], "critic": [56, 58, 260], "crop": [17, 109, 172, 186, 187, 188, 205, 264, 268, 289, 290, 320], "crop_output": 109, "cropms": 320, "croppsnr": 320, "cross": [218, 221], "crucial": [339, 382], "csgm": [80, 382], "csgm_model": 304, "csgmgener": [304, 382], "csv": 21, "ct": [12, 21, 39, 48, 51, 86, 88, 89, 95, 96, 114, 120, 122, 130, 135, 136, 138, 141, 142, 149, 151, 159, 160, 180, 184, 185, 189, 192, 208, 274, 276, 284, 285, 290, 292, 293, 325, 331, 332, 340, 341, 367, 368, 372, 374, 379, 392], "ct_small": 332, "ct_toi": 332, "cth": 188, "cubic": [148, 326], "cuda": [12, 38, 89, 119, 122, 169, 170, 202, 243, 250, 252, 284, 301, 304, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 395], "cumprod": [344, 345], "cup_": [310, 342, 343, 346], "cur_data_fidel": [123, 135, 150, 151, 152, 153, 154, 156, 315, 336, 364], "cur_param": [123, 135, 150, 151, 152, 153, 154, 156, 158, 315, 336], "cur_prior": [123, 135, 150, 151, 152, 153, 154, 156, 158, 315, 336, 364], "current": [12, 33, 36, 37, 46, 50, 72, 95, 96, 114, 123, 135, 150, 151, 152, 153, 154, 156, 158, 163, 169, 170, 174, 177, 178, 179, 180, 182, 185, 189, 193, 194, 199, 202, 210, 243, 260, 286, 308, 328, 336, 342, 343, 345, 364, 377], "current_log": 332, "curv": [301, 308, 315, 318, 321, 327, 328, 336, 337, 339, 351, 352, 353, 354, 356, 361, 362, 363, 364, 365, 366, 377], "custom": [12, 19, 26, 28, 39, 51, 86, 88, 94, 114, 120, 130, 135, 138, 141, 142, 144, 149, 157, 159, 160, 170, 171, 173, 174, 177, 180, 184, 186, 189, 190, 192, 201, 214, 254, 256, 257, 258, 268, 274, 275, 276, 282, 284, 285, 287, 290, 292, 293, 296, 309, 313, 315, 320, 323, 324, 325, 339, 340, 341, 347, 348, 355, 365, 367, 368, 374, 375, 380, 386, 392, 396], "custom_init": [114, 301, 313, 339, 364, 365], "custom_init_cp": [313, 365], "custom_metr": 114, "custom_output": [338, 364], "customis": 322, "customtrain": 396, "cutoff": [234, 235, 307, 314], "cv": 18, "cviter": 336, "cx256x256": [23, 392], "cyclegan": 304, "d": [35, 45, 55, 56, 58, 59, 60, 61, 62, 63, 67, 74, 87, 91, 103, 104, 116, 118, 120, 121, 122, 134, 138, 143, 144, 145, 146, 169, 171, 181, 186, 187, 188, 197, 198, 200, 220, 223, 226, 259, 260, 295, 301, 304, 312, 314, 320, 326, 336, 342, 346, 365, 382, 387, 388], "d_": [74, 115, 141, 200, 251, 252, 312, 337, 365, 394], "d_i": [145, 205, 206], "d_lambda": 74, "dabov": 79, "dagger": [52, 77, 174, 178, 383], "damp": [168, 255], "daniil": [103, 104], "data": [9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 40, 42, 43, 44, 48, 51, 52, 53, 54, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 89, 93, 101, 105, 106, 108, 112, 113, 114, 119, 120, 122, 123, 124, 126, 128, 130, 131, 135, 145, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 163, 182, 186, 187, 188, 196, 197, 207, 216, 217, 230, 238, 242, 243, 246, 251, 252, 257, 258, 260, 274, 275, 276, 282, 301, 304, 310, 315, 318, 319, 332, 350, 375, 376, 377, 379, 380, 384, 385, 386, 390, 393, 395, 396, 397], "data_dir": [14, 287, 288, 304, 308, 309, 313, 319, 321, 326, 327, 328, 335, 337, 338, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "data_fidel": [114, 118, 123, 130, 135, 145, 149, 150, 151, 152, 153, 154, 156, 251, 252, 254, 255, 256, 274, 275, 276, 301, 308, 313, 315, 318, 327, 328, 332, 335, 336, 337, 338, 339, 342, 344, 345, 346, 361, 362, 363, 364, 365, 366, 373, 386, 387, 390], "data_fidelity_list": 145, "data_fold": 14, "data_init": 163, "data_test": 392, "data_train": 392, "databas": 21, "datafid": [114, 120, 128, 130, 131, 132, 139, 145, 332, 376, 386, 387, 390], "datafidel": [112, 114, 123, 124, 126, 130, 132, 135, 139, 145, 149, 150, 151, 152, 153, 154, 156, 251, 252, 254, 255, 256, 274, 275, 276, 336, 364, 387], "datafidnam": [114, 120, 130, 145, 386, 387], "datagener": 356, "dataload": [12, 14, 21, 163, 257, 258, 260, 304, 308, 319, 320, 321, 332, 335, 336, 337, 338, 339, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 392, 396], "dataparallel": 395, "datapoint": 28, "dataset": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 48, 89, 122, 174, 176, 180, 184, 185, 186, 187, 188, 189, 192, 257, 258, 260, 282, 284, 287, 288, 292, 314, 315, 317, 319, 320, 323, 324, 325, 326, 331, 332, 337, 339, 345, 349, 350, 355, 370, 372, 373, 374, 375, 377, 379, 386, 391, 393, 394, 396], "dataset_cach": [14, 17], "dataset_filenam": [28, 321, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366], "dataset_info": 13, "dataset_nam": [287, 308, 309, 327, 328, 335, 336, 338], "dataset_path": [17, 304, 320], "dataweight": [197, 301], "daubechi": 301, "db": [301, 310, 315, 326, 327, 328, 336, 337, 339, 342, 343, 346], "db1": [148, 301, 326], "db2": [109, 148, 301, 326], "db3": [301, 326], "db4": [110, 148, 301, 326], "db5": 301, "db6": 301, "db7": 301, "db8": [109, 110, 148, 301, 313, 326, 328, 362, 365], "dcgan": [80, 82, 83, 304, 382], "dcgan_faces_tutori": [82, 83], "dcgandiscrimin": [60, 61, 63, 304, 382], "dcgangener": [80, 304, 382], "dcm": 21, "dd_hh": 12, "ddim": [251, 345], "ddpm": 345, "ddrm": [316, 343, 388], "deal": [12, 207, 320], "deblock": 22, "deblur": [12, 19, 20, 22, 28, 39, 51, 59, 60, 84, 86, 88, 98, 100, 104, 114, 119, 120, 130, 138, 141, 142, 146, 149, 170, 174, 180, 184, 189, 192, 214, 257, 265, 273, 275, 284, 287, 288, 292, 293, 304, 323, 324, 325, 329, 330, 337, 340, 341, 344, 350, 367, 368, 372, 374, 384, 392], "deblurgan": [59, 60, 98, 304], "deblurgan_model": 304, "debug": 78, "dec": 109, "decid": 370, "decod": [81, 84, 85, 100, 310, 382], "decolor": [190, 316, 319, 381], "decolorizesvd": 316, "decompos": [172, 197, 301, 388], "decomposablephys": [170, 173, 176, 178, 183, 186, 199, 201, 250, 307, 316, 342, 343, 378, 380, 396], "decomposit": [109, 110, 148, 170, 173, 174, 178, 183, 186, 199, 201, 234, 235, 250, 307, 314, 316, 342, 343, 378, 380], "deconvolut": [379, 390], "decor": 268, "decreas": [114, 163, 250, 251, 252, 344, 345], "dedic": 16, "deep": [12, 19, 28, 32, 39, 44, 51, 66, 77, 81, 82, 83, 84, 85, 86, 88, 97, 99, 114, 117, 119, 120, 130, 138, 141, 142, 149, 170, 174, 180, 183, 184, 189, 192, 214, 230, 237, 242, 257, 273, 274, 275, 280, 284, 287, 288, 290, 292, 309, 315, 323, 324, 325, 335, 349, 351, 367, 368, 370, 374, 375, 385], "deepimageprior": [81, 310], "deepinv": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 369, 370, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397], "deepinv_data": 282, "deepinv_dataset_path": 308, "deepinv_datasets_path": [321, 351, 352, 353, 354, 355, 356, 357, 365], "deepinvers": [12, 14, 17, 19, 26, 28, 34, 39, 51, 77, 86, 88, 99, 107, 108, 114, 120, 130, 141, 142, 148, 149, 174, 178, 184, 186, 187, 188, 192, 197, 207, 231, 236, 237, 243, 245, 261, 268, 280, 281, 282, 283, 284, 285, 287, 288, 292, 293, 294, 295, 297, 302, 303, 317, 319, 323, 324, 325, 370, 374, 377, 387, 391], "def": [254, 301, 304, 308, 311, 313, 316, 320, 332, 336, 338, 342, 344, 345, 363, 364, 365, 396], "def_crit": 146, "default": [12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 83, 84, 87, 88, 91, 92, 95, 96, 97, 98, 100, 101, 102, 103, 104, 109, 110, 114, 119, 120, 121, 123, 124, 125, 127, 131, 135, 136, 139, 140, 141, 143, 146, 148, 149, 150, 151, 152, 159, 160, 161, 162, 169, 171, 172, 173, 182, 183, 184, 186, 187, 190, 192, 197, 198, 201, 205, 206, 207, 208, 216, 217, 218, 220, 221, 223, 230, 231, 232, 233, 234, 235, 238, 240, 241, 242, 243, 244, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 282, 287, 288, 292, 294, 295, 296, 297, 301, 307, 315, 331, 377, 380, 391, 394, 395], "default_preprocess": 162, "defin": [33, 34, 36, 37, 40, 41, 42, 45, 46, 47, 49, 50, 51, 61, 67, 80, 86, 89, 94, 99, 109, 110, 112, 113, 114, 122, 123, 125, 126, 127, 128, 130, 135, 136, 144, 145, 150, 151, 152, 153, 154, 156, 158, 169, 170, 171, 173, 174, 176, 177, 178, 181, 183, 184, 186, 187, 188, 190, 191, 192, 195, 197, 198, 199, 201, 203, 208, 212, 213, 214, 217, 240, 250, 251, 252, 254, 260, 268, 297, 301, 307, 311, 312, 314, 315, 316, 320, 322, 326, 331, 332, 339, 344, 350, 351, 352, 353, 354, 356, 357, 375, 379, 380, 382, 385, 386, 387, 390, 392, 396, 397], "definit": [307, 336, 345, 378, 394], "defocu": 100, "defocus_deblur": 100, "deform": 397, "deg2rad": 314, "deg_dir": [308, 313, 326, 327, 328, 335, 338, 361], "degrad": [283, 288, 313, 326, 337, 339, 377, 391], "degre": [91, 208, 214, 262, 264, 268, 269, 270, 271, 272, 314, 317, 322, 332, 351], "dehaz": 381, "delet": 349, "delta": [47, 202, 215, 301, 307], "demo": [14, 17, 26, 66, 71, 199, 280, 301, 304, 307, 308, 309, 313, 314, 315, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 389, 391, 392], "demo_3d_wavelet": [326, 330, 374], "demo_artifact2artifact": [349, 359, 374], "demo_artifact2artifact_mri": 349, "demo_blur_tour": [307, 324, 374], "demo_custom_kernel": [342, 348, 374], "demo_custom_prior": [308, 324, 374], "demo_custom_prior_unfold": [363, 368, 374], "demo_dataset": [309, 324, 374], "demo_ddrm": [343, 348, 374], "demo_deq": [361, 368, 374], "demo_deq0": 361, "demo_diffpir": [344, 348, 374], "demo_dip": [310, 324, 374], "demo_dp": [345, 348, 374], "demo_ei_transform": [350, 359, 374], "demo_epl": [331, 334, 374], "demo_equivariant_imag": [351, 359, 374], "demo_equivariant_imaging0": 351, "demo_fastmri_brain_multicoil": [17, 320], "demo_gan_imag": [304, 306, 374], "demo_hf_dataset": [311, 324, 374], "demo_learned_primal_du": [364, 368, 374], "demo_licp": 363, "demo_licp0": 363, "demo_lidar": [312, 324, 374], "demo_lista": [362, 368, 374], "demo_lista0": 362, "demo_load": [313, 324, 374], "demo_measplit_mnist_tomographi": 355, "demo_microscopy_3d": [314, 324, 374], "demo_moi_ckp_10": 352, "demo_mri_model": [320, 349, 351, 389], "demo_multioperator_imag": [352, 359, 374], "demo_multioperator_imaging0": 352, "demo_multioperator_imaging1": 352, "demo_multioperator_imaging2": 352, "demo_multioperator_imaging3": 352, "demo_multioperator_imaging4": 352, "demo_multioperator_imaging5": 352, "demo_multioperator_imaging6": 352, "demo_multioperator_imaging7": 352, "demo_multioperator_imaging8": 352, "demo_multioperator_imaging9": 352, "demo_n2n": 353, "demo_n2n0": 353, "demo_n2n_denois": [353, 359, 374], "demo_nbu_pansharpen": 319, "demo_patch_priors_ct": [332, 334, 374], "demo_phase_retriev": [315, 324, 374], "demo_phys": [316, 324, 374], "demo_physics_tour": [317, 324, 374], "demo_pnp_custom_optim": [336, 341, 374], "demo_pnp_dpir_deblur": [335, 341, 374], "demo_pnp_mirror_desc": [337, 341, 374], "demo_ptychographi": [318, 324, 374], "demo_r2r": 354, "demo_r2r0": 354, "demo_r2r_denois": [354, 359, 374], "demo_red_gspnp_sr": [338, 341, 374], "demo_remote_sens": [319, 324, 374], "demo_ri_bas": [301, 303, 374], "demo_sampl": [346, 348, 374], "demo_splitting_loss": [355, 359, 374], "demo_sur": [356, 357], "demo_sure0": [356, 357], "demo_sure_denois": [356, 359, 374], "demo_tour_mri": [320, 324, 374], "demo_train_inpaint": [321, 324, 374], "demo_training_inpaint": [321, 365], "demo_training_inpainting0": [321, 365], "demo_transform": [322, 324, 374], "demo_tv_minimis": [327, 330, 374], "demo_unfolded_constrained_lista": [365, 368, 374], "demo_unfolded_cp": 313, "demo_unfolded_cp_ptwt": 313, "demo_unfolded_sr": 366, "demo_unfolded_sr0": 366, "demo_unsur": [357, 359, 374], "demo_vanilla_pnp": [339, 341, 374], "demo_vanilla_unfold": [366, 368, 374], "demo_wavelet_prior": [328, 330, 374], "demonstr": [304, 319, 322, 349, 350, 355, 397], "demosa": 381, "demosaick": 22, "den": 344, "denois": [12, 16, 19, 22, 28, 39, 43, 45, 47, 49, 52, 53, 54, 77, 78, 79, 84, 87, 88, 89, 91, 92, 94, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 114, 119, 120, 122, 130, 138, 141, 142, 143, 144, 145, 146, 148, 149, 174, 177, 179, 180, 183, 184, 185, 189, 192, 193, 194, 209, 210, 250, 251, 252, 254, 255, 256, 257, 274, 275, 276, 280, 282, 284, 285, 287, 288, 290, 292, 309, 310, 313, 320, 325, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 346, 349, 351, 355, 358, 359, 361, 362, 365, 366, 370, 372, 373, 374, 375, 376, 381, 383, 385, 386, 387, 388, 390, 391, 397], "denoised_imag": 384, "denoiser_arg": 91, "denoiser_complex": 315, "denoiser_kwarg": 91, "denoiser_nam": 338, "denoisernam": [86, 91, 386], "denoising_color": 100, "denoising_grai": 100, "denoising_r": 100, "denorm": [139, 140], "denot": [35, 67, 125, 155, 169, 170, 181, 187, 314], "dens": 136, "densiti": [139, 237, 245, 332], "dep": 373, "depend": [17, 47, 56, 57, 58, 87, 114, 208, 243, 252, 254, 301, 332, 342, 370, 376, 385, 387, 390], "deploi": 385, "deprec": [12, 45, 48, 77, 171, 258], "depth": [47, 88, 95, 96, 101, 102, 181, 186, 188, 192, 200, 233, 235, 284, 295, 314, 320, 323, 324, 325, 326, 337, 361, 366, 374], "deq": [12, 19, 28, 39, 51, 86, 88, 120, 130, 138, 141, 142, 170, 174, 180, 184, 189, 192, 273, 275, 284, 287, 288, 292, 325, 367, 368, 374, 385, 390], "deq_build": [361, 390], "der": 164, "derain": [100, 384], "deriv": [53, 397], "descent": [86, 88, 93, 114, 115, 118, 120, 139, 141, 142, 143, 149, 154, 156, 157, 166, 170, 174, 184, 189, 192, 194, 214, 274, 275, 276, 284, 285, 290, 292, 293, 308, 325, 327, 328, 339, 340, 341, 357, 363, 374, 386, 387], "describ": [119, 136, 183, 184, 185, 192, 250, 251, 252, 313, 335, 346, 352, 375, 380, 381, 384], "descript": [103, 104, 148, 236, 237, 245, 349, 370, 379, 382, 385, 386, 388, 389, 392, 393, 397], "design": [47, 52, 53, 54, 86, 315, 320, 384, 393], "desir": [12, 17, 28, 83, 207, 236, 292, 304, 370], "detach": [312, 317, 318, 332, 344, 345], "detail": [5, 6, 7, 10, 12, 17, 32, 35, 38, 41, 43, 44, 45, 53, 54, 70, 84, 87, 88, 89, 92, 101, 102, 103, 104, 110, 114, 119, 122, 148, 149, 164, 165, 171, 172, 179, 182, 184, 185, 190, 192, 208, 229, 234, 235, 240, 244, 257, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 292, 295, 344, 345, 349, 351, 355, 365, 378, 380, 386, 390, 391, 393, 394], "detect": 392, "detector": [208, 217, 314], "detector_radiu": [208, 217], "detector_spac": [208, 217], "determin": [136, 161, 163, 173, 231, 286], "determinist": [184, 192, 268, 375, 376, 380, 396, 397], "dev": [343, 346], "develop": [370, 372, 373], "deviat": [52, 53, 114, 119, 130, 149, 176, 180, 190, 193, 200, 209, 214, 240, 257, 274, 275, 276, 277, 308, 312, 317, 326, 327, 328, 331, 335, 336, 338, 339, 343, 344, 345, 376, 384, 387, 394], "devic": [12, 28, 32, 44, 56, 57, 58, 59, 60, 61, 62, 63, 66, 71, 77, 80, 84, 86, 88, 89, 92, 93, 97, 99, 100, 101, 105, 106, 109, 110, 119, 122, 136, 148, 163, 169, 170, 171, 172, 173, 175, 177, 178, 182, 183, 186, 187, 188, 189, 190, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 208, 211, 216, 217, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 245, 246, 247, 250, 251, 252, 257, 261, 262, 269, 270, 271, 272, 274, 276, 280, 284, 289, 290, 301, 304, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 373, 386, 395, 396], "device_count": 395, "device_id": 395, "df": 38, "df73285e": 335, "dft": 206, "dhariw": 391, "diag": [38, 158, 162, 171, 174, 183, 188, 191, 196, 307, 387], "diagnost": 21, "diagon": [38, 48, 183, 205, 206, 227, 228, 342, 379], "diagonal_mod": 206, "dicom": 21, "dict": [12, 14, 17, 19, 75, 114, 123, 135, 149, 150, 151, 152, 153, 154, 156, 158, 192, 203, 204, 208, 217, 231, 232, 233, 234, 235, 246, 259, 268, 273, 274, 275, 276, 292, 293, 296, 297, 320, 336, 354, 396], "dict_kei": [233, 234, 235, 239, 240, 243, 244, 246, 307, 314], "dict_param": 380, "dictat": [77, 108], "dictionari": [12, 114, 123, 135, 149, 150, 151, 152, 153, 154, 156, 158, 192, 203, 204, 231, 232, 233, 234, 235, 239, 240, 243, 244, 246, 257, 274, 275, 276, 293, 296, 307, 314, 326, 336, 337, 361, 362, 363, 366, 380, 387], "dictionnari": 301, "diff": [240, 343], "diffeomorph": [261, 322, 397], "differ": [9, 12, 16, 23, 41, 42, 43, 47, 55, 77, 85, 102, 103, 104, 146, 172, 190, 230, 240, 250, 251, 264, 279, 304, 307, 308, 310, 314, 315, 331, 338, 344, 345, 352, 353, 362, 363, 366, 380, 387, 392, 393, 394, 397], "differenti": [34, 41, 141, 142, 143, 151, 184, 192, 251, 255, 256, 345, 387], "difficulti": 380, "diffpir": [86, 87, 120, 130, 139, 141, 174, 180, 183, 184, 189, 192, 284, 285, 290, 292, 325, 345, 347, 348, 374, 388], "diffract": [169, 184, 192, 233, 234, 235, 241, 243, 284, 292, 295, 323, 324, 325, 374], "diffraction_gener": [307, 314], "diffractionblur": 307, "diffractionblurgener": [202, 233, 235, 239, 244, 307, 381], "diffractionblurgenerator3d": 314, "diffunet": [344, 345, 384, 391], "diffus": [84, 86, 87, 99, 174, 180, 183, 184, 189, 192, 250, 251, 252, 253, 254, 284, 290, 292, 325, 344, 347, 348, 372, 374, 375, 385], "diffusion_ffhq_10m": 345, "diffusion_step": 344, "diffusionsampl": [343, 388], "digit": 317, "dih": 322, "dihedr": 322, "dilat": [265, 312], "dim": [68, 69, 70, 91, 100, 101, 102, 106, 172, 184, 186, 187, 188, 207, 211, 238, 263, 267, 268, 308, 312, 316, 317, 318, 320, 322, 343, 345, 346, 379], "dim_hid": 78, "dim_input": 78, "dim_mid": 78, "dimens": [9, 17, 30, 31, 32, 44, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 83, 87, 89, 93, 96, 102, 105, 106, 109, 120, 121, 122, 124, 125, 126, 127, 128, 145, 146, 148, 158, 162, 163, 164, 165, 167, 168, 172, 174, 178, 183, 186, 187, 188, 197, 199, 207, 211, 224, 226, 230, 231, 232, 236, 237, 238, 241, 242, 245, 261, 262, 267, 268, 269, 270, 271, 272, 294, 297, 301, 309, 320, 327, 335, 338, 349, 361, 362, 377, 384, 392, 393, 394, 397], "dimension": [208, 237, 245, 379], "dimensionless": [64, 394], "dinv": [45, 47, 48, 49, 97, 114, 123, 130, 145, 250, 252, 276, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 373, 379, 380, 384, 386, 387, 390, 392, 393, 394, 395], "dinv_dataset": 28, "dinv_dataset0": [304, 308, 309, 320, 335, 338, 355], "dinv_dataset_path": [309, 335, 338], "dir": [17, 335, 338, 392], "dirac": 301, "dirac_comb": [202, 307], "dirac_lik": 301, "direct": [77, 97, 150, 172, 196, 233, 235, 268, 314, 349, 383, 387], "directli": [14, 20, 70, 87, 102, 120, 145, 149, 178, 186, 188, 199, 274, 275, 276, 301, 307, 314, 315, 320, 364, 373, 377, 394], "directori": [12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 25, 26, 27, 257, 287, 288, 296, 370, 377, 392], "disabl": [48, 321, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "disast": 319, "discard": [80, 254, 255, 256], "discord": [370, 371], "discourag": 394, "discrep": [114, 376, 386, 387], "discret": [171, 178, 186, 197, 199, 206, 224, 301, 332], "discrimin": [56, 57, 58, 59, 60, 61, 62, 63, 82, 90, 98, 259, 260, 304, 393], "discriminatorloss": [59, 62, 393], "disk": [13, 15, 16, 25, 27, 195, 196, 247, 311, 318], "dispers": 172, "displai": [12, 80, 169, 170, 177, 297, 309, 311, 349, 350], "display_losses_ev": 12, "distanc": [3, 65, 113, 114, 116, 118, 120, 125, 128, 131, 133, 140, 141, 145, 208, 217, 337, 376, 387, 394, 397], "distancenam": [120, 131, 145, 151, 387], "distancename_i": 145, "distancz": 133, "distinct": [114, 149, 274, 275, 276, 313, 362, 363, 364, 365, 366, 387], "distort": [74, 319, 375, 382, 385, 393, 394, 397], "distribut": [45, 47, 89, 99, 122, 140, 144, 176, 179, 182, 183, 206, 232, 237, 238, 250, 252, 253, 254, 255, 256, 314, 332, 342, 343, 346, 354, 356, 357, 375, 376, 379, 382, 388, 393], "distributeddataparallel": 395, "div": [115, 116, 344], "div2k": 392, "div2k_train_hr": 15, "div2k_valid_hr": 15, "diverg": [52, 53, 54, 115, 116, 118, 134, 140, 141, 387], "divers": [304, 392], "divid": [32, 140, 230], "divis": [87, 100, 113], "dncnn": [47, 108, 276, 280, 320, 336, 337, 339, 346, 349, 351, 361, 366, 384, 390, 391, 393], "dncnn_sigma2_lipschitz_color": 346, "dncnn_sigma2_lipschitz_grai": 336, "do": [20, 32, 44, 77, 108, 109, 114, 142, 161, 268, 304, 311, 320, 322, 335, 338, 339, 344, 349, 383, 384, 385, 394, 396], "doc": [12, 47, 70, 75, 91, 178, 187, 261, 311, 322, 350, 351, 370, 380], "doctor": 369, "document": [52, 53, 54, 67, 151, 181, 200, 365, 369, 370, 376, 395], "doe": [20, 28, 34, 35, 38, 41, 47, 68, 69, 70, 74, 79, 88, 124, 155, 179, 184, 192, 238, 261, 273, 274, 276, 304, 326, 355, 361, 380], "doesn": [144, 207, 309, 393], "doi": [88, 208, 217, 314], "domain": [48, 79, 197, 301, 332, 362, 363, 383, 384], "don": [13, 74, 207, 284, 294, 385], "done": [12, 48, 109, 190, 307, 315, 321, 327, 328, 343, 344, 345, 355, 357, 361, 362, 363, 364, 365, 366, 370, 380, 382, 392, 396], "dongdong": 372, "dose": 185, "dossal": 153, "dot": [41, 42, 110, 188, 196, 352], "doubl": [21, 184], "dougla": [149, 152, 274, 275, 276, 366, 387], "down": [97, 268, 338], "download": [13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 84, 87, 88, 89, 92, 100, 101, 102, 122, 250, 252, 287, 288, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 370, 373, 386, 391, 392], "download_and_extract_arch": [304, 350], "download_arch": [14, 17, 320], "download_lipschitz": [88, 336, 346], "downsampl": [84, 92, 97, 107, 184, 190, 212, 213, 215, 317, 319, 332, 338, 361, 366, 380, 381], "downsample_mod": [84, 92], "downscal": 350, "dp": [86, 87, 120, 130, 141, 174, 183, 184, 192, 284, 285, 290, 292, 325, 347, 348, 374, 388], "dpi": [292, 294, 297, 319, 344], "dpir": [19, 28, 84, 86, 114, 120, 130, 138, 141, 142, 149, 170, 174, 180, 184, 189, 192, 257, 284, 287, 288, 325, 340, 341, 374, 386, 391], "dr": [149, 152, 274, 275, 276, 301, 328, 366, 387], "drawback": 395, "drawn": 206, "drive": [23, 332], "driven": [93, 370], "drop": 101, "drop_last": 332, "drop_path_r": [101, 102], "drop_rat": 102, "dropout": 102, "drunet": [92, 119, 250, 252, 315, 335, 343, 361, 366, 384, 391, 395], "drunet_dataset": 311, "drunet_deepinv_gray_finetune_26k": 315, "dst": [171, 224], "dst1": 205, "dtype": [19, 28, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 114, 123, 171, 184, 187, 188, 198, 201, 206, 208, 211, 216, 217, 232, 233, 234, 235, 240, 243, 246, 289, 290, 307, 314, 317, 320, 332, 344, 345, 363], "du": [35, 38], "dual": [12, 39, 51, 86, 88, 95, 96, 100, 103, 104, 114, 120, 124, 126, 130, 135, 138, 141, 142, 149, 151, 159, 160, 174, 180, 184, 189, 192, 201, 208, 274, 276, 284, 285, 290, 292, 293, 325, 340, 341, 365, 367, 368, 374, 386, 387, 390], "dual_pixel_task": 100, "due": [171, 172, 208, 224, 337, 349], "dummi": 380, "dure": [12, 19, 20, 28, 41, 42, 45, 47, 48, 100, 107, 114, 183, 307, 320, 344, 345, 350, 362, 364, 393], "dwt": 109, "dx": [103, 104, 146, 327, 363, 387], "dynam": [14, 32, 44, 48, 105, 106, 178, 207, 230, 237, 238, 242, 301, 307, 317, 381, 392], "dynamic_model": [32, 44, 349], "dynamicmri": [14, 32, 44, 199, 320, 381], "e": [12, 13, 15, 16, 17, 18, 19, 20, 22, 25, 27, 28, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 60, 61, 62, 63, 65, 70, 73, 77, 80, 84, 87, 88, 89, 91, 92, 97, 103, 104, 106, 109, 110, 113, 114, 120, 122, 123, 124, 125, 126, 128, 130, 131, 144, 145, 148, 149, 161, 169, 170, 171, 172, 173, 175, 176, 178, 182, 183, 184, 186, 188, 190, 191, 194, 197, 199, 205, 206, 207, 208, 211, 219, 222, 230, 232, 238, 242, 243, 244, 247, 250, 254, 255, 256, 260, 262, 263, 264, 267, 268, 270, 273, 274, 275, 276, 277, 292, 297, 301, 304, 309, 312, 314, 315, 316, 319, 322, 325, 326, 332, 336, 342, 343, 344, 349, 350, 351, 352, 353, 356, 357, 382, 384, 385, 387, 388, 390, 392, 393, 394, 396, 397], "e2": [108, 320, 389], "each": [12, 16, 17, 20, 21, 23, 26, 28, 32, 33, 36, 37, 43, 44, 46, 49, 53, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 85, 91, 95, 96, 98, 100, 101, 102, 109, 110, 114, 119, 122, 123, 135, 145, 149, 163, 182, 184, 192, 197, 203, 204, 218, 219, 220, 221, 222, 223, 226, 230, 239, 244, 249, 257, 263, 265, 268, 274, 275, 276, 292, 294, 295, 301, 307, 313, 320, 331, 342, 344, 349, 352, 353, 356, 362, 363, 364, 365, 366, 380, 387, 392, 394, 396], "earli": [85, 119, 162, 310, 338, 386], "early_stop": [114, 123, 162, 301, 308, 315, 327, 328, 335, 336, 337, 338, 339], "easi": [320, 342, 372, 380, 392], "easili": [9, 28, 304, 320, 321, 322, 344, 345, 349, 351, 355, 365, 370, 373, 386, 392, 394, 396, 397], "edg": [172, 226], "edinburgh": 369, "edongdongchen": 90, "edsr": 18, "edu": [17, 349], "ee": 22, "effect": [12, 16, 48, 89, 122, 137, 172, 183, 262, 265, 268, 271, 307, 344, 350, 355, 379, 397], "effic": 308, "effici": [45, 48, 100, 167, 171, 172, 174, 178, 184, 192, 201, 208, 268, 342, 378, 379, 380, 391], "effort": 310, "eg": [179, 387], "egg": [325, 373], "ei": [34, 41, 90, 322, 350, 351, 397], "eigen": 244, "eigenvalu": 38, "eigenvector": [158, 162], "eiloss": [41, 319, 320, 322, 350, 351, 393, 397], "either": [14, 17, 20, 26, 28, 30, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 87, 100, 102, 106, 108, 109, 110, 111, 114, 119, 148, 149, 167, 173, 178, 186, 188, 199, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 232, 238, 274, 275, 276, 277, 292, 294, 295, 297, 320, 331, 384, 387, 390, 392, 393, 394, 395, 396], "elaps": [316, 342, 343, 346], "element": [20, 67, 78, 97, 109, 171, 181, 190, 196, 198, 206, 239, 263, 315, 326, 362, 366, 376, 379], "elementari": 377, "elementwis": [53, 54, 183, 356, 357], "ell": [47, 179, 326], "ell_": 127, "ell_0": [109, 110], "ell_1": [34, 40, 41, 42, 43, 51, 103, 109, 110, 126, 128, 129, 386, 387], "ell_2": [55, 119, 122, 124, 125, 126, 127, 130, 131, 184, 345, 365, 387], "ell_p": 67, "els": [12, 114, 124, 125, 188, 250, 252, 273, 274, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 396], "elu": [84, 92], "em": 163, "email": 370, "embed": [87, 102], "embed_dim": 102, "emiss": [233, 301, 314], "emission_wavelength": [234, 235], "emit": 314, "empti": [31, 183, 199, 231, 236, 245, 392], "en": [45, 75, 164, 165, 175, 179, 234, 307, 314, 369], "enabl": [20, 100, 273, 274, 308, 311, 345, 379, 380], "enable_grad": 345, "encapsul": [259, 260], "encod": [84, 100, 172, 197, 301], "encompass": [274, 276], "encount": 107, "end": [12, 89, 98, 108, 114, 122, 124, 125, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 172, 184, 192, 196, 204, 212, 213, 214, 215, 249, 251, 252, 273, 274, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 380, 386, 387, 390], "endmemb": [182, 319], "enforc": [40, 94, 114, 376, 386, 387], "enhanc": [90, 382], "enough": [375, 387], "ensur": [20, 163, 237, 307, 308, 309, 310, 314, 315, 317, 320, 321, 326, 327, 328, 335, 336, 337, 338, 339, 346, 349, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 391], "entir": [268, 384], "entri": [52, 53, 54, 112, 113, 163, 171, 183, 184, 192, 201, 203, 204, 249, 256, 342, 387], "entropi": [118, 134, 337], "enumer": 396, "envelop": [144, 155, 388], "environ": [282, 292], "environment": 319, "ep": [165, 344], "epfl": 369, "epll": [163, 174, 176, 180, 183, 184, 189, 192, 285, 290, 292, 325, 333, 334, 374, 384, 386], "epll_batch_s": 332, "epll_dataload": 332, "epll_max_it": 332, "epll_num_compon": 332, "epll_prior": 332, "eplldenois": [384, 391], "epoch": [12, 33, 36, 37, 46, 47, 50, 258, 260, 304, 319, 320, 321, 332, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 393, 396], "epoch_thresh": 50, "eprint": [118, 337], "eps_anderson_acc": [114, 123], "eps_anderson_acc_backward": 273, "epsilon": [47, 53, 87, 103, 113, 180, 182, 193, 209, 210, 301, 327, 328, 331, 342, 345, 381, 387], "epsilon_adjoint": 103, "epub": 88, "eq": [91, 114, 314, 332, 386, 387], "equal": [32, 44, 57, 109, 144, 181, 183, 190, 201, 208, 211, 236, 237, 294, 322, 355], "equat": [114, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 167, 168, 212, 213, 214, 215, 251, 252, 273, 301, 326, 327, 328, 332, 344, 345, 362, 365, 375, 386, 387, 390], "equilibrium": [12, 19, 28, 39, 51, 86, 88, 120, 130, 138, 141, 142, 170, 174, 180, 184, 189, 192, 273, 275, 284, 287, 288, 292, 325, 367, 368, 372, 374], "equispac": [236, 332], "equispacedmaskgener": [317, 320, 381], "equival": [20, 45, 68, 69, 189, 344, 345, 380], "equivari": [9, 12, 17, 19, 26, 27, 28, 34, 39, 40, 41, 86, 91, 94, 107, 174, 180, 183, 184, 186, 187, 189, 192, 207, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 280, 282, 284, 285, 288, 290, 292, 319, 320, 323, 324, 325, 358, 359, 374, 393, 397], "equivariantdenois": [322, 384, 397], "erga": [319, 394], "ergas_std": 319, "error": [12, 32, 34, 40, 41, 42, 43, 44, 48, 51, 64, 66, 67, 68, 69, 71, 72, 142, 208, 258, 268, 321, 343, 344, 346, 357, 365, 382, 394], "escand": 229, "especi": 393, "esrgan": 90, "esrgandiscrimin": 382, "essenti": 182, "est": [114, 123, 135, 150, 151, 152, 153, 154, 156, 301, 313, 315, 336, 338, 339, 364, 365], "est_sigma": 357, "estim": [28, 47, 52, 53, 54, 70, 71, 76, 77, 87, 89, 99, 105, 108, 113, 122, 135, 139, 150, 151, 152, 153, 154, 156, 162, 163, 174, 181, 182, 184, 252, 254, 256, 257, 304, 315, 319, 320, 331, 332, 336, 344, 345, 356, 357, 373, 382, 384, 386, 387, 391], "estimt": 331, "et": [48, 59, 60, 61, 62, 63, 74, 79, 80, 82, 83, 85, 87, 90, 97, 98, 103, 107, 108, 237, 238, 261, 262, 271, 301, 304, 308, 310, 319, 322, 327, 335, 338, 344, 345, 349, 350, 391], "eta": [45, 100, 114, 168, 184, 192, 250, 251, 255, 256, 342, 345, 346], "eta_0": 342, "eta_backtrack": 114, "etab": [250, 343], "etc": [17, 28, 34, 57, 123, 257, 264, 279, 304, 316, 319, 342, 369, 372, 375, 377, 380, 387, 388, 390, 397], "ethz": 22, "euclidean": [116, 149, 262, 275, 276, 322, 350, 397], "eugenesiow": 27, "eval": [12, 48, 304, 319, 320, 321, 335, 338, 339, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "eval_dataload": [12, 258, 304, 321, 350, 352, 353, 354, 356, 361, 362, 363, 364, 366], "eval_interv": 12, "eval_metr": 12, "eval_mod": [35, 38], "eval_n_sampl": [45, 48, 355], "eval_psnr": 260, "eval_split_input": [48, 355], "eval_split_output": [48, 355], "evalu": [3, 12, 23, 27, 28, 38, 44, 47, 48, 71, 73, 75, 97, 104, 106, 123, 136, 137, 163, 184, 192, 237, 245, 257, 258, 260, 268, 304, 316, 319, 332, 343, 345, 355, 361, 362, 363, 375, 390, 394, 396], "even": [44, 100, 218, 242, 312, 337, 345], "evenli": 28, "eventu": 304, "everi": [12, 85, 260, 315, 345, 396, 397], "everywher": 344, "evid": 342, "evlauaton": 123, "exact": [171, 184, 208, 264, 268, 304, 311, 384, 397], "exactli": [32, 163, 230, 232], "exampl": [13, 15, 16, 18, 20, 21, 22, 25, 36, 37, 38, 46, 47, 50, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 89, 105, 106, 123, 127, 145, 209, 211, 246, 267, 301, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 372, 373, 374, 378, 380, 382, 386, 387, 390, 391, 392, 393, 394, 396, 397], "except": [68, 69, 70, 226, 384], "excit": [233, 314], "exclus": [230, 242], "execut": [303, 306, 324, 330, 334, 341, 348, 359, 360, 368, 374], "exist": [13, 15, 18, 19, 22, 23, 25, 27, 28, 32, 44, 70, 171, 178, 183, 184, 191, 192, 198, 201, 208, 284, 320, 349, 355, 356, 375, 378, 380, 384, 385, 390, 394, 397], "exp": [45, 132, 133, 181, 185, 214, 240, 315, 318, 381, 387], "expand": [268, 307, 314], "expans": [229, 346, 391, 393], "expect": [15, 22, 30, 31, 89, 100, 122, 163, 174, 176, 180, 183, 184, 189, 192, 237, 285, 290, 292, 325, 332, 333, 334, 349, 374], "expens": 171, "experi": [85, 301, 310, 319, 320, 350, 373, 377], "explain": [297, 310, 372], "explan": 394, "explicit": [19, 28, 114, 120, 130, 141, 142, 149, 170, 174, 180, 184, 189, 192, 214, 255, 257, 284, 287, 317, 323, 324, 325, 338, 363, 374, 380, 386, 387], "explicit_prior": [142, 308, 338], "explicitli": 332, "exploit": [315, 316, 342, 353, 354, 356], "explor": [307, 314], "expon": 74, "exponenti": 45, "exponential_famili": 45, "export": 332, "exposit": 20, "express": [174, 314], "ext": 392, "extend": [41, 45, 172, 301, 304, 326, 331, 349, 364, 395], "extens": [17, 28, 287, 288, 297], "extern": 392, "extra": [45, 184, 268, 349, 380], "extract": [14, 20, 89, 97, 122, 294, 304, 315, 318, 319, 320, 331, 332, 350, 377, 379], "extract_loc": [294, 301], "extract_s": [294, 301], "ey": 186, "f": [35, 38, 53, 94, 103, 112, 113, 114, 115, 123, 126, 128, 130, 131, 135, 141, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 174, 178, 184, 186, 188, 196, 197, 199, 205, 206, 207, 215, 252, 254, 268, 274, 275, 276, 277, 301, 307, 310, 312, 314, 315, 316, 318, 320, 322, 327, 328, 332, 336, 337, 339, 342, 343, 344, 346, 357, 386, 387, 390, 392, 394, 396, 397], "f_": [268, 310, 321, 322, 397], "f_0": 114, "f_1": 145, "f_2": 145, "f_fn": [114, 135, 149, 275, 276, 336], "f_k": 123, "f_matern": 240, "f_step": [335, 336, 338, 339, 364], "f_x": 240, "f_y": 240, "face": [311, 345], "facebookresearch": [108, 236], "factor": [45, 64, 81, 97, 102, 124, 130, 173, 177, 184, 190, 212, 213, 215, 231, 253, 262, 265, 269, 272, 301, 317, 319, 331, 338, 349, 362, 363, 366, 380], "factory_kwarg": [233, 235], "fail": 107, "faint": 301, "faintest": 301, "fake": [56, 57, 58, 98], "fake_label": 57, "fall": 116, "fals": [12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 32, 34, 35, 38, 41, 44, 47, 48, 52, 53, 57, 66, 67, 68, 69, 70, 71, 75, 76, 77, 80, 85, 87, 91, 98, 100, 101, 102, 103, 104, 107, 114, 123, 135, 136, 137, 140, 148, 149, 150, 151, 152, 159, 160, 161, 162, 163, 164, 165, 168, 171, 172, 173, 178, 184, 186, 187, 188, 194, 197, 198, 199, 201, 206, 208, 216, 217, 218, 221, 226, 230, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 264, 268, 273, 274, 275, 276, 289, 290, 292, 294, 295, 297, 301, 304, 307, 308, 309, 313, 317, 318, 319, 320, 321, 326, 328, 331, 332, 335, 336, 338, 339, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 387, 392, 396], "famili": [45, 307, 381, 385], "familiar": 370, "fan": [208, 217], "fan_beam": [208, 217], "fan_paramet": [208, 217], "fashion": [171, 183, 191, 198, 201, 232, 238, 279, 365, 390], "fast": [78, 104, 153, 164, 170, 171, 178, 183, 186, 199, 201, 261, 266, 317, 362, 363, 370, 379, 387], "fasten": [308, 309, 321, 335, 336, 338, 339, 353, 354, 356, 357, 361, 362, 363, 365, 366], "faster": [17, 208, 216, 217, 301, 307, 327, 328, 351, 370, 379], "fastmri": [17, 26, 73, 75, 108, 186, 187, 188, 236, 349, 351, 392], "fastmri_brain_singlecoil": 17, "fastmri_knee_singlecoil": 17, "fastmrislicedataset": [14, 26, 186, 187, 188, 320, 349, 351, 392], "fbp": 332, "fbpconvnet": 77, "fc": [234, 235, 244, 307, 314], "fdfd": 206, "featur": [78, 95, 96, 97, 372, 379], "feb": 369, "feed": 80, "feedforward": 100, "fenchel": [151, 336], "fetch": [308, 309, 327, 328, 335, 336, 339], "few": [184, 311, 321, 332, 349, 365], "ffhq": [87, 345, 391], "ffn_expansion_factor": 100, "fft": [169, 170, 187, 197, 206, 219, 220, 222, 223, 301, 307, 314, 379], "fftn": 187, "fid1": 145, "fid2": 145, "fidel": [28, 89, 112, 114, 119, 120, 122, 123, 124, 126, 130, 131, 135, 145, 149, 151, 159, 251, 252, 274, 275, 276, 301, 308, 313, 315, 318, 327, 328, 335, 336, 337, 338, 339, 361, 362, 363, 365, 366, 375, 376, 380, 386, 390], "field": [16, 17, 21, 103, 104, 244, 248, 261], "fifa": [310, 342, 343, 346], "fig": 292, "figsiz": [292, 294, 295, 297, 314, 318, 326, 344], "figur": [100, 292, 294, 295, 297, 312, 344], "file": [12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 27, 28, 47, 89, 100, 122, 136, 171, 183, 191, 198, 201, 287, 288, 289, 290, 297, 303, 306, 311, 324, 330, 334, 341, 348, 359, 360, 368, 370, 374, 377, 392], "file1000005": 17, "file_nam": [26, 283, 285, 313, 319, 320, 349, 351, 352, 353, 354, 355, 356], "file_typ": 287, "filenam": [12, 16, 21, 28, 283, 285, 294, 297], "fill": [281, 291, 298, 299, 300, 320, 349], "filter": [77, 79, 94, 169, 170, 177, 184, 190, 200, 202, 208, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 233, 234, 235, 239, 240, 243, 244, 307, 308, 310, 314, 317, 322, 327, 332, 335, 337, 338, 342, 361, 364, 366, 379, 380, 384, 386], "filter_0": [307, 314], "filter_90": 307, "filter_rgb": 307, "filter_torch": 308, "final": [84, 87, 88, 92, 101, 102, 307, 314, 315, 320, 332, 383, 394], "final_est": 318, "find": [80, 87, 158, 162, 192, 200, 252, 273, 304, 364, 377], "find_nearest": [87, 252, 344], "find_spec": 313, "fine": [304, 332, 349], "finish": [135, 159, 160, 338, 342, 343, 346], "finit": [103, 104, 146, 363, 387], "firm": [35, 391], "firmli": [346, 393], "first": [17, 20, 45, 46, 55, 87, 89, 100, 114, 121, 122, 135, 163, 178, 186, 190, 199, 200, 201, 205, 206, 207, 211, 257, 268, 292, 295, 301, 304, 307, 312, 314, 315, 317, 319, 320, 322, 326, 327, 328, 344, 345, 349, 363, 364, 380, 383, 387], "firstli": 344, "fista": [153, 301, 387], "fit": [80, 163, 332, 396], "fix": [20, 114, 123, 135, 178, 184, 186, 192, 199, 231, 236, 237, 245, 262, 268, 273, 274, 311, 313, 335, 361, 362, 363, 365, 366, 387, 390], "fixed_point": [335, 338, 339], "fixedpoint": [114, 135, 273, 335, 338, 339, 387, 390], "flat": [173, 178, 186, 188, 190, 199, 232, 319, 320], "flatten": [105, 109, 110, 136, 148, 172, 178, 199, 207, 268, 279, 326, 343, 346, 349, 384, 387], "flatten_c": 207, "flatten_coeff": 109, "flatten_video_input": 268, "flavour": [57, 393], "fledg": 343, "flexibl": [292, 384, 396], "flickr": 392, "flickr2k": 18, "flickr2khr": 392, "flip": [91, 171, 263], "float": [12, 17, 19, 26, 34, 35, 38, 41, 42, 43, 45, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 73, 74, 75, 78, 79, 80, 81, 84, 85, 86, 88, 89, 92, 93, 94, 97, 100, 101, 102, 103, 104, 107, 109, 110, 113, 114, 115, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 138, 139, 140, 141, 144, 146, 147, 148, 149, 153, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 178, 179, 180, 181, 183, 184, 185, 192, 193, 194, 197, 199, 200, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 225, 226, 231, 232, 233, 234, 235, 238, 239, 240, 246, 250, 251, 252, 253, 254, 255, 256, 262, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 294, 301, 317, 363, 387], "float16": 87, "float32": [87, 201, 232, 233, 234, 235, 240, 243, 246, 289, 290, 307, 314, 332, 344, 345], "float64": [114, 123, 304, 308, 319, 321, 335, 338, 349, 351, 352, 353, 354, 355, 356, 357, 364, 365], "flow": [136, 332, 387], "fluoresc": [16, 233, 314, 392], "fly": [73, 75, 172, 178, 183, 186, 188, 199, 231, 307, 320, 364], "fmd": 392, "fmt": 277, "fn": [113, 116, 117, 118, 120, 121, 125, 127, 128, 129, 131, 133, 134, 136, 137, 140, 141, 145, 146, 147, 148, 308], "fname": [16, 17], "fne": 35, "fnejacobianspectralnorm": [346, 393], "focu": 314, "folder": [13, 14, 15, 16, 18, 19, 23, 25, 27, 28, 282, 335, 338, 361, 362, 363, 392], "foldernam": [16, 21], "follow": [9, 12, 13, 15, 18, 22, 23, 25, 27, 39, 52, 53, 54, 57, 61, 64, 76, 109, 114, 148, 173, 179, 215, 229, 234, 251, 252, 256, 274, 301, 304, 307, 308, 313, 314, 319, 326, 327, 328, 332, 335, 336, 339, 342, 344, 345, 346, 362, 364, 365, 370, 373, 376, 380, 382, 384, 386, 387, 390, 391, 397], "font": 344, "fontsiz": [292, 295, 326], "forc": [93, 373], "forget": 142, "fork": [261, 370], "form": [109, 110, 114, 123, 124, 126, 132, 133, 135, 170, 171, 172, 184, 192, 208, 231, 274, 316, 321, 326, 343, 350, 363, 370, 378, 380, 386, 387, 390], "formal": [45, 326], "format": [12, 14, 28, 109, 277, 301, 311, 326, 331, 332, 392], "former": [345, 395], "formul": 397, "formula": [47, 56, 58, 141, 144, 171, 177, 184, 192, 208, 345, 346, 388], "forw": [34, 40, 41, 42, 48, 61, 120, 124, 126, 130, 145, 191, 192, 195, 304, 375, 376, 380, 382, 386], "forw_model": 117, "forward": [6, 12, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 70, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 120, 121, 122, 123, 124, 126, 135, 136, 141, 150, 151, 152, 153, 154, 156, 158, 162, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 214, 216, 217, 229, 231, 236, 237, 243, 245, 249, 250, 251, 252, 254, 256, 257, 258, 260, 268, 273, 274, 276, 284, 285, 290, 292, 304, 307, 308, 309, 319, 320, 323, 324, 325, 337, 338, 345, 351, 355, 362, 363, 364, 372, 374, 375, 378, 380, 381, 382, 384, 387, 388, 390, 392, 393, 395, 397], "forward_denois": 87, "forward_diffus": 87, "forward_restorm": 100, "found": [110, 317, 343, 349, 380], "four": 315, "fourier": [178, 186, 188, 196, 197, 199, 206, 301, 308, 317, 320, 379], "fov": [16, 248, 318], "fr": [118, 337], "frac": [35, 38, 45, 47, 48, 52, 53, 54, 73, 91, 103, 104, 113, 114, 116, 120, 124, 126, 127, 128, 130, 131, 141, 144, 145, 147, 161, 162, 167, 171, 174, 184, 185, 192, 193, 194, 198, 208, 214, 240, 251, 252, 255, 256, 273, 301, 308, 326, 327, 328, 342, 344, 345, 346, 355, 356, 357, 362, 363, 381, 386, 388, 390, 394], "fraction": [182, 231, 266, 294], "frame": [20, 44, 105, 199, 207, 297, 320, 349, 392], "framework": [115, 260, 262, 269, 270, 271, 272, 315, 319, 350, 372, 393], "franc": 369, "fraunhoff": [234, 235], "free": [32, 44, 100, 107, 230, 242, 284, 350, 355], "freeli": 345, "freia": 136, "freifeld": 261, "french": 369, "freq": [231, 236], "freq_plot": 12, "frequenc": [12, 97, 231, 234, 235, 236, 237, 245, 301, 307, 314, 336], "fresnel": [234, 235, 307, 314], "frobeniu": 103, "from": [1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 122, 123, 127, 135, 136, 142, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 201, 202, 206, 207, 208, 209, 210, 211, 216, 217, 226, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 250, 251, 252, 256, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 280, 282, 283, 284, 285, 287, 288, 289, 290, 292, 294, 295, 297, 301, 303, 304, 306, 307, 308, 309, 312, 313, 314, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 344, 345, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 372, 373, 374, 375, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397], "from_numpi": [301, 314, 320, 326, 344, 345], "from_torch_complex": 187, "front": [124, 141], "fstep": [364, 387], "fstepcv": 336, "fstephq": 335, "fsteppdnet": 364, "fsteppgd": [338, 339], "full": [14, 18, 26, 32, 34, 41, 42, 44, 47, 48, 186, 188, 262, 269, 270, 272, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 384, 392], "fulli": [26, 48, 78, 93, 107, 108, 320, 343, 344, 351, 352, 353, 354, 356, 357, 384, 392], "fullsampl": 14, "funcanim": 297, "function": [2, 3, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 32, 33, 34, 35, 38, 39, 41, 42, 43, 45, 48, 49, 51, 56, 57, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 85, 86, 87, 88, 91, 93, 97, 99, 104, 107, 108, 113, 114, 115, 120, 121, 122, 123, 124, 125, 127, 130, 131, 135, 136, 137, 139, 140, 141, 142, 145, 148, 149, 150, 151, 152, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 178, 184, 186, 187, 188, 189, 190, 192, 195, 196, 200, 205, 207, 208, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 240, 241, 243, 245, 253, 254, 255, 256, 257, 258, 260, 261, 268, 273, 275, 276, 280, 282, 284, 285, 292, 295, 297, 301, 304, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 332, 335, 336, 338, 344, 345, 350, 352, 357, 361, 362, 363, 364, 365, 366, 374, 375, 376, 382, 384, 385, 387, 390, 393, 394, 397], "functool": 70, "further": [261, 263, 264, 266, 267, 304, 315, 373, 393, 397], "furthermor": [79, 355], "fusion": 74, "futur": [45, 77, 171, 258, 370], "fx": [205, 206], "fx_t": 178, "g": [12, 13, 15, 16, 17, 18, 19, 20, 22, 25, 27, 28, 32, 34, 40, 41, 42, 43, 44, 46, 48, 51, 57, 70, 73, 77, 80, 89, 91, 97, 103, 104, 106, 114, 122, 123, 127, 129, 135, 137, 142, 143, 146, 147, 148, 149, 151, 156, 158, 159, 160, 169, 170, 172, 173, 175, 176, 178, 179, 182, 183, 184, 186, 188, 194, 197, 199, 206, 207, 208, 211, 214, 232, 238, 243, 244, 247, 251, 253, 259, 260, 263, 268, 274, 275, 276, 297, 301, 304, 309, 312, 314, 320, 322, 325, 326, 327, 328, 332, 336, 338, 342, 345, 349, 352, 362, 363, 382, 384, 385, 386, 387, 390, 392, 393, 394, 396, 397], "g1": 239, "g2": 239, "g_": [85, 326, 362, 386, 387], "g_first": [135, 149, 150, 151, 152, 159, 160, 274, 275, 276, 308, 313, 338, 363, 365, 387], "g_i": [42, 268, 352], "g_param": [123, 149, 274, 276, 313, 315, 335, 336, 337, 338, 339, 342, 361, 363, 365, 366, 373, 386, 387, 390], "g_statist": [253, 254, 255, 256], "g_step": [335, 336, 338, 339, 364], "gain": [53, 54, 139, 140, 193, 194, 317, 337, 354, 356], "galleri": [292, 295, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 374], "game": [304, 382, 393], "gamma": [43, 45, 47, 52, 53, 54, 104, 109, 114, 115, 120, 124, 125, 126, 127, 128, 129, 130, 131, 138, 140, 141, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 167, 174, 177, 179, 184, 193, 194, 274, 304, 327, 328, 336, 344, 353, 354, 356, 362, 363, 381, 386, 387, 393], "gamma_backtrack": 114, "gamma_distribut": 179, "gammanois": [45, 47, 354], "gan": [56, 57, 58, 59, 60, 375, 393], "gaofen": [23, 319], "gaussian": [16, 45, 47, 49, 52, 53, 86, 89, 122, 130, 144, 145, 163, 171, 176, 177, 180, 184, 190, 193, 198, 200, 209, 214, 237, 238, 240, 246, 252, 256, 299, 301, 308, 309, 310, 312, 315, 317, 319, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 354, 356, 357, 361, 362, 363, 366, 376, 380, 382, 388, 393], "gaussian_blur": [169, 170, 307, 308, 317, 337, 380, 381], "gaussianmaskgener": [317, 320, 349, 381], "gaussianmixturemodel": [89, 122], "gaussiannois": [45, 47, 49, 145, 176, 190, 250, 252, 308, 309, 310, 316, 317, 322, 326, 327, 328, 331, 335, 336, 338, 339, 342, 343, 344, 346, 354, 355, 357, 361, 364, 366, 373, 380, 381, 386, 392], "gaussiansplittingmaskgener": [355, 381], "gb": 87, "gd": [149, 154, 156, 273, 274, 275, 276, 315, 361, 387], "gdfn": 100, "gditer": 315, "gen": [183, 232, 238], "geneal": 45, "gener": [3, 12, 14, 17, 19, 26, 28, 32, 33, 34, 36, 39, 41, 42, 44, 45, 46, 47, 48, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 74, 77, 80, 82, 83, 85, 86, 89, 90, 99, 103, 107, 122, 124, 126, 135, 136, 151, 171, 172, 174, 176, 178, 179, 180, 183, 184, 185, 186, 188, 189, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 205, 209, 210, 211, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 252, 254, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 282, 284, 301, 311, 313, 317, 319, 320, 322, 325, 326, 331, 332, 336, 337, 338, 339, 345, 349, 350, 355, 358, 359, 364, 370, 374, 375, 378, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 396, 397], "generalis": 103, "generate_coeff": 234, "generate_dataset": [12, 14, 19, 304, 308, 309, 320, 321, 335, 338, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 392, 396], "generate_shift": [195, 196, 318, 381], "generated_dataset_path": 392, "generated_datasets_path": [361, 362, 363, 366], "generator2d": [233, 235], "generator_col": 314, "generator_il": 233, "generatorloss": [60, 61, 63, 393], "generatormixtur": [243, 307, 380], "geometr": [9, 91, 182, 262, 269, 270, 272, 350, 397], "geometri": [208, 217, 350], "geq": [45, 48, 52, 87, 139, 168, 254, 255, 256, 301], "get": [12, 14, 20, 87, 114, 163, 251, 252, 268, 283, 284, 285, 286, 287, 304, 312, 344, 345, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 366, 370, 377], "get_alpha": 344, "get_alpha_beta": 252, "get_alpha_prod": [87, 252], "get_beta": 345, "get_chain": 254, "get_cov": 163, "get_cov_inv_reg": 163, "get_data_hom": [14, 17, 26, 304, 319, 320, 349, 350, 351, 352, 353, 354, 355, 356, 357, 362, 363, 377, 392], "get_degradation_url": [301, 377], "get_dpir_param": 335, "get_freer_gpu": [250, 252, 304, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 326, 327, 328, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 377], "get_gspnp_param": 338, "get_image_url": [14, 17, 66, 71, 287, 301, 307, 315, 317, 318, 320, 322, 331, 336, 337, 339, 344, 345, 350, 377], "get_item": 20, "get_model": 304, "get_noise_schedul": [252, 344], "get_output": [114, 338, 364], "get_overlap_img": [196, 318], "get_param": 268, "get_pdf": [237, 245], "get_sampl": 12, "get_samples_offlin": [12, 396], "get_samples_onlin": [12, 320, 396], "get_structur": 206, "get_timestamp": 377, "get_weight": 163, "get_weights_url": [304, 313, 319, 320, 349, 350, 351, 352, 353, 354, 355, 356], "gfp": 314, "gfz": [197, 301], "gif": 297, "git": [325, 373], "github": [103, 104, 325, 364, 370, 372, 373, 391], "give": [20, 21, 25, 27, 233, 235, 262, 343], "given": [12, 35, 38, 48, 114, 123, 137, 144, 151, 152, 153, 154, 155, 156, 157, 158, 162, 178, 179, 183, 184, 199, 200, 208, 217, 231, 232, 233, 234, 235, 236, 238, 239, 241, 245, 268, 304, 308, 314, 315, 318, 319, 326, 331, 332, 344, 375, 385, 388], "global": [64, 161, 261, 307, 308, 309, 310, 314, 315, 317, 318, 321, 326, 327, 328, 335, 336, 337, 338, 339, 346, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 394], "gmm": [89, 122, 163, 331, 332], "gmm_bsds_color2": 331, "gmm_lodopab_smal": [89, 122], "gmm_lodopab_small2": 332, "go": [17, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "goal": [327, 328], "good": [100, 208, 310, 315, 321, 365, 382, 385], "goodfellowliu": 18, "googl": [325, 332], "gopro": 20, "gp": 240, "gpu": [28, 77, 84, 88, 92, 100, 101, 105, 106, 109, 110, 163, 175, 178, 182, 183, 186, 188, 195, 196, 199, 200, 208, 216, 217, 247, 250, 257, 261, 284, 289, 290, 308, 309, 318, 321, 335, 336, 338, 339, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366, 377], "gpu_numb": 395, "gr2r": [45, 354], "grad": [93, 108, 113, 115, 116, 118, 120, 128, 130, 131, 134, 140, 141, 142, 143, 144, 145, 147, 301, 318, 342, 345, 387], "grad_clip": 12, "grad_conj": [116, 118, 134, 141], "grad_d": [120, 145], "grad_f": 166, "grad_ll": 345, "gradient": [12, 34, 41, 43, 52, 53, 80, 92, 93, 103, 104, 113, 115, 116, 118, 120, 121, 123, 128, 130, 131, 134, 140, 141, 142, 143, 145, 147, 149, 154, 157, 164, 165, 166, 167, 177, 184, 190, 192, 251, 259, 260, 273, 274, 275, 276, 308, 327, 328, 332, 336, 338, 339, 345, 346, 353, 357, 364, 366, 386, 387, 390, 391, 396], "gradient_desc": [192, 387], "gradientstep": [338, 391], "grai": [89, 122, 250, 252, 292, 294, 295, 308, 309, 315, 317, 321, 327, 328, 335, 336, 337, 338, 339, 361, 364, 365, 366], "grayscal": [173, 190, 289, 290, 307, 314, 315, 316, 317, 318, 331, 336, 339, 373, 380, 384, 386, 391], "great": 304, "greater": [48, 153, 235], "green": 175, "grid": [197, 200, 244, 265, 292, 295, 301, 331, 332], "grid_siz": 301, "ground": [12, 14, 16, 17, 19, 20, 32, 33, 44, 51, 59, 60, 72, 114, 123, 230, 242, 257, 260, 273, 274, 304, 310, 319, 320, 321, 327, 328, 331, 332, 336, 337, 339, 342, 343, 344, 345, 346, 349, 350, 355, 361, 362, 363, 365, 366, 382, 385, 393, 396], "groundtruth": [326, 345, 349], "group": [34, 41, 91, 263, 268, 322, 350, 351, 384, 397], "grow": 326, "gsdrunet": [338, 384, 391], "gsdrunet_grayscale_torch": 391, "gsdrunet_torch": 338, "gspnp": 338, "gstep": [364, 387], "gstepcv": 336, "gstephq": 335, "gsteppdnet": 364, "gsteppgd": [338, 339], "gt": [16, 301, 319, 327, 328, 336, 337, 339, 362, 363], "gu": [119, 314, 335], "guess": [80, 162, 164, 165, 168, 192, 252, 301, 315, 357, 387], "guid": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 48, 319, 373, 380], "gz": [22, 27], "h": [14, 17, 30, 31, 32, 44, 45, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 85, 93, 97, 100, 102, 105, 106, 115, 116, 118, 123, 137, 141, 156, 164, 169, 170, 171, 172, 173, 175, 177, 178, 182, 183, 186, 187, 188, 190, 197, 198, 199, 200, 201, 202, 205, 206, 207, 211, 218, 219, 220, 221, 222, 223, 229, 230, 231, 232, 234, 236, 237, 238, 242, 244, 245, 268, 292, 295, 297, 301, 312, 314, 317, 320, 326, 332, 349, 363, 384, 387, 394, 397], "h5": [17, 304, 308, 309, 320, 321, 335, 338, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 392], "h5py": [19, 28, 392], "h_": [141, 314], "h_k": [202, 229], "ha": [13, 15, 16, 18, 22, 25, 27, 43, 48, 84, 87, 109, 114, 123, 141, 165, 169, 170, 171, 172, 177, 178, 183, 186, 187, 190, 199, 201, 202, 208, 212, 213, 218, 220, 221, 222, 223, 229, 232, 250, 251, 292, 294, 295, 301, 304, 308, 309, 310, 312, 316, 319, 320, 321, 335, 337, 338, 343, 344, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 380, 382, 396], "haar": 326, "hackathon": 369, "hadamard": [201, 202, 229, 317, 336], "hal": 151, "half": [89, 119, 122, 149, 155, 226, 252, 274, 275, 276, 280, 331, 332, 335, 349, 351, 361, 387], "hammernik": 108, "hand": [384, 385], "handl": [86, 87, 197, 238, 250, 251, 268], "hard": [109, 110], "hard_threshold_topk": 109, "has_cost": [114, 135, 336], "hash": 243, "hat": [34, 41, 42, 45, 48, 55, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 161, 304, 345, 352, 375, 382, 385, 394], "hauptmann": 364, "have": [12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 38, 48, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 87, 91, 100, 121, 174, 178, 184, 186, 187, 188, 192, 197, 199, 200, 201, 211, 224, 250, 259, 260, 274, 297, 301, 308, 310, 311, 312, 315, 319, 320, 325, 331, 339, 343, 344, 345, 349, 350, 351, 352, 355, 371, 380, 384, 385, 391, 393, 394, 396, 397], "haze": 381, "hazi": 181, "hd5": 28, "hd5dataset": 28, "hdf5": [19, 335, 338, 361, 362, 363, 392], "hdf5dataset": [28, 304, 308, 309, 320, 321, 335, 338, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 392], "head": [100, 102], "head_dim": 102, "height": [24, 29, 87, 95, 96, 122, 172, 178, 186, 187, 196, 199, 208, 233, 235, 266, 292, 295, 326], "help": [301, 318, 346, 370], "helper": [97, 149, 174, 184, 187, 218, 219, 220, 221, 222, 223, 275, 276, 361, 366], "henc": 263, "hendriksen": 48, "here": [14, 21, 74, 110, 116, 185, 191, 301, 304, 307, 308, 309, 310, 311, 313, 314, 316, 317, 319, 320, 325, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 351, 352, 354, 355, 361, 362, 365, 366, 387, 392], "hereaft": 345, "hessian": 103, "hf": 13, "hf_dataset": 311, "hf_train_dataset": 311, "hfdataset": 311, "hh": 218, "hidden": [82, 83, 87, 93, 98, 102, 136, 332, 391], "high": [25, 27, 74, 97, 100, 172, 182, 190, 231, 236, 237, 245, 301, 304, 317, 319, 391, 392], "higher": [70, 74, 75, 179, 233, 234, 235, 301, 315, 394], "highest": 301, "highli": [169, 362, 363], "highpass_kernel_s": 97, "histogram": [200, 226, 379], "histogramdd": [225, 379], "histori": [12, 114, 123, 273], "history_s": [114, 123, 361], "history_size_backward": [273, 361], "ho": [87, 344, 391], "hold": 114, "home": [282, 301, 304, 312, 313, 315, 317, 319, 320, 331, 332, 335, 336, 338, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356], "homographi": [269, 270, 271, 272, 350, 397], "hood": [87, 314, 322], "horizont": [15, 55, 91, 294, 349], "host": [22, 391], "hostedtoolcach": [322, 349], "how": [12, 14, 48, 80, 82, 83, 90, 98, 114, 119, 123, 202, 203, 297, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 326, 327, 328, 331, 335, 336, 337, 339, 342, 343, 344, 345, 346, 349, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 366, 375, 380, 382, 396], "howev": [32, 34, 40, 41, 42, 43, 44, 48, 51, 85, 190, 268, 310, 326, 349, 364, 378, 384, 394, 395], "hp": 123, "hq": [119, 149, 155, 252, 273, 274, 275, 276, 335, 361, 373, 387], "hqsiter": 335, "hr": [18, 22, 97], "hr_shape": 97, "hrm": [74, 97, 319], "hrms_shape": [97, 319], "hspace": 123, "html": [75, 82, 83, 103, 104, 188, 292, 295, 297, 370], "http": [12, 13, 17, 18, 21, 22, 27, 34, 35, 38, 41, 42, 45, 47, 52, 53, 54, 67, 75, 77, 82, 83, 88, 91, 95, 96, 103, 104, 118, 151, 164, 165, 171, 175, 177, 179, 181, 188, 200, 208, 217, 234, 240, 250, 251, 252, 255, 256, 262, 271, 292, 295, 297, 304, 307, 310, 311, 313, 314, 315, 319, 320, 325, 326, 331, 332, 336, 337, 338, 342, 343, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 364, 373, 386, 391], "hu": 182, "hub": [100, 304, 313, 315, 319, 320, 331, 332, 335, 336, 338, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356], "hue": 322, "hug": 311, "hugginfacehub": 391, "huggingfac": [13, 18, 27, 100, 283, 285, 287, 288, 292, 304, 313, 314, 315, 319, 320, 323, 324, 325, 326, 331, 332, 336, 338, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 373, 374, 377, 386, 391], "human": 345, "hurault": [338, 372], "hv110_p0500510000": 16, "hv110_p0500510049": 16, "hybrid": 384, "hyperparamet": [52, 109, 110, 119, 174, 184, 250, 251, 252, 331, 342, 345, 346, 362, 363, 376, 380, 382, 387], "hyperspectr": [172, 182, 319], "hyperspectralunmix": [319, 381], "i": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 250, 251, 252, 254, 255, 256, 257, 258, 260, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 282, 289, 290, 292, 294, 295, 297, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 357, 361, 362, 363, 364, 365, 366, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397], "ib": [309, 321, 327, 335, 365, 366], "iccv": [97, 122], "icm": 369, "icnn": [117, 384], "id": [17, 35, 118, 326, 332, 337], "idea": 370, "ideal": 57, "ident": [35, 52, 114, 123, 158, 162, 174, 176, 184, 192, 254, 255, 256, 268, 317, 331, 336], "identif": 380, "identifi": [16, 21], "idri": 21, "idx": 344, "ie": [205, 239, 380], "ieee": [52, 53, 54, 67, 79, 104, 119, 181, 200, 335, 364], "ieeexplor": [52, 53, 54, 67, 181, 200], "ifft": [108, 187], "ignor": [19, 28, 41, 42, 48, 91, 178, 182, 186, 188, 189, 199, 231, 232, 236, 237, 245, 268, 301, 309, 322, 384], "ii": 301, "iid": [171, 201], "ikono": 23, "ill": [314, 393], "illumin": [233, 314], "illustr": [307, 387], "ilvr_adm": 87, "im": [301, 345], "im_siz": 301, "im_to_kspac": 187, "im_width": 208, "imag": [6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 39, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 119, 120, 122, 124, 127, 130, 136, 137, 138, 141, 142, 145, 146, 148, 149, 161, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 234, 235, 237, 238, 240, 241, 242, 243, 244, 247, 248, 250, 252, 253, 254, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 297, 302, 303, 305, 306, 307, 311, 313, 314, 320, 323, 324, 325, 329, 330, 337, 340, 341, 344, 345, 347, 348, 349, 355, 358, 359, 364, 367, 368, 369, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 393, 394, 397], "image_gdth": 301, "image_srf_2": 25, "image_srf_3": 25, "image_srf_4": 25, "imagefold": [287, 304, 309, 350, 377, 392], "imagenet128": [87, 391], "imageri": [23, 319], "images_contours_and_field": [292, 295], "imagin": 182, "imaginari": [26, 31, 111, 178, 186, 187, 188, 199, 317, 320, 392], "imbalanc": 260, "img": [16, 24, 196, 292, 295, 297, 301, 315, 327, 328, 332, 336, 337, 339, 342, 343, 344, 345, 346], "img1": 292, "img2": 292, "img3": 292, "img_001": 27, "img_001_srf_2_bicub": 25, "img_014_srf_2_srcnn": 25, "img_100": 27, "img_list": [292, 294, 295], "img_rang": 102, "img_shap": [81, 171, 198, 201, 310, 315, 317, 320, 336, 362, 363, 380, 392], "img_siz": [66, 71, 102, 170, 172, 175, 177, 178, 184, 186, 187, 188, 190, 195, 196, 197, 199, 202, 231, 236, 237, 244, 245, 247, 248, 289, 290, 301, 307, 308, 309, 310, 313, 315, 317, 318, 320, 321, 327, 328, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 351, 361, 362, 363, 364, 365, 366, 373, 380, 386], "img_transform": 311, "img_typ": 16, "img_width": [208, 317, 332, 339, 355, 364], "immers": [233, 235, 314], "implement": [20, 32, 44, 45, 48, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 83, 86, 87, 88, 90, 91, 93, 98, 102, 104, 106, 108, 119, 120, 123, 130, 131, 135, 139, 141, 142, 151, 163, 167, 168, 169, 172, 174, 180, 183, 184, 189, 192, 197, 202, 207, 225, 226, 227, 228, 231, 236, 245, 250, 251, 252, 261, 268, 284, 285, 290, 292, 301, 304, 307, 314, 316, 317, 318, 320, 322, 325, 326, 336, 347, 348, 349, 350, 355, 362, 363, 364, 374, 375, 379, 382, 387, 393, 394, 396, 397], "implicit": [142, 273, 310, 387, 390], "implicitli": [103, 104, 339, 386, 387], "import": [13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 32, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 105, 106, 114, 123, 127, 130, 145, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 188, 190, 193, 194, 199, 201, 202, 208, 209, 210, 211, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 250, 252, 260, 262, 268, 269, 270, 271, 272, 276, 292, 295, 297, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 373, 377, 379, 380, 384, 386, 387, 390, 392, 393, 394, 395, 397], "importlib": 313, "impos": 350, "improv": [44, 52, 77, 242, 304, 310, 315, 320, 355, 364, 375], "impuls": [200, 202, 307, 312], "in_chan": 102, "in_channel": [84, 87, 88, 92, 93, 95, 96, 100, 107, 276, 304, 315, 320, 321, 336, 339, 350, 352, 353, 354, 355, 356, 357], "in_nc": 101, "in_shap": [195, 318], "in_siz": [81, 208, 216, 217, 310], "includ": [7, 12, 17, 19, 28, 32, 34, 44, 45, 48, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 99, 163, 173, 191, 205, 206, 220, 223, 226, 230, 232, 242, 257, 262, 268, 269, 270, 272, 315, 318, 319, 320, 331, 344, 350, 354, 369, 380, 382, 386, 388, 392, 394], "incom": [273, 390], "incomplet": [12, 19, 28, 34, 39, 40, 41, 42, 77, 86, 99, 107, 167, 174, 183, 184, 192, 282, 284, 310, 325, 343, 346, 358, 359, 374, 393], "incorpor": [178, 183, 184, 192, 197, 301, 315], "increas": [48, 89, 107, 122, 301, 304, 307, 326, 349], "inde": [184, 339], "independ": [17, 26, 105, 171, 198, 201, 240, 265, 384, 393], "index": [12, 17, 20, 49, 74, 75, 163, 204, 233, 235, 268, 284, 288, 297, 314, 322, 327, 335, 338, 361, 380], "index_select": 345, "indic": [17, 20, 109, 123, 124, 125, 148, 234, 254, 317, 365, 387], "indicatorl2": [313, 365, 387], "individu": [12, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 292, 297], "induc": [20, 301, 328], "induct": 382, "inexact": 53, "inf_lr": 80, "inf_max_it": 80, "inf_progress_bar": 80, "inf_tol": [80, 304], "inf_z": [144, 388], "infer": [12, 47, 77, 80, 108, 216, 217, 226, 304, 382], "inferno": 301, "infinit": [273, 390], "info": [261, 335, 384], "inform": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 28, 75, 99, 114, 161, 162, 163, 164, 165, 168, 184, 192, 203, 204, 257, 301, 315, 318, 319, 321, 351, 352, 353, 354, 356, 357, 365, 384, 393], "infti": [124, 125, 148, 365], "inherit": [70, 86, 99, 178, 186, 199, 307, 308, 316, 338, 342, 364, 378, 380, 385, 387, 388, 393, 394, 395, 397], "init": [12, 42, 164, 165, 167, 297, 313, 357], "init_anderson_acceler": 123, "init_iterate_fn": [114, 123], "init_metrics_fn": [114, 123], "init_param": [296, 362, 363, 366], "initi": [12, 52, 53, 80, 84, 85, 87, 88, 92, 101, 102, 114, 122, 123, 136, 162, 163, 164, 165, 168, 189, 191, 192, 243, 252, 296, 313, 318, 326, 332, 338, 339, 344, 345, 349, 351, 352, 353, 354, 356, 357, 362, 363, 365, 366, 381, 387], "initialis": [17, 48, 123, 173, 178, 184, 186, 199], "inner": [146, 255], "inner_it": 255, "inpaint": [12, 19, 28, 39, 48, 51, 86, 109, 114, 120, 122, 124, 130, 138, 141, 142, 148, 149, 174, 175, 176, 180, 184, 189, 192, 232, 238, 250, 252, 257, 274, 276, 284, 285, 287, 290, 292, 293, 310, 313, 321, 322, 325, 329, 330, 333, 334, 343, 344, 345, 346, 349, 350, 352, 367, 368, 372, 373, 374, 380, 381, 386, 387, 390], "input": [9, 12, 32, 33, 35, 38, 39, 44, 45, 48, 52, 53, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 111, 118, 123, 134, 135, 136, 144, 149, 150, 151, 152, 153, 154, 156, 158, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 186, 187, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 211, 216, 217, 224, 230, 232, 238, 242, 247, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 304, 308, 310, 312, 317, 319, 326, 327, 328, 335, 336, 337, 338, 339, 344, 345, 355, 364, 366, 379, 380, 381, 382, 384, 387, 397], "input_mask": [230, 232, 238, 242, 349], "input_nc": 98, "input_resolut": 101, "input_s": [85, 211, 310], "input_shap": [90, 205, 206], "inria": 369, "inscrib": 208, "inset": [294, 377], "inset_loc": [294, 301], "inset_s": [294, 301], "insid": [3, 12, 14, 100, 125, 208, 254, 314, 320, 357, 394], "inspir": [77, 123, 252], "instal": [21, 79, 109, 110, 188, 261, 297, 301, 325, 349, 370, 373, 397], "instanc": [114, 123, 135, 142, 149, 150, 151, 152, 153, 154, 156, 158, 162, 258, 274, 275, 276, 307, 308, 314, 336, 344, 363, 364, 387, 395, 396], "instanti": [13, 15, 16, 17, 18, 21, 22, 23, 25, 27, 114, 202, 239, 301, 307, 308, 314, 315, 327, 328, 335, 336, 338, 339, 380], "instead": [20, 35, 45, 48, 77, 104, 155, 169, 171, 188, 198, 225, 226, 230, 242, 258, 261, 301, 304, 326, 364, 382, 395], "institut": 369, "instruct": 100, "int": [12, 14, 16, 17, 20, 24, 26, 28, 29, 32, 33, 35, 36, 37, 38, 44, 45, 46, 47, 48, 50, 64, 67, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 107, 108, 109, 110, 114, 122, 123, 124, 126, 127, 136, 137, 141, 146, 148, 149, 162, 163, 164, 165, 166, 167, 168, 171, 173, 177, 180, 182, 184, 185, 188, 189, 190, 192, 193, 194, 196, 197, 198, 200, 201, 204, 207, 208, 209, 210, 212, 213, 215, 216, 217, 225, 226, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 280, 288, 289, 290, 292, 294, 295, 297, 301, 315, 317, 321, 342, 344, 346, 351, 352, 353, 354, 356, 361, 364, 365, 366, 396], "intanc": 156, "integ": [188, 254, 255, 256, 264, 266, 320, 350], "integr": [15, 22, 208, 229, 357, 397], "intend": [187, 349], "intens": [181, 196, 200, 312, 314, 379], "interact": 297, "interest": [114, 268, 301, 336, 344], "interfac": [20, 342, 387], "interferometr": [114, 120, 130, 141, 142, 148, 149, 184, 192, 197, 281, 283, 285, 292, 293, 294, 302, 303, 325, 374, 381], "interferometri": [197, 301], "interleavedepochlossschedul": 393, "interleavedlossschedul": 393, "intermedi": [78, 107, 338], "intern": [141, 163, 312, 322, 338, 369], "internet": [13, 15, 16, 18, 22, 23, 25, 26, 27], "interp_point": [197, 301], "interpol": [35, 197, 208, 244, 262, 264, 265, 268, 269, 270, 271, 272, 292, 295, 301, 307, 314, 317, 319, 338, 345, 379, 397], "interpolation_method": [292, 295], "interpolation_mod": 264, "interpolationmod": 264, "interpret": [100, 107, 109, 185], "interv": [148, 206, 246, 256], "intial": 315, "intiliaz": 151, "intract": 345, "introduc": [45, 52, 53, 79, 81, 88, 101, 102, 230, 255, 301, 345, 349, 357], "introduct": [4, 6, 375], "inv": 332, "invari": [34, 41, 124, 350, 393], "invers": [12, 19, 23, 27, 28, 34, 39, 40, 41, 42, 47, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 83, 86, 88, 90, 98, 99, 107, 114, 115, 118, 120, 136, 139, 141, 142, 143, 149, 163, 167, 169, 170, 174, 178, 181, 182, 183, 184, 186, 187, 189, 191, 192, 194, 198, 199, 205, 206, 208, 214, 216, 240, 241, 243, 250, 259, 260, 261, 268, 273, 282, 284, 285, 290, 292, 293, 297, 301, 305, 306, 307, 309, 310, 316, 317, 319, 320, 321, 322, 325, 331, 332, 338, 340, 341, 342, 343, 346, 351, 352, 355, 356, 357, 361, 370, 372, 374, 375, 376, 377, 379, 380, 382, 383, 385, 386, 389, 390, 393, 394, 397], "inversef": [12, 48, 77, 99, 251, 355, 383, 385], "invert": [70, 74, 75, 136, 150, 151, 152, 268, 322, 332, 397], "invert_metr": [70, 74, 75], "invert_param": 268, "investig": 301, "involv": [103, 104, 350, 362], "io": [103, 104, 364], "iota_": [124, 125, 148, 365], "ip": [308, 315, 335, 336, 338, 339], "ipynb": [301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "ipython": [297, 349], "iradon": 379, "irf": 312, "irf_sigma": 312, "is_avail": [250, 252, 284, 301, 304, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "is_standard_deblurring_network": 100, "is_standard_denoising_network": 100, "is_standard_deraining_network": 100, "is_valid_fil": 392, "isn": 22, "isola": 98, "isomorph": 271, "isotrop": [104, 214, 265], "issu": [268, 342, 370, 371], "itakura": 118, "itali": 369, "item": [20, 32, 44, 45, 47, 48, 201, 204, 301, 310, 314, 315, 326, 327, 328, 331, 332, 336, 337, 339, 342, 343, 346, 357, 387, 396], "iter": [12, 14, 17, 19, 21, 28, 32, 35, 38, 39, 51, 80, 85, 103, 104, 108, 110, 114, 119, 120, 123, 124, 126, 130, 135, 141, 142, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 184, 192, 251, 252, 253, 254, 255, 256, 257, 260, 273, 274, 275, 276, 282, 284, 292, 296, 301, 308, 309, 310, 311, 313, 315, 316, 318, 320, 325, 327, 328, 335, 336, 337, 338, 339, 343, 344, 345, 346, 349, 350, 355, 361, 365, 366, 367, 368, 373, 374, 375, 377, 385, 390, 392, 396], "iterable_dataset": 311, "iterabledataset": 311, "iteratbl": 311, "iterator_param": 254, "ith": [89, 122], "its": [12, 15, 16, 20, 48, 93, 103, 104, 114, 115, 136, 141, 163, 170, 171, 173, 174, 186, 189, 201, 206, 226, 232, 240, 243, 268, 297, 313, 315, 316, 327, 328, 336, 344, 355, 362, 363, 364, 365, 375, 380, 387, 393, 397], "itself": 301, "iwt": 109, "j": [48, 103, 104, 114, 148, 164, 171, 198, 200, 312, 345, 362, 364], "jac_inv": 332, "jacobian": [35, 38, 103, 120, 136, 145, 184, 191, 192, 273, 361, 393], "jacobian_fre": [273, 361], "jacobianspectralnorm": [35, 393], "jbhuang0604": 25, "jingyunliang": 102, "jitter": 322, "jmo": 314, "join": [371, 397], "joint": 173, "jointli": [108, 260, 319, 366, 393], "jona": 364, "journal": 229, "jpeg": [22, 307, 336], "jpg": [66, 71, 310, 322, 342, 343, 346, 350], "json": 13, "julian": 372, "june": 369, "jupyt": [301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "just": [12, 23, 176, 184, 301, 307, 319, 332], "jychoi118": 87, "k": [17, 32, 44, 103, 108, 109, 110, 114, 119, 123, 135, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 197, 199, 202, 207, 229, 231, 236, 237, 240, 245, 255, 256, 274, 301, 313, 317, 320, 335, 336, 337, 342, 346, 349, 362, 363, 364, 365, 381, 386, 387, 390, 392, 396], "k_adjoint": [313, 364, 365], "k_oversampl": [197, 301], "kaiser": [197, 215], "kappa": 380, "kargs_model": 35, "kb": [235, 314], "kbnufft": 301, "kbnufftadjoint": 301, "keep": [17, 109, 171, 183, 184, 189, 192, 201, 254, 255, 256, 268, 277, 321, 345, 361, 365, 377, 394], "keep_time_dim": [199, 349], "kei": [12, 102, 114, 208, 217, 231, 232, 233, 234, 235, 239, 240, 243, 244, 246, 257, 259, 274, 276, 307, 311, 314, 336, 345, 380, 387], "kept": [104, 109, 110, 232, 238], "kernel": [93, 94, 97, 144, 169, 197, 218, 219, 220, 221, 222, 223, 234, 235, 254, 307, 308, 312, 314, 317, 327, 335, 338, 342, 344, 361, 379, 380, 388], "kernel_dim": 93, "kernel_index": [327, 335, 338, 361], "kernel_s": [94, 240, 241], "kernel_torch": [327, 335, 338, 361], "kernels_12": 338, "keyword": [35, 114, 123, 159, 160, 167, 225, 258, 268, 274, 297], "kindli": 301, "kl": 332, "knee": [17, 26, 320, 349, 392], "knee_dataset": 320, "knowledg": [28, 74, 354, 356, 375, 386], "known": [128, 132, 133, 268, 343], "kohler": 392, "kornia": [262, 269, 270, 271, 272, 397], "kr": 18, "kspace": [14, 17, 108, 178, 186, 187, 188, 320], "kspace_shap": 320, "kspace_to_im": 187, "kullback": [134, 140, 332], "kunisch": 103, "kupyn": [59, 60, 98, 304], "kutta": [255, 388], "kwarg": [12, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 85, 86, 91, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 113, 114, 115, 116, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 273, 274, 275, 276, 297, 301, 308, 316, 320, 322, 336, 338, 363, 364], "kwargs_model": 35, "kx": 151, "k\u00f6hler": 20, "l": [32, 36, 37, 44, 45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 84, 92, 94, 103, 104, 119, 179, 196, 215, 240, 255, 256, 304, 307, 326, 332, 335, 352, 354, 382, 393, 394, 396], "l1": [65, 100, 129, 318, 387], "l12prior": 387, "l1l2": 394, "l1loss": [68, 363, 394], "l1prior": [123, 387], "l2": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 89, 100, 114, 116, 123, 127, 141, 145, 252, 275, 276, 301, 308, 315, 327, 328, 335, 336, 338, 339, 342, 344, 345, 346, 361, 362, 363, 366, 373, 386, 387, 390], "l2_axi": 127, "l2_loss": 345, "l2_prior": 308, "l2prior": 308, "l3": [67, 100], "l4": 100, "l_1": 65, "l_2": 65, "l_p": 67, "label": [56, 57, 58, 87, 114, 294, 304, 309, 332, 386, 387, 392], "label_loc": 294, "lam": 332, "lam_epl": 332, "lam_patchnr": 332, "lamb": [141, 158, 162, 301, 313, 327, 328, 338, 362, 363], "lambd": 387, "lambda": [52, 109, 110, 114, 123, 135, 141, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 174, 184, 192, 211, 243, 252, 253, 254, 255, 256, 268, 274, 275, 276, 301, 304, 308, 313, 314, 315, 319, 320, 322, 326, 327, 328, 332, 336, 338, 339, 349, 351, 352, 353, 354, 355, 356, 362, 363, 366, 376, 382, 386, 387, 394, 397], "lambda_": [252, 314, 326, 344, 362], "lambda_1": 103, "lambda_2": 103, "lambda_col": [233, 314], "lambda_i": 326, "lambda_il": [233, 314], "langevin": [255, 256, 342, 346, 372, 388], "langl": [115, 116, 141], "larg": [22, 23, 52, 85, 87, 89, 103, 122, 148, 169, 171, 301, 304, 315, 316, 319, 372, 375, 379, 380, 385, 392], "large_model": [87, 344, 345], "larger": [28, 87, 167, 185, 243, 255, 256, 349, 350, 351, 361, 366], "largest": [38, 109, 114], "laser": 233, "last": [12, 20, 53, 123, 183, 186, 188, 224, 226, 307, 344], "last_batch": 12, "latent": [78, 80, 83, 304, 332, 382], "later": [45, 233, 315, 344, 345], "latest": 373, "latter": [28, 345], "laurent": [103, 104], "law": 171, "lax": 14, "layer": [78, 81, 82, 83, 84, 87, 88, 93, 95, 96, 98, 100, 101, 102, 107, 205, 206, 280, 310, 320, 364, 366, 390, 391], "layernorm": [100, 102], "layernorm_typ": 100, "layout": [292, 295], "lcondat": [103, 104], "ldot": [199, 212, 213, 326], "lead": [208, 217, 271, 372], "leaki": 194, "leakyrelu": [84, 92], "learn": [4, 12, 17, 19, 26, 28, 32, 34, 39, 40, 42, 44, 47, 48, 51, 52, 53, 66, 77, 80, 82, 83, 85, 86, 95, 96, 99, 107, 108, 119, 120, 122, 130, 135, 141, 142, 148, 151, 157, 159, 160, 171, 173, 174, 180, 183, 184, 186, 187, 189, 192, 207, 208, 230, 232, 238, 242, 257, 260, 264, 265, 268, 274, 276, 280, 282, 284, 288, 292, 296, 304, 306, 308, 310, 319, 320, 321, 322, 331, 332, 335, 338, 349, 350, 353, 354, 356, 359, 361, 365, 366, 367, 368, 369, 370, 374, 375, 382, 383, 385, 391, 397], "learnabl": [102, 107, 274, 362, 363, 365, 390], "learning_r": [85, 310, 321, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "learning_std": [304, 308, 319, 321, 335, 338, 349, 351, 352, 353, 354, 355, 356, 357, 364, 365], "learnt": 28, "least": [12, 57, 167, 168, 171, 184, 192, 208, 321, 349, 365, 387], "least_squar": [171, 184, 192, 208], "leclair": 338, "left": [45, 52, 53, 54, 59, 60, 61, 62, 63, 115, 120, 124, 125, 144, 145, 148, 164, 171, 184, 192, 195, 196, 198, 214, 240, 252, 256, 273, 294, 304, 314, 342, 344, 346, 352, 356, 357, 362, 382, 387, 388, 390, 394], "left_precon": 164, "leftarrow": 114, "legendr": [151, 336], "leibler": [134, 140, 332], "len": [13, 15, 16, 17, 18, 22, 23, 25, 26, 27, 233, 234, 235, 263, 268, 301, 307, 314, 326, 344, 380], "lenght": 366, "length": [32, 80, 114, 173, 215, 230, 240, 292, 294, 295, 297, 307, 312, 313, 362, 363, 364, 365, 366], "leq": [124, 125, 151, 153, 157, 158, 167, 212, 213, 215, 344, 387], "lesion": 21, "less": [233, 238, 268, 393], "let": [91, 199, 207, 264, 307, 311, 314, 320, 322, 326, 344, 345, 349], "level": [16, 47, 52, 53, 78, 79, 84, 86, 87, 88, 91, 94, 100, 101, 102, 107, 109, 110, 119, 130, 138, 139, 140, 144, 148, 179, 180, 185, 192, 194, 200, 210, 243, 246, 250, 251, 252, 255, 256, 301, 310, 312, 313, 317, 326, 328, 331, 336, 337, 339, 342, 343, 344, 345, 346, 361, 362, 365, 366, 384, 387, 388, 391], "leverag": [38, 174, 178, 273, 375, 385, 388, 390, 393], "levin": [308, 327, 335, 338], "levin09": [327, 335, 361], "lexicograph": 20, "lhood": 342, "lib": [322, 349], "libcpab": 261, "librari": [12, 79, 136, 188, 257, 258, 304, 314, 318, 319, 344, 361, 363, 364, 369, 370, 375, 384, 385, 397], "licenc": 21, "lidar": [192, 200, 284, 323, 324, 325, 374, 381], "lidc": 21, "lidcidrislicedataset": 392, "light": [20, 181, 182, 233, 235, 314], "lightn": 75, "lightweight": 320, "like": [46, 84, 103, 163, 182, 238, 268, 301, 304, 318, 349, 379, 392, 394], "likelihood": [89, 118, 122, 130, 132, 133, 136, 137, 139, 140, 163, 174, 176, 180, 183, 184, 189, 192, 254, 255, 256, 285, 290, 292, 325, 332, 333, 334, 337, 342, 345, 374, 376, 386, 388], "limit": [12, 24, 89, 100, 120, 122, 132, 136, 137, 141, 142, 174, 176, 184, 185, 189, 192, 208, 210, 234, 235, 264, 292, 311, 325, 326, 331, 333, 334, 350, 374, 388, 391], "linalg": 326, "line": [14, 183, 199, 208, 231, 236, 237, 245, 325, 349, 380, 386, 387, 397], "linear": [12, 52, 55, 89, 103, 104, 112, 122, 123, 146, 158, 162, 164, 165, 167, 168, 171, 172, 174, 176, 178, 181, 182, 183, 184, 186, 188, 191, 192, 195, 196, 201, 203, 204, 205, 206, 208, 211, 244, 256, 301, 310, 317, 319, 321, 322, 327, 328, 332, 336, 337, 339, 342, 343, 344, 345, 346, 361, 362, 363, 365, 366, 375, 378, 383, 387, 388], "linearli": [292, 295], "linearphys": [52, 89, 114, 122, 123, 169, 171, 172, 174, 177, 182, 183, 188, 191, 196, 197, 202, 203, 205, 208, 252, 256, 260, 301, 316, 378, 380], "linefmt": 312, "linewidth": 301, "link": [87, 254, 255, 256, 310, 325, 344, 376], "linspac": [208, 250, 332, 343, 344, 345], "lionel": [310, 342, 343, 346], "lip": [153, 157, 158], "lipschitz": [103, 104, 139, 140, 184, 255, 256, 336, 391, 393], "lipschitzian": [103, 104], "list": [12, 16, 17, 20, 28, 33, 36, 37, 41, 42, 46, 49, 50, 84, 85, 89, 91, 92, 100, 101, 109, 110, 114, 122, 145, 148, 149, 164, 165, 167, 168, 171, 173, 181, 190, 191, 192, 203, 204, 205, 208, 226, 233, 234, 235, 239, 250, 257, 258, 260, 263, 265, 274, 275, 276, 279, 292, 294, 295, 297, 313, 317, 322, 344, 345, 350, 351, 352, 362, 363, 365, 366, 377, 381, 382, 384, 387, 388, 395], "list_denois": 344, "list_imag": 326, "list_noisi": 344, "list_param": [233, 234, 235, 307, 314], "list_prox": [326, 344], "list_rhos_algo": 344, "list_sigmas_algo": 344, "list_wv": [110, 326], "lista": [12, 19, 28, 39, 51, 120, 130, 141, 142, 148, 157, 171, 184, 192, 274, 276, 282, 284, 292, 296, 325, 363, 365, 367, 368, 374], "listtensor": 181, "literatur": 389, "liu": 349, "live": [208, 297, 339], "liver": [44, 242], "ll": [301, 326, 345], "lmm": 182, "load": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 86, 100, 109, 120, 124, 138, 141, 142, 171, 174, 183, 184, 186, 188, 191, 192, 198, 201, 259, 274, 276, 284, 287, 288, 289, 290, 301, 304, 307, 314, 322, 323, 324, 325, 344, 355, 374, 375, 377, 380, 386, 392, 396], "load_dataset": [308, 309, 311, 321, 327, 328, 335, 338, 361, 365, 366, 377], "load_dataset_hf": 311, "load_degrad": [327, 328, 335, 338, 351, 361, 377], "load_imag": [375, 377], "load_metadata_from_cach": [14, 17], "load_model": 12, "load_np_url": [301, 314, 320, 326], "load_physics_generator_param": [19, 320, 392], "load_state_dict": [163, 171, 183, 191, 198, 201, 259, 304, 313, 319, 320, 349, 350, 351, 352, 353, 354, 355, 356, 365], "load_state_dict_from_url": [304, 313, 319, 320, 349, 350, 351, 352, 353, 354, 355, 356], "load_torch_url": 332, "load_url_imag": [66, 71, 307, 310, 315, 317, 318, 322, 331, 336, 337, 339, 342, 343, 344, 345, 346, 350, 373, 377, 386], "loader": [12, 257, 258, 362, 363, 392], "loc": [294, 313, 319, 320, 349, 351, 352, 353, 354, 355, 356], "local": [17, 26, 100, 310, 353, 370, 377, 392], "locat": [178, 186, 197, 199, 220, 292, 294, 301, 312], "lodopab": [185, 332], "log": [12, 47, 89, 118, 122, 130, 132, 133, 134, 136, 137, 139, 140, 144, 162, 163, 174, 176, 180, 183, 184, 185, 189, 192, 201, 251, 254, 255, 256, 260, 285, 290, 292, 301, 308, 315, 318, 325, 327, 328, 332, 333, 334, 337, 339, 342, 345, 346, 361, 362, 363, 364, 366, 374, 381, 386, 387, 388, 391, 396], "log10": 301, "log_": [73, 394], "log_metr": 162, "log_metrics_wandb": 12, "log_raw_metr": 12, "log_train_batch": 12, "logan": 315, "logarithm": 301, "logpoisson": 185, "logpoissonlikelihood": [332, 387], "logpoissonnois": [132, 133, 332, 381], "logs_total_loss_ev": [332, 396], "logs_total_loss_train": [332, 396], "logscal": 301, "long": [12, 14, 309, 345, 392], "longer": 304, "look": [382, 390], "loop": [123, 395, 396], "loop_random_online_phys": [12, 320, 396], "loos": 108, "loss": [0, 3, 9, 12, 19, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 99, 107, 112, 113, 130, 174, 176, 179, 180, 184, 189, 192, 194, 230, 232, 238, 242, 257, 258, 260, 282, 284, 304, 310, 315, 318, 319, 320, 321, 322, 325, 331, 332, 346, 350, 351, 352, 358, 359, 361, 362, 363, 364, 365, 366, 372, 374, 375, 380, 382, 385, 394, 396, 397], "loss1": 49, "loss2": 49, "loss_d": 304, "loss_g": 304, "loss_hist": [315, 318], "loss_tot": [332, 396], "losses_d": [260, 304], "lossi": [62, 63, 80, 304], "lot": 20, "low": [74, 97, 144, 177, 185, 190, 225, 226, 231, 236, 237, 245, 301, 317, 319, 336, 385, 388], "lower": [70, 185, 211, 225, 226, 349], "lower_bett": 70, "lp": 67, "lpip": [335, 394], "lpips_std": 335, "lpips_v0": 335, "lpnorm": 394, "lprior": 342, "lr": [18, 97, 100, 304, 310, 318, 321, 332, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "lr_d": 304, "lr_g": 304, "lr_schedul": [12, 304, 321, 351, 352, 353, 354, 356, 361, 364, 365, 366], "lr_variational_problem": 332, "lrm": [74, 319], "lrschedul": 12, "lsdir": 22, "lsdirhr": 392, "lsgan": [57, 393], "lsqr": [167, 171, 184, 192, 208], "lung": [21, 392], "luxembourg": 369, "lvert": [61, 304, 382], "lyon": 369, "m": [23, 48, 52, 53, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 97, 104, 112, 113, 158, 162, 168, 171, 172, 174, 182, 183, 184, 186, 190, 192, 197, 198, 199, 201, 232, 238, 255, 301, 314, 315, 317, 319, 336, 349, 355, 356, 357, 362, 363, 370, 376, 380, 387, 392, 394], "m1": 349, "m2": 349, "m_": 48, "m_1": 48, "m_2": [48, 355], "m_i": 48, "m_t": [178, 199], "machin": [369, 370], "made": 397, "mae": [65, 394], "mag": [178, 186], "magnet": [44, 178, 186, 199, 242, 320, 381], "magnitud": [17, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 161, 178, 186, 187, 292, 295, 320], "mai": [48, 85, 107, 114, 135, 194, 261, 268, 304, 310, 312, 315, 344, 382, 387], "main": [18, 27, 304, 313, 314, 315, 316, 319, 320, 326, 331, 332, 336, 338, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 370, 373, 377, 386, 391, 393], "maintain": [163, 261, 397], "make": [12, 109, 169, 315, 322, 346, 370, 384, 397], "manag": 274, "mandatori": [47, 86], "mani": [91, 177, 260, 310, 355, 372, 375, 380, 386, 390], "manifest": 21, "manner": [12, 174, 178, 257], "manual": [310, 339], "manual_se": [38, 127, 171, 174, 176, 178, 183, 186, 188, 198, 201, 208, 239, 243, 250, 301, 307, 308, 309, 310, 314, 315, 317, 320, 321, 326, 327, 328, 335, 336, 337, 338, 339, 344, 346, 349, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 379], "map": [43, 52, 80, 87, 103, 104, 108, 144, 167, 176, 184, 188, 192, 251, 252, 315, 318, 320, 353, 364, 376, 379, 380, 382, 383, 388], "map_loc": [304, 313, 319, 320, 349, 350, 351, 352, 353, 354, 355, 356], "mapper": 76, "mapsto": [114, 184, 192, 197, 376, 380, 386, 387], "marcenko": 171, "mark": 21, "markerfmt": 312, "markov": [254, 255, 256, 342, 385], "marseil": 369, "mask": [14, 17, 32, 43, 44, 48, 106, 130, 170, 172, 174, 178, 183, 186, 187, 188, 199, 201, 205, 207, 230, 231, 232, 234, 235, 236, 237, 238, 242, 245, 250, 252, 310, 313, 316, 317, 320, 321, 322, 328, 331, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 365, 373, 379, 380, 386, 387, 393, 396], "mask0": 320, "mask1": 320, "mask_dir": [14, 320], "mask_ful": 349, "mask_gaussian": 317, "mask_gener": [14, 48, 320, 355, 380], "mask_random": 317, "mask_svd": 174, "mask_uniform": 317, "mat": [14, 23, 327, 335, 361], "match": [183, 186, 187, 188, 200, 206, 268, 318, 319, 320, 362, 370, 382], "materi": 182, "matern_kernel": 240, "math": [51, 141, 168, 205, 220, 336, 338, 344, 363, 364], "mathbb": [35, 38, 48, 59, 60, 61, 62, 63, 114, 141, 171, 174, 183, 197, 301, 304, 326, 332, 350, 382, 386, 387], "mathbf": [182, 251, 252, 304, 344, 345], "mathcal": [49, 52, 53, 54, 59, 60, 61, 62, 63, 91, 124, 125, 144, 171, 179, 180, 185, 193, 194, 198, 200, 209, 210, 240, 251, 252, 256, 304, 312, 331, 332, 344, 345, 346, 352, 357, 365, 381, 382, 388, 393], "mathemat": [229, 369], "mathrm": [171, 198, 332], "matlab": [103, 104], "matplotlib": [292, 295, 297, 312, 315, 318, 326, 344, 349], "matric": [48, 163, 171, 205, 206, 227, 228, 342], "matrix": [38, 158, 162, 171, 182, 183, 184, 197, 198, 201, 205, 206, 208, 301, 317, 319, 342, 362, 363, 393], "matter": 207, "matthieu": 372, "mat\u00e9rn": 240, "max": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 92, 127, 129, 148, 162, 209, 225, 226, 292, 295, 301, 314, 315, 317, 318, 326, 343, 345, 346, 392, 394], "max_": 357, "max_img": [292, 295], "max_it": [35, 38, 110, 114, 123, 124, 126, 149, 163, 164, 165, 166, 167, 168, 184, 192, 251, 252, 253, 254, 255, 256, 274, 276, 301, 308, 313, 315, 326, 327, 328, 332, 335, 336, 337, 338, 339, 342, 343, 344, 346, 361, 362, 363, 364, 365, 366, 387], "max_iter_backward": [273, 361], "max_iter_int": 141, "max_pixel": [73, 75], "max_zernike_amplitud": [233, 234, 235], "maxim": [141, 146, 163, 308, 321, 332, 335, 338, 361, 362, 363, 365, 366, 391], "maximis": [59, 62], "maximum": [35, 38, 47, 73, 75, 80, 91, 103, 104, 114, 123, 124, 126, 144, 148, 149, 163, 164, 165, 166, 167, 168, 184, 192, 209, 233, 235, 246, 253, 262, 266, 269, 270, 271, 272, 273, 292, 295, 308, 332, 343, 344, 388, 394], "maxpool": [84, 92], "mb": [87, 303, 306, 324, 330, 334, 341, 348, 359, 360, 368, 374], "mc": [48, 91, 351, 352, 355], "mc_physic": 320, "mcloss": [319, 350, 351, 352, 393, 394], "mcmc": [7, 375], "md": [337, 387], "md5": 15, "md_step": 115, "mea": [316, 319], "mean": [12, 14, 32, 40, 42, 43, 44, 48, 51, 52, 53, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 87, 179, 203, 253, 254, 255, 256, 258, 268, 321, 326, 332, 342, 343, 344, 345, 346, 349, 362, 365, 376, 382, 387, 388, 394, 396], "mean_has_converg": 254, "meaning": 344, "meaningless": [80, 304], "measplit": [349, 355], "measur": [12, 13, 14, 17, 19, 23, 28, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 53, 54, 56, 58, 61, 62, 63, 74, 77, 80, 85, 86, 95, 97, 99, 105, 106, 107, 108, 112, 113, 114, 119, 123, 124, 126, 139, 140, 145, 158, 162, 171, 172, 173, 174, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 203, 204, 206, 208, 209, 210, 232, 238, 249, 250, 251, 252, 254, 257, 258, 260, 274, 282, 284, 304, 307, 308, 309, 313, 314, 316, 317, 320, 321, 325, 326, 327, 328, 332, 335, 336, 337, 338, 339, 344, 345, 349, 350, 351, 353, 354, 356, 357, 358, 359, 361, 364, 365, 366, 373, 374, 375, 376, 380, 382, 383, 385, 386, 387, 388, 393, 394, 396], "measurement_dir": [308, 309, 321, 335, 338, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366], "measurementsa": 396, "mechan": [32, 44, 45, 48], "med": [17, 349], "median": [94, 322, 342, 386], "medianfilt": [45, 48, 49, 322, 342, 373, 384, 386], "medic": [364, 379, 392], "medium": [181, 233, 235, 314], "meet": [309, 346], "mem": [303, 306, 324, 330, 334, 341, 348, 359, 360, 368, 374], "memori": [17, 26, 89, 102, 104, 122, 208, 216, 217, 268, 284, 311, 320, 377, 392], "mention": 148, "merg": 349, "meshgrid": 322, "messi": [310, 342, 343, 346], "metadata": [17, 21], "metadata_cach": 17, "metadata_cache_fil": [14, 17], "metadata_cache_manag": 17, "meter": [277, 278], "method": [7, 12, 15, 17, 19, 20, 28, 32, 35, 38, 39, 44, 45, 47, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 85, 86, 88, 89, 103, 104, 106, 114, 115, 119, 120, 121, 122, 124, 130, 135, 136, 138, 141, 142, 145, 149, 150, 154, 158, 161, 162, 163, 167, 169, 170, 173, 174, 180, 183, 184, 186, 187, 189, 190, 191, 192, 198, 200, 201, 207, 250, 253, 255, 257, 268, 284, 285, 287, 288, 290, 292, 304, 307, 308, 310, 314, 316, 319, 322, 323, 324, 325, 327, 328, 336, 338, 339, 340, 341, 342, 343, 346, 355, 364, 365, 372, 374, 375, 378, 380, 382, 383, 384, 387, 396, 397], "metric": [0, 12, 32, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 57, 61, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 114, 123, 162, 184, 250, 252, 257, 260, 273, 274, 293, 301, 304, 308, 310, 315, 319, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 346, 349, 361, 362, 363, 364, 365, 366, 375, 377, 393, 396], "metric_nam": 114, "mfx": 186, "microscop": 16, "microscopi": [16, 314, 392], "microsop": 233, "middl": [17, 20, 26, 169, 170, 177, 184, 208, 217, 320, 379], "might": [39, 56, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 89, 122, 171, 252, 297, 316, 385, 394], "min": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 89, 103, 104, 109, 110, 114, 122, 148, 151, 184, 187, 192, 209, 225, 226, 262, 269, 292, 295, 301, 315, 317, 327, 328, 332, 345, 365, 386, 387, 392], "min_": [85, 308, 310, 326, 357], "min_max": [30, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 292, 295, 297], "min_prob": [114, 332, 386, 387], "min_x": [114, 123, 167, 168, 362, 363], "mind": 345, "mini": [26, 320, 349, 351], "minim": [85, 89, 103, 114, 115, 122, 135, 152, 153, 155, 157, 166, 251, 310, 318, 327, 328, 332, 352, 362, 365, 386, 387], "minimax": [304, 382, 393], "minimis": [60, 61, 63, 114, 150, 151, 154, 155, 156, 363], "minimiza": 85, "minimize_variational_problem": 332, "minimum": [47, 148, 209, 246, 262, 269, 272], "minu": [64, 74, 75, 76], "minut": [301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "mio": [331, 391], "mirror": [86, 88, 93, 114, 115, 118, 120, 137, 139, 141, 142, 143, 149, 156, 170, 174, 184, 189, 192, 194, 214, 275, 276, 284, 285, 290, 292, 293, 325, 340, 341, 374, 387], "mismatch": 355, "miss": [313, 328], "mix": [161, 182, 239, 243, 317, 319, 356, 357, 380], "mixin": [187, 378], "mixtur": [89, 122, 163, 182, 239, 331, 332], "mlp": 102, "mlp_ratio": 102, "mm": 12, "mmse": 144, "mn": [171, 201], "mnist": [28, 352, 353, 354, 355, 356, 357, 362, 363, 392], "mnist_train": [362, 363], "mo": 41, "modal": 6, "mode": [12, 15, 22, 30, 77, 84, 87, 92, 100, 101, 108, 111, 172, 201, 262, 265, 269, 270, 271, 272, 292, 295, 297, 311, 315, 319, 320, 335, 338, 339, 383], "model": [0, 3, 12, 14, 27, 32, 33, 34, 35, 39, 41, 42, 43, 44, 45, 47, 48, 49, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 119, 120, 122, 123, 124, 126, 130, 135, 136, 138, 141, 142, 144, 145, 150, 151, 152, 153, 162, 163, 171, 172, 174, 179, 180, 181, 182, 183, 184, 185, 189, 190, 192, 196, 200, 203, 204, 205, 206, 207, 208, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 269, 270, 272, 274, 276, 280, 284, 290, 292, 296, 301, 308, 315, 319, 320, 322, 323, 324, 325, 326, 344, 347, 348, 350, 351, 352, 353, 354, 356, 357, 361, 362, 363, 366, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397], "model_epl": 332, "model_eq": 322, "model_infer": [12, 396], "model_nam": [313, 319, 320, 349, 351, 352, 353, 354, 355, 356], "model_new": [313, 365], "model_nontrain": 313, "model_patchnr": 332, "model_spec": 365, "modifi": [44, 45, 48, 161, 257, 261, 320, 342, 379, 395], "modl": [280, 320, 349, 351, 389], "modul": [4, 5, 6, 8, 9, 10, 11, 12, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 70, 77, 79, 80, 81, 82, 83, 85, 86, 90, 93, 95, 96, 97, 98, 99, 100, 102, 105, 106, 108, 111, 114, 115, 116, 117, 118, 122, 123, 134, 135, 136, 141, 159, 160, 163, 171, 176, 183, 184, 189, 190, 191, 192, 198, 201, 216, 217, 243, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 268, 274, 276, 280, 296, 301, 308, 311, 316, 318, 322, 326, 327, 328, 335, 339, 342, 343, 354, 361, 362, 363, 364, 366, 375, 380, 384, 386, 390, 393, 394, 395], "modulelist": 326, "modulu": 191, "moeiloss": 393, "mohan": 107, "moi": [42, 352], "moiloss": [41, 352, 393], "momentum": [52, 53, 114, 123, 273, 357], "monitor": 319, "monoton": 391, "mont": [32, 45, 48, 52, 53, 54, 91, 253, 254, 255, 256, 268, 322, 342, 346, 384, 385], "montecarlo": [253, 255, 256, 342, 388], "more": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 32, 44, 45, 46, 48, 70, 75, 80, 84, 87, 88, 89, 91, 92, 101, 102, 110, 114, 119, 122, 127, 129, 149, 164, 165, 171, 172, 179, 182, 184, 185, 192, 203, 204, 208, 216, 217, 233, 234, 235, 240, 244, 255, 256, 257, 261, 265, 269, 270, 271, 272, 273, 274, 275, 276, 292, 295, 301, 304, 307, 310, 313, 319, 320, 326, 332, 342, 349, 351, 357, 363, 365, 378, 380, 384, 386, 387, 390, 393, 394], "moreau": [141, 144, 155, 336, 388], "moreov": [114, 315, 316, 332, 345], "most": [86, 163, 268, 284, 349, 377, 384, 387], "mostli": 185, "mother": [109, 110], "motion": [20, 44, 59, 60, 98, 240, 242, 304, 308, 327, 335, 338, 361, 380], "motion_gener": 307, "motionblurgener": [239, 243, 304, 307, 380, 381], "mous": 16, "move": [20, 28, 350], "movement": 20, "mr": [17, 237], "mri": [12, 14, 17, 19, 26, 28, 32, 34, 39, 40, 44, 48, 51, 77, 81, 86, 88, 99, 106, 107, 108, 174, 178, 183, 184, 187, 188, 192, 199, 207, 230, 231, 232, 236, 237, 238, 242, 243, 245, 261, 264, 268, 274, 280, 282, 284, 285, 288, 292, 295, 297, 322, 323, 324, 325, 326, 355, 358, 359, 372, 374, 381, 389, 392, 396, 397], "mri_mask_128x128": 351, "mrimixin": [14, 108, 186, 188, 378, 381], "mriquest": 188, "mse": [32, 34, 40, 41, 42, 43, 44, 45, 48, 51, 65, 72, 304, 320, 321, 361, 362, 363, 364, 365, 366, 382, 394], "mse_loss": 363, "mseloss": [32, 34, 40, 41, 42, 43, 44, 45, 48, 51, 57, 61, 69, 304, 394], "msx": 172, "mu": [132, 133, 163, 185, 332, 381, 387, 394], "mu_": 394, "mu_x": 394, "much": [17, 349], "mul": [183, 189, 192], "mult": [227, 228], "multi": [41, 42, 108, 188, 320, 352, 364, 379, 393, 395], "multicoil": [17, 26, 108, 187, 188, 320, 355], "multicoil_train": 17, "multicoilmri": [17, 320, 381], "multidimension": 226, "multipl": [12, 19, 28, 33, 36, 37, 39, 40, 41, 42, 45, 46, 48, 49, 50, 53, 54, 67, 77, 86, 91, 99, 107, 120, 145, 174, 181, 183, 184, 192, 196, 203, 204, 239, 249, 253, 260, 263, 264, 268, 282, 284, 307, 322, 325, 335, 336, 343, 350, 355, 356, 357, 358, 359, 369, 374, 377, 380, 388, 392, 393, 397], "multipli": [139, 140, 150, 173, 183, 184, 194, 196, 202, 215, 228, 229, 244, 268, 379, 380, 387, 397], "multiplier_adjoint": [227, 379], "multiscal": 75, "multispectr": [23, 64, 74, 76, 97, 190, 262, 271, 319, 350, 381, 389, 392, 394], "must": [14, 17, 32, 38, 39, 41, 42, 44, 48, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 84, 106, 118, 134, 172, 173, 182, 183, 190, 230, 231, 235, 236, 245, 248, 250, 252, 259, 260, 268, 294, 297, 316, 317, 319, 327, 328, 336, 337, 339, 355, 384, 394, 396], "my_dataset_nam": [321, 351, 352, 353, 361, 362, 363, 365, 366], "mykernel": 254, "mysampl": 254, "n": [17, 29, 35, 38, 45, 47, 48, 52, 53, 87, 144, 171, 173, 174, 178, 180, 182, 183, 184, 187, 188, 189, 191, 192, 193, 196, 197, 198, 201, 203, 205, 206, 209, 236, 237, 251, 252, 256, 268, 277, 301, 304, 313, 320, 322, 326, 331, 332, 338, 344, 345, 346, 352, 357, 360, 375, 376, 380, 381, 384, 388, 394], "n0": [132, 133, 185, 332], "n_": 196, "n_0": [132, 133, 185, 381, 387], "n_1": [87, 189], "n_2": [87, 189], "n_channel": [308, 309, 313, 315, 321, 327, 328, 335, 336, 337, 338, 339, 361, 362, 363, 364, 365, 366], "n_coeff": 109, "n_coil": [188, 320], "n_compon": [89, 122, 163, 332], "n_data": 364, "n_detector_pixel": [208, 217], "n_dual": 364, "n_eigen_psf": [244, 307], "n_eigenpsf": 307, "n_images_max": [308, 321, 335, 338, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366], "n_img": [195, 196, 248, 318], "n_it_max": [103, 104, 146, 327], "n_iter": [158, 162, 315, 318], "n_iter_train": 364, "n_layer": [98, 205, 206, 304], "n_level": [109, 362], "n_patch": 137, "n_primal": 364, "n_shard": 311, "n_step": 240, "n_tessel": 261, "n_tran": [91, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 322, 351], "n_wavelet_subband": 362, "n_zernik": [233, 235, 307, 314], "na": [233, 234, 235, 314], "nabla": [47, 103, 104, 115, 116, 118, 134, 142, 143, 144, 146, 153, 154, 156, 157, 158, 256, 337, 342, 346, 363, 386, 387, 388], "nabla_": [113, 131, 251, 345], "nabla_adjoint": [103, 104, 146], "nabla_u": [120, 145], "nabla_x": [116, 118, 120, 134, 141, 143, 145], "name": [16, 19, 23, 26, 110, 148, 149, 257, 274, 275, 276, 277, 287, 288, 345, 365], "namedtupl": [16, 17, 21], "nan": 107, "nativ": [312, 322, 375, 381], "natur": [45, 71, 87, 122, 309, 315, 331, 332, 350, 353, 392, 394], "nb": [84, 92], "nbia": 21, "nbu": [23, 319], "nbudataset": [319, 392], "nc": [82, 83, 84, 92], "ndarrai": [248, 277], "ndf": [82, 98, 304], "nearest": [84, 87, 92, 102, 252, 264, 295, 314], "necessari": [12, 87, 108, 251, 252, 260, 318, 352, 362, 370], "necessarili": [135, 338], "need": [12, 20, 21, 100, 109, 151, 163, 194, 231, 236, 245, 307, 309, 313, 315, 320, 326, 331, 342, 344, 365, 370, 378, 385, 387, 395, 396, 397], "neg": [118, 122, 132, 133, 134, 136, 137, 139, 140, 163, 194, 254, 255, 256, 268, 332, 346, 386, 388], "negat": 268, "negative_log_likelihood": [122, 332], "negative_patch_log_likelihood": 137, "negentropi": 387, "neighbor": [43, 197, 301, 353], "neighbor2neighbor": [12, 19, 28, 39, 77, 86, 99, 107, 174, 176, 184, 189, 192, 194, 282, 284, 325, 358, 359, 374, 393], "neighbour": [84, 92], "net": [21, 47, 84, 107, 304, 321, 344, 352, 353, 354, 355, 356, 357], "network": [10, 12, 19, 27, 28, 32, 35, 39, 43, 44, 45, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 136, 169, 171, 174, 183, 184, 192, 208, 237, 240, 241, 243, 251, 252, 257, 258, 259, 260, 280, 282, 284, 287, 305, 306, 310, 313, 323, 324, 325, 332, 335, 344, 345, 346, 349, 374, 375, 376, 383, 385, 390, 394, 396], "neural": [35, 48, 66, 80, 81, 93, 97, 100, 107, 136, 237, 310, 321, 332, 345, 346, 364, 385], "neurip": 47, "neuro": 17, "neuron": [136, 332], "never": 350, "nevertheless": 345, "new": [12, 28, 41, 42, 70, 158, 163, 169, 170, 178, 182, 186, 199, 202, 207, 239, 243, 254, 268, 292, 307, 314, 316, 320, 342, 355, 365, 375, 380], "new_demo_ei_ckp_150_v3": 351, "new_mask": 349, "new_x": 254, "next": [14, 21, 36, 37, 123, 304, 307, 311, 314, 320, 342, 344, 349, 350, 361, 362, 363, 366, 391, 392, 396], "next_phys": 42, "next_sigma": 344, "next_t": 345, "nf": [84, 88, 95, 96], "nfe": 345, "nftrainer": 332, "ngf": [83, 304], "ni": [233, 235, 314], "nice": [312, 344], "nichol": 391, "niqe": 394, "nll": 137, "nmse": 394, "nn": [12, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 77, 80, 85, 86, 97, 99, 102, 105, 106, 107, 108, 111, 136, 169, 170, 171, 174, 176, 178, 183, 186, 187, 188, 190, 191, 194, 198, 199, 201, 218, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 280, 296, 304, 312, 317, 326, 342, 363, 375, 380, 387, 393, 394, 395], "no_grad": [34, 41, 57, 114, 174, 176, 274, 331, 337, 344, 361, 362, 363, 366], "no_learning_infer": [12, 257], "no_learning_method": [12, 257, 319, 355], "nois": [12, 14, 16, 34, 41, 42, 45, 47, 48, 49, 52, 53, 54, 73, 78, 79, 84, 85, 86, 87, 88, 91, 94, 97, 99, 100, 101, 102, 107, 110, 114, 115, 118, 119, 120, 130, 138, 139, 141, 142, 143, 144, 145, 149, 170, 171, 174, 176, 178, 179, 180, 182, 183, 184, 185, 189, 190, 191, 192, 193, 194, 200, 204, 208, 209, 210, 214, 243, 246, 250, 251, 252, 254, 255, 256, 284, 285, 290, 292, 293, 301, 308, 309, 312, 315, 317, 319, 322, 325, 326, 327, 328, 331, 335, 336, 338, 339, 340, 341, 345, 353, 354, 355, 356, 361, 366, 374, 375, 376, 380, 384, 386, 387, 388, 391, 393, 396], "noise2invers": [48, 355], "noise2noisi": 45, "noise2scor": 47, "noise_color": 190, "noise_dirnam": 16, "noise_gain": 97, "noise_grai": 190, "noise_level": [16, 87, 192], "noise_level_img": [308, 326, 327, 328, 335, 336, 337, 338, 339, 361, 364, 366], "noise_model": [14, 45, 47, 176, 180, 184, 185, 189, 192, 193, 194, 204, 209, 210, 250, 252, 308, 310, 316, 317, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 346, 354, 355, 361, 364, 366, 373, 380, 386, 392], "noise_nam": 354, "noise_std": 342, "noiseless": [52, 53, 54, 87], "noisemodel": [14, 45, 179, 180, 185, 192, 193, 194, 204, 209, 210], "noisi": [16, 43, 45, 47, 49, 52, 53, 54, 74, 78, 79, 84, 86, 87, 88, 89, 94, 100, 101, 102, 103, 104, 107, 109, 110, 145, 178, 179, 180, 183, 185, 191, 192, 193, 194, 204, 209, 210, 310, 326, 327, 328, 331, 332, 342, 343, 344, 345, 346, 350, 355, 380, 384], "noisy_imag": 384, "noisysampleidentifi": 16, "noll": [234, 314], "nomenclatur": [307, 314], "non": [12, 32, 44, 163, 171, 181, 184, 191, 192, 197, 199, 204, 207, 208, 236, 237, 268, 301, 310, 322, 346, 349, 375, 378, 380, 383, 385, 391, 393], "non_linear": [109, 110, 326], "none": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 36, 41, 42, 44, 45, 46, 47, 48, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 87, 88, 89, 91, 92, 94, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 115, 117, 120, 121, 122, 123, 124, 125, 126, 135, 136, 141, 142, 148, 149, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 216, 217, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 304, 307, 308, 309, 311, 314, 316, 319, 320, 332, 335, 336, 338, 349, 350, 352, 353, 354, 355, 356, 357, 366, 380, 387, 395, 396], "nonexpans": [35, 346, 391], "nonstandard": 20, "nonsymmetr": 164, "norm": [12, 35, 38, 55, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 98, 103, 104, 107, 109, 110, 114, 116, 126, 127, 128, 130, 131, 146, 148, 171, 184, 187, 206, 208, 260, 301, 308, 315, 316, 326, 327, 339, 342, 345, 365, 380, 387, 393], "norm_a2": 387, "norm_grad": 345, "norm_input": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "norm_lay": 102, "normal": [55, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 87, 88, 102, 103, 104, 130, 131, 132, 133, 136, 144, 167, 184, 185, 194, 196, 197, 208, 301, 315, 332, 345, 362, 363, 387], "normalis": [17, 23, 26, 70, 72, 130, 182, 394], "normalizing_flow": [136, 332], "normliz": 208, "note": [12, 32, 64, 74, 76, 91, 120, 125, 145, 151, 155, 172, 187, 188, 189, 191, 208, 217, 243, 257, 260, 265, 297, 301, 304, 307, 308, 319, 320, 322, 337, 342, 344, 345, 349, 350, 354, 355, 361, 362, 363, 366, 378, 392, 394, 395, 397], "notebook": [292, 297, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "noth": [70, 74, 268], "notic": [124, 307, 314, 320, 344], "nov": 369, "now": [22, 273, 275, 301, 304, 307, 314, 319, 320, 321, 326, 331, 332, 343, 344, 345, 349, 350, 361, 362, 363, 365, 366, 373, 380], "np": [171, 248, 250, 301, 304, 308, 314, 318, 319, 321, 326, 335, 338, 342, 343, 344, 345, 349, 351, 352, 353, 354, 355, 356, 357, 364, 365], "npy": [301, 314, 320, 326, 327, 335, 338, 351, 361], "nsgan": 57, "nth": 188, "nufft": [197, 301], "nufftobj": 301, "null": [307, 314], "num_angl": 332, "num_block": 100, "num_cascad": [108, 320], "num_channel": [233, 234, 235, 239, 240, 241, 243], "num_epoch": 278, "num_filt": 93, "num_head": 102, "num_it": [280, 315, 320], "num_lay": [93, 136], "num_refinement_block": 100, "num_step": 345, "num_train_timestep": [87, 252, 344, 345], "num_work": [28, 308, 309, 311, 321, 335, 336, 338, 339, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "number": [12, 16, 17, 19, 20, 21, 28, 29, 33, 36, 37, 41, 42, 45, 46, 47, 48, 50, 52, 53, 54, 78, 81, 82, 83, 84, 85, 88, 89, 91, 92, 93, 95, 96, 98, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 114, 122, 123, 124, 126, 132, 133, 136, 137, 141, 146, 149, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 179, 180, 182, 183, 184, 185, 187, 188, 189, 192, 193, 194, 197, 198, 200, 201, 205, 206, 208, 209, 210, 217, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 280, 292, 295, 298, 299, 301, 304, 307, 308, 310, 311, 313, 314, 315, 316, 321, 326, 327, 328, 332, 335, 337, 338, 342, 343, 344, 345, 346, 349, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 372, 380, 387, 392, 394, 395], "number_of_oper": 352, "numer": [35, 38, 165, 184, 208, 233, 235, 254, 255, 256, 314, 326, 342, 397], "numpi": [218, 219, 221, 222, 225, 226, 227, 228, 277, 301, 312, 314, 318, 326, 342, 343, 344, 345], "numpoint": 301, "nutshel": 362, "nvidia": 284, "nwimag": 301, "nyquist": 234, "nyu": [17, 349], "nz": [80, 83, 304], "o": [171, 181, 201, 364, 370], "object": [12, 24, 57, 135, 154, 156, 163, 184, 187, 191, 192, 195, 203, 204, 207, 233, 235, 249, 259, 268, 273, 277, 278, 292, 294, 295, 297, 308, 310, 317, 326, 327, 328, 343, 346, 362, 379, 380, 387], "observ": [41, 42, 48, 49, 114, 120, 121, 122, 125, 128, 131, 133, 135, 140, 145, 150, 152, 153, 184, 192, 331, 332, 337, 375, 376, 382, 393], "obtain": [16, 26, 45, 48, 91, 100, 191, 214, 250, 252, 254, 255, 265, 307, 310, 314, 317, 342, 346, 369, 383, 388, 390], "oct": 369, "od": 385, "odd": [44, 187, 218, 242, 312], "odl": 364, "odlgroup": 364, "odot": [53, 54, 181, 202, 229, 356, 357], "off": [236, 268, 382, 385, 386, 389], "offer": [315, 316, 322, 379, 386, 397], "offici": [22, 102], "offlin": [12, 304, 396], "offset": [181, 196, 236], "often": [375, 376, 379, 380, 382, 387, 392, 396], "oil": [233, 314], "omega_": 326, "onc": [89, 114, 122, 268, 316, 320, 321, 345, 365, 373, 382, 397], "one": [14, 16, 17, 19, 20, 21, 26, 32, 35, 37, 38, 42, 45, 46, 47, 48, 49, 56, 58, 64, 67, 74, 75, 76, 109, 111, 145, 163, 169, 170, 171, 175, 177, 181, 184, 187, 208, 211, 230, 232, 237, 238, 242, 245, 254, 255, 256, 259, 267, 268, 304, 311, 314, 318, 319, 326, 345, 352, 370, 379, 382, 383, 387, 392, 393, 395, 396], "ones": [14, 45, 47, 48, 49, 50, 64, 65, 67, 68, 69, 70, 72, 73, 75, 76, 130, 145, 169, 170, 173, 175, 178, 184, 186, 188, 199, 208, 232, 238, 250, 252, 291, 307, 312, 313, 316, 317, 320, 339, 342, 345, 362, 365, 375, 377, 379, 380, 384, 387, 393, 394], "ones_lik": [130, 312, 328, 344], "onesid": 67, "onli": [12, 14, 17, 18, 26, 28, 32, 41, 44, 45, 47, 48, 50, 70, 72, 84, 85, 87, 88, 92, 97, 101, 102, 105, 106, 109, 110, 141, 148, 169, 172, 183, 184, 192, 208, 214, 217, 219, 222, 230, 232, 238, 242, 251, 254, 257, 259, 264, 268, 273, 275, 292, 295, 304, 307, 310, 311, 314, 316, 318, 319, 320, 321, 327, 328, 332, 336, 342, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 364, 365, 378, 380, 385, 387, 388, 394, 397], "onlin": [12, 84, 87, 88, 92, 101, 102, 257, 320, 350, 396], "online_measur": [12, 257, 319, 320, 332, 349, 350, 364, 396], "onto": 12, "open": [21, 226, 369, 370, 371], "oper": [9, 12, 17, 19, 28, 32, 33, 34, 39, 40, 41, 42, 43, 45, 47, 48, 49, 52, 53, 54, 55, 56, 58, 70, 77, 86, 89, 97, 99, 100, 103, 104, 105, 106, 107, 112, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 138, 140, 141, 142, 145, 146, 147, 148, 158, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 231, 234, 236, 237, 239, 240, 241, 243, 244, 245, 249, 250, 251, 252, 254, 256, 257, 258, 260, 268, 282, 284, 285, 290, 292, 309, 314, 315, 318, 319, 320, 323, 324, 325, 331, 337, 344, 345, 353, 354, 355, 356, 357, 358, 359, 372, 374, 376, 377, 379, 382, 383, 385, 387, 388, 391, 392, 393, 394, 397], "operatornam": [35, 91, 114, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 138, 141, 142, 143, 144, 145, 150, 151, 152, 153, 155, 157, 158, 187, 252, 273, 274, 301, 304, 326, 327, 328, 336, 344, 363, 365, 382, 386, 387, 390], "opnorm": 301, "opposit": [172, 207], "opt": [322, 349], "optic": 234, "optician": 314, "optim": [0, 10, 12, 80, 85, 86, 88, 89, 103, 104, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 180, 184, 189, 191, 192, 201, 208, 251, 252, 254, 255, 256, 258, 259, 260, 273, 274, 275, 276, 284, 285, 290, 292, 293, 296, 301, 304, 310, 313, 315, 318, 319, 320, 321, 330, 331, 332, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 373, 374, 375, 377, 380, 385, 386, 388, 390, 396], "optim_build": [114, 301, 308, 315, 327, 328, 335, 336, 337, 338, 339, 373, 386, 387], "optim_iter": [114, 123, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 315, 336, 362, 363, 364, 365, 387], "optim_param": 315, "optim_step": 332, "optimalgo": 114, "optimis": [80, 304, 385], "optimiter": [114, 123, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 274, 275, 276, 336], "optimize_z": 80, "optimizer_d": 259, "optimizer_g": 259, "optin": 12, "option": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 33, 34, 36, 37, 41, 45, 46, 47, 50, 52, 53, 54, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 107, 114, 123, 139, 164, 165, 167, 168, 169, 171, 177, 178, 180, 182, 184, 185, 186, 188, 189, 190, 192, 193, 194, 198, 200, 201, 202, 208, 209, 210, 218, 221, 229, 230, 231, 232, 238, 242, 243, 244, 257, 259, 260, 273, 274, 287, 289, 290, 307, 316, 344, 345, 355, 357, 377, 380, 383, 386, 387, 396], "order": [17, 20, 34, 36, 37, 55, 67, 74, 103, 161, 184, 201, 233, 234, 235, 250, 307, 311, 322, 342, 343, 344, 345, 375, 393, 396], "org": [34, 35, 38, 41, 42, 45, 52, 53, 54, 67, 75, 77, 82, 83, 88, 91, 95, 96, 164, 165, 171, 175, 177, 179, 181, 200, 208, 217, 234, 240, 250, 251, 252, 255, 256, 262, 271, 292, 295, 297, 307, 310, 314, 342, 343, 346, 349, 357], "organ": 369, "orginal_data_dir": 304, "orig": [322, 349, 350], "origin": [14, 20, 26, 48, 52, 56, 58, 60, 61, 82, 83, 85, 87, 88, 90, 98, 108, 161, 184, 186, 187, 188, 206, 214, 250, 252, 261, 265, 268, 304, 315, 318, 320, 326, 327, 328, 332, 344, 345, 349, 362, 364, 391, 394], "original_data_dir": [337, 350, 352, 353, 354, 356, 357, 362, 363], "original_data_hom": 355, "ortho": [187, 301], "orthogon": [109, 171, 187, 224, 255, 295, 384], "orthograph": 377, "orthonorm": [109, 148, 174, 197], "osa": 307, "other": [12, 16, 23, 32, 34, 40, 41, 42, 43, 45, 48, 51, 70, 79, 100, 109, 175, 183, 184, 189, 192, 243, 257, 258, 260, 268, 301, 307, 309, 311, 319, 344, 364, 375, 383, 385, 387, 392, 395, 397], "otherwis": [12, 14, 34, 35, 38, 41, 42, 50, 52, 67, 87, 91, 114, 123, 167, 169, 171, 177, 178, 183, 184, 186, 187, 190, 199, 201, 202, 212, 213, 215, 218, 219, 220, 221, 222, 223, 229, 260, 308, 309, 318, 321, 335, 336, 338, 339, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366], "otimes_": 314, "our": [64, 68, 69, 70, 76, 100, 151, 261, 301, 304, 313, 319, 320, 322, 327, 328, 336, 342, 345, 349, 355, 362, 363, 365, 370, 371, 373, 384, 392, 394], "ourselv": 317, "out": [20, 38, 171, 226, 254, 255, 256, 268, 304, 311, 314, 344, 345, 349, 352, 373], "out_channel": [84, 87, 88, 92, 95, 96, 100, 107, 276, 304, 315, 320, 321, 336, 339, 350, 352, 353, 354, 355, 356, 357], "out_siz": 216, "outer": 255, "output": [12, 23, 28, 32, 33, 38, 44, 48, 57, 78, 80, 81, 83, 84, 87, 88, 89, 92, 95, 96, 100, 105, 106, 107, 108, 109, 114, 121, 122, 123, 125, 136, 163, 164, 165, 168, 169, 170, 172, 174, 177, 178, 186, 187, 190, 194, 197, 199, 200, 202, 203, 205, 206, 207, 208, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 257, 264, 265, 268, 273, 274, 320, 326, 327, 328, 336, 337, 338, 339, 344, 345, 349, 355, 362, 363, 377, 380], "output_s": [83, 304], "output_shap": [205, 206], "outsid": [292, 314], "over": [12, 23, 30, 45, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 91, 94, 103, 104, 108, 123, 127, 148, 172, 187, 208, 224, 268, 301, 309, 344, 345, 349, 355, 377, 384, 392, 394], "overal": 182, "overcomplet": [110, 167, 384], "overfit": [85, 310], "overlaid": 294, "overlap": [32, 44, 89, 122, 137, 196, 199, 207, 349], "overlap2prob": 318, "overlap_img": 318, "overlin": [191, 251, 252, 344, 345], "overload": 311, "overrid": [12, 19, 26, 44, 56, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 94, 102, 163, 182, 260, 261, 268, 320, 396], "overridden": [70, 80], "overriden": 57, "oversampl": [197, 205, 206, 301, 315], "oversampling_ratio": 315, "overview": 182, "overwrit": [28, 142, 179, 180, 185, 193, 194, 210, 257, 356], "overwrite_exist": [28, 320], "overwritten": [142, 170, 171, 173, 174, 184, 186, 192, 201, 208], "own": [16, 19, 26, 28, 48, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 84, 87, 88, 92, 101, 102, 174, 176, 180, 184, 189, 192, 232, 258, 284, 287, 292, 304, 316, 323, 324, 325, 336, 364, 374, 375, 392, 397], "ozan": 364, "p": [45, 47, 53, 54, 67, 74, 89, 114, 122, 144, 148, 185, 188, 193, 194, 196, 200, 229, 251, 256, 268, 301, 308, 312, 326, 328, 335, 338, 342, 345, 346, 376, 381, 386, 387, 388, 394], "p001": 14, "p_": [59, 60, 61, 62, 63, 144, 304, 332, 342, 346, 382, 388], "p_i": [89, 122, 137, 332, 387], "p_ix": [89, 122], "p_p": 326, "p_x": [59, 60, 304, 332, 382], "p_y": [61, 62, 63], "p_z": [332, 382], "packag": [2, 7, 79, 197, 261, 322, 345, 349, 375, 380, 387, 388, 390, 393, 394, 397], "pad": [14, 17, 26, 94, 107, 109, 137, 169, 170, 172, 177, 184, 190, 196, 197, 202, 205, 206, 218, 219, 220, 221, 222, 223, 229, 244, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 301, 304, 307, 312, 314, 379, 392], "pad_input": 109, "pad_siz": 14, "pad_to_s": 17, "pad_zero": 196, "padding_mod": 265, "page": [17, 387, 391], "paig": 168, "paint": 182, "pair": [12, 17, 19, 23, 28, 29, 45, 48, 186, 188, 243, 257, 258, 304, 309, 319, 320, 321, 352, 365, 392, 393], "pajot": [61, 304], "pan": [23, 64, 74, 97, 190, 262, 271, 350, 389, 394, 397], "pan_lr": 74, "panchromat": [23, 74, 97, 319, 392], "pannet": [319, 389], "pansharpen": [23, 64, 74, 97, 262, 271, 317, 319, 350, 381], "pantiltrot": [322, 350, 397], "papadaki": 338, "paper": [20, 45, 47, 60, 61, 84, 85, 88, 93, 100, 108, 150, 172, 185, 190, 229, 252, 261, 265, 304, 308, 310, 312, 319, 332, 335, 343, 346, 350, 364], "paper_fil": 47, "parallel": [79, 208, 216, 217, 308, 309, 311, 321, 335, 336, 338, 339, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366, 395, 397], "parallel_comput": [208, 216, 217], "parallel_dim": [164, 165, 167, 168], "param": [12, 14, 19, 28, 41, 42, 100, 161, 171, 174, 178, 183, 184, 208, 236, 237, 244, 245, 254, 261, 268, 297, 320, 336, 338, 342, 364, 380, 392, 396], "param_nam": [239, 243], "param_valu": [239, 243], "paramat": 45, "paramet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 283, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 301, 304, 308, 310, 313, 315, 316, 318, 319, 320, 321, 326, 327, 328, 331, 335, 336, 337, 338, 342, 344, 345, 346, 349, 350, 355, 365, 377, 381, 390, 391, 394, 396, 397], "parameter": 179, "parameteris": 262, "parametris": [108, 269, 270, 272], "params_algo": [114, 123, 149, 274, 275, 276, 296, 301, 308, 313, 315, 327, 328, 335, 336, 337, 338, 339, 361, 362, 363, 364, 365, 366, 373, 386, 387, 390], "params_algo_new": [313, 365], "params_dict": [239, 243], "params_pc": [202, 307], "parent": [17, 174, 184, 192, 274], "pari": 369, "part": [13, 26, 84, 111, 178, 186, 199, 317, 320, 390], "partial": [18, 70, 120, 128, 145, 184, 192, 273, 350, 390], "particular": [104, 151, 197, 208, 301, 307, 314, 337, 390, 396], "pass": [12, 32, 33, 36, 37, 39, 41, 42, 44, 45, 46, 48, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 90, 91, 93, 95, 96, 98, 106, 108, 149, 153, 167, 169, 173, 177, 183, 186, 188, 206, 225, 230, 232, 238, 242, 243, 258, 260, 268, 273, 274, 275, 276, 287, 297, 304, 307, 320, 322, 355, 370, 380, 384, 390, 395, 397], "pastur": 171, "patch": [12, 24, 66, 89, 98, 102, 120, 122, 132, 136, 137, 141, 142, 174, 176, 180, 183, 184, 185, 189, 192, 208, 210, 285, 290, 292, 334, 374, 384, 386, 387, 391], "patch_dimens": 122, "patch_norm": 102, "patch_siz": [24, 89, 102, 122, 136, 137, 331, 332], "patchdataset": 332, "patchgan": [98, 304, 382], "patchgandiscrimin": [260, 304, 382], "patchnr": 387, "patchnr_batch_s": 332, "patchnr_dataload": 332, "patchnr_epoch": 332, "patchnr_learning_r": 332, "patchnr_lodopab_smal": [136, 332], "patchnr_lodopab_small2": 332, "patchnr_prior": 332, "patchnr_subnets": 332, "patchprior": [332, 387], "path": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 84, 87, 88, 89, 92, 101, 102, 122, 136, 282, 287, 288, 289, 292, 293, 295, 296, 304, 315, 349, 355, 370, 377, 392], "pathlib": [14, 17, 20, 23, 26, 282, 287, 288, 292, 295, 296, 304, 308, 309, 313, 315, 321, 326, 327, 328, 335, 336, 337, 338, 339, 349, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "patient": [21, 320, 392], "patient_id": 21, "pattern": [119, 175, 199, 201, 307, 314, 317, 318, 335, 370, 393], "pc_gener": [202, 244, 307], "pd": [135, 151], "pdf": [34, 47, 77, 118, 237, 240, 245, 337, 343], "pdnet": 390, "pdnet_dualblock": [364, 390], "pdnet_primalblock": [364, 390], "pdnetdatafid": 364, "pdnetiter": 364, "pdnetprior": 364, "peak": [73, 200, 301, 312, 315], "penal": [114, 308, 387], "per": [12, 17, 19, 20, 21, 26, 32, 47, 84, 87, 88, 91, 101, 108, 109, 122, 145, 161, 175, 184, 200, 201, 204, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 297, 310, 312, 320, 322, 343, 346, 351, 352, 362, 388, 391, 396], "percentag": [26, 254, 255, 256, 262, 269, 270, 272], "percept": [382, 394], "perceptu": [66, 304, 375, 385, 394], "pereyra": 255, "perfect": 248, "perform": [3, 12, 13, 20, 23, 25, 27, 28, 30, 32, 44, 45, 48, 52, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 87, 100, 108, 114, 115, 118, 123, 135, 142, 149, 163, 169, 170, 172, 173, 178, 186, 187, 188, 196, 197, 202, 208, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 252, 260, 264, 265, 267, 268, 273, 274, 275, 276, 301, 308, 310, 319, 320, 321, 326, 327, 328, 335, 339, 344, 345, 349, 355, 361, 364, 365, 375, 377, 379, 382, 384, 385, 387, 390, 393, 394, 397], "period": [254, 255, 256, 265], "permut": 301, "persist": 307, "persist_prev": 230, "perspect": [262, 271, 319, 350, 397], "pf": 234, "pgd": [114, 123, 135, 149, 157, 273, 274, 275, 276, 313, 315, 327, 328, 338, 339, 361, 362, 363, 365, 386, 387, 390], "pgditer": [114, 123, 338, 339, 362, 363], "pgl": 350, "phantom": 315, "phase": [32, 44, 84, 86, 111, 112, 114, 120, 126, 130, 135, 138, 141, 142, 149, 154, 158, 161, 162, 191, 192, 195, 196, 198, 206, 234, 235, 242, 247, 248, 284, 285, 290, 292, 307, 323, 324, 325, 349, 374, 381, 384, 387], "phase2phas": [44, 242, 349], "phase2phaseloss": [32, 48, 242, 349, 393], "phase2phasesplittingmaskgener": [230, 381], "phase_retriev": [161, 162, 191, 195, 196, 247, 248, 315, 318], "phaseless": [315, 318], "phaseretriev": [112, 113, 158, 195, 198, 206, 381], "phenomenon": 310, "phi": [45, 77, 115, 116, 117, 118, 134, 141, 161, 337, 352, 383, 387], "phi_": [321, 352], "photograph": 20, "photon": [16, 132, 133, 185, 192, 200, 284, 323, 324, 325, 374, 381], "phyic": 336, "physic": [0, 12, 14, 17, 19, 28, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 52, 53, 54, 56, 58, 61, 74, 77, 80, 85, 89, 97, 99, 105, 106, 108, 112, 113, 114, 120, 122, 123, 124, 126, 130, 135, 140, 145, 150, 151, 152, 153, 154, 156, 158, 162, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 273, 274, 276, 301, 304, 307, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 373, 375, 376, 378, 379, 381, 386, 387, 388, 390, 392, 393, 396], "physicist": 314, "physics1": [49, 145, 184, 380], "physics2": [49, 145, 184, 316, 380], "physics3": 380, "physics4": 380, "physics_gener": [12, 28, 41, 42, 257, 304, 320, 392, 396], "physics_i": 49, "physics_list": [203, 204], "physicsgener": [12, 28, 41, 42, 48, 231, 232, 239, 241, 244, 246, 257, 380], "pi": [206, 208, 214, 301, 315, 318, 339], "pi_": 256, "pick": [264, 311], "pickl": 17, "piecewis": [261, 393, 397], "pil": [13, 15, 16, 18, 22, 25, 27, 262, 269, 270, 271, 272, 311], "pinhol": [233, 269, 270, 272, 314, 397], "pinhole_radiu": 233, "pinv": [77, 355, 383], "pip": [79, 109, 110, 261, 325, 370, 373], "pixel": [15, 25, 44, 73, 75, 78, 84, 92, 100, 169, 170, 172, 175, 177, 182, 183, 184, 187, 192, 200, 201, 208, 211, 217, 230, 232, 233, 235, 238, 242, 264, 268, 301, 304, 312, 313, 315, 318, 321, 322, 328, 336, 343, 345, 346, 350, 355, 356, 357, 362, 363, 365, 379, 380, 392, 393, 394], "pixel_s": [234, 235, 314], "pixel_spac": [208, 217], "pixelshuffl": 102, "pixelshuffledirect": 102, "pixelsize_xi": [233, 314], "pixelsize_z": [233, 314], "pixelsuffl": [84, 92], "pixelwis": [48, 183, 232, 238, 268, 345, 349, 381], "pkl": [14, 17], "place": 161, "placehold": [29, 74], "placeholderdataset": 260, "plai": [84, 86, 88, 104, 114, 115, 118, 119, 120, 138, 139, 141, 142, 143, 149, 170, 174, 184, 189, 192, 194, 214, 252, 255, 256, 257, 284, 285, 290, 292, 293, 315, 338, 341, 342, 346, 366, 372, 374, 375, 384, 385, 386, 387, 390], "plain": [250, 252], "plan": 319, "plane": [172, 208, 235, 307, 314, 397], "plausibl": 376, "playback": 20, "pleas": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 182, 258, 268, 301, 370, 371], "plot": [12, 114, 202, 257, 260, 273, 274, 293, 294, 295, 296, 297, 301, 304, 307, 308, 309, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 331, 338, 344, 345, 349, 350, 351, 352, 353, 354, 356, 361, 364, 365, 373, 375, 386, 387], "plot_convergence_metr": [12, 257, 301, 308, 327, 328, 335, 338, 339, 364], "plot_curv": [301, 327, 328, 336, 337, 339, 377], "plot_imag": [12, 257, 304, 308, 319, 320, 335, 338, 349, 351, 352, 353, 354, 355, 356, 357, 364, 365], "plot_inset": [301, 377], "plot_interv": 12, "plot_kwarg": 297, "plot_measur": [12, 257], "plot_ortho3d": [314, 320, 377], "plot_paramet": [362, 363, 366, 377], "plot_video": [320, 349, 377], "plt": [292, 312, 315, 318, 326, 344, 349], "plu": 349, "plug": [84, 86, 88, 104, 114, 115, 118, 119, 120, 138, 139, 141, 142, 143, 149, 170, 174, 184, 189, 192, 194, 214, 252, 255, 256, 257, 284, 285, 290, 292, 293, 315, 338, 341, 342, 345, 346, 366, 372, 374, 375, 384, 385, 386, 387, 390], "pm": 264, "png": [15, 16, 18, 22, 25, 27, 292, 307, 311, 315, 317, 318, 331, 337, 339, 344, 345, 373, 386], "pnp": [12, 19, 28, 35, 84, 86, 88, 114, 119, 120, 130, 135, 141, 142, 144, 149, 159, 160, 170, 174, 180, 183, 184, 189, 192, 201, 208, 252, 254, 256, 257, 258, 276, 284, 285, 287, 288, 290, 292, 293, 313, 325, 340, 341, 347, 348, 361, 365, 373, 374, 375, 385, 387, 388, 390, 391], "pock": [12, 19, 28, 39, 51, 86, 103, 104, 109, 120, 124, 138, 141, 142, 149, 151, 174, 183, 184, 192, 257, 274, 275, 276, 284, 287, 313, 325, 364, 367, 368, 374, 387], "poential": 142, "point": [35, 114, 123, 125, 135, 163, 184, 233, 240, 241, 273, 274, 301, 346, 361, 370, 387, 390, 395], "poisson": [16, 45, 47, 49, 53, 54, 86, 88, 114, 115, 118, 120, 132, 133, 139, 140, 141, 142, 143, 145, 149, 170, 174, 184, 185, 189, 192, 193, 194, 200, 214, 284, 285, 290, 292, 293, 312, 317, 325, 332, 340, 341, 353, 354, 356, 357, 374, 388, 393], "poissongaussiannois": [317, 381], "poissonlikelihood": [118, 145, 337, 344, 387], "poissonnois": [45, 47, 49, 140, 145, 200, 317, 337, 353, 354, 356, 381], "polynomi": [234, 307, 314], "pool": [84, 92, 94], "poor": 315, "popul": 17, "popular": [45, 64, 91, 172, 319, 392, 393, 394], "pos_weight": 93, "posed": 393, "posit": [53, 54, 91, 93, 102, 139, 194, 196, 258, 264, 268, 322, 344, 356, 357, 386, 387], "possibl": [73, 87, 88, 114, 169, 190, 205, 206, 273, 275, 301, 307, 314, 315, 320, 361, 370, 380, 385, 386, 387, 394, 395], "possibli": [41, 42, 53, 99, 181, 254, 332, 342, 382, 385, 393], "post": [321, 343, 346, 394], "posterior": [7, 250, 251, 252, 254, 255, 256, 342, 343, 345, 346, 388], "posteriori": [144, 388], "postiv": [118, 134], "potenti": [93, 106, 115, 116, 117, 118, 120, 121, 134, 137, 142, 145, 149, 156, 275, 276, 310, 337, 338, 363, 396], "pow": 342, "power": [35, 38, 74, 87, 162, 184, 201, 316, 339, 344], "pp": [103, 104, 119, 168, 335], "pr": 370, "practic": [101, 148, 184, 301, 350, 362], "pre": [66, 100, 301, 315, 345, 386, 390, 394], "precis": [91, 114, 127, 129, 184, 233, 234, 235, 301, 326, 332, 387], "precondition": 164, "preconula": 342, "predefin": [1, 14, 123, 184, 192, 354, 372], "predefined_noise_model": 354, "prefer": [20, 108, 370, 396], "prefix": 278, "pregener": 26, "prepar": [311, 370, 392], "preprocess": [70, 158, 162], "present": [14, 320, 351, 352, 353], "preserv": [301, 397], "pretrain": [12, 47, 60, 61, 63, 84, 87, 88, 89, 92, 100, 101, 102, 119, 122, 136, 250, 252, 304, 315, 319, 320, 331, 332, 335, 336, 337, 338, 339, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 361, 366, 372, 375, 384, 385, 386, 388, 394, 395], "pretrained_noise_level": 102, "prevent": [314, 349], "previou": [114, 123, 150, 151, 152, 230, 254, 342, 344, 356, 380, 395], "previous": [28, 326], "primal": [12, 39, 51, 86, 88, 95, 96, 103, 104, 114, 120, 123, 130, 135, 138, 141, 142, 149, 151, 159, 160, 174, 180, 184, 189, 192, 201, 208, 274, 276, 284, 285, 290, 292, 293, 325, 340, 341, 365, 367, 368, 374, 386, 387, 390], "primari": [103, 104], "princip": [158, 162], "print": [12, 13, 15, 16, 18, 20, 21, 22, 23, 25, 27, 32, 35, 38, 44, 45, 47, 48, 85, 103, 104, 114, 161, 162, 182, 184, 233, 234, 235, 239, 240, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 260, 277, 284, 301, 307, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 327, 328, 331, 332, 336, 337, 339, 342, 343, 346, 349, 351, 352, 353, 354, 356, 357, 365, 379, 380, 387, 392], "printout": 20, "printout_first": 20, "printout_index": 20, "prior": [12, 19, 24, 28, 32, 39, 51, 81, 84, 85, 89, 99, 104, 114, 119, 120, 122, 123, 127, 129, 130, 132, 135, 136, 137, 138, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 170, 171, 172, 174, 176, 180, 183, 184, 185, 189, 192, 208, 210, 214, 230, 254, 255, 256, 257, 274, 275, 276, 280, 282, 284, 287, 288, 290, 292, 293, 296, 313, 315, 323, 324, 326, 329, 330, 331, 334, 335, 336, 337, 339, 349, 351, 361, 362, 365, 366, 367, 368, 373, 374, 375, 376, 384, 385, 386, 388, 390, 391], "prior_new": [313, 365], "priori": 332, "priviledg": 20, "prob": [239, 307], "probability_mask": [321, 365], "probabl": [53, 54, 171, 183, 201, 237, 239, 245, 321, 332, 356, 365], "probail": 332, "probe": [195, 196, 247, 248], "probe_radiu": [247, 318], "problem": [12, 19, 23, 27, 28, 34, 39, 41, 47, 51, 56, 58, 59, 60, 61, 62, 63, 80, 82, 83, 85, 86, 88, 89, 90, 98, 99, 103, 104, 107, 109, 110, 114, 115, 118, 119, 120, 122, 123, 135, 139, 141, 142, 143, 149, 167, 169, 170, 171, 174, 176, 177, 181, 182, 184, 189, 192, 194, 207, 208, 214, 240, 241, 243, 250, 252, 259, 260, 274, 282, 284, 285, 290, 292, 293, 297, 305, 306, 309, 310, 315, 316, 319, 321, 322, 325, 331, 332, 340, 341, 343, 349, 351, 352, 357, 361, 362, 365, 370, 372, 374, 375, 377, 380, 382, 383, 384, 385, 386, 387, 389, 390, 393, 394], "proce": 123, "procedur": [107, 313, 342, 365], "proceed": [47, 119, 335], "process": [12, 23, 26, 28, 32, 44, 79, 104, 105, 111, 124, 148, 171, 184, 192, 198, 206, 207, 240, 252, 321, 357, 375, 379, 384, 392, 393, 394], "prod": [171, 315], "prod_": [205, 206, 345], "produc": [29, 106, 173, 184, 190, 192, 203, 204, 249, 268, 388], "product": [38, 174, 184, 191, 192, 202, 229, 268, 322, 342, 379, 397], "product_convolution2d": [307, 379], "productconvolutionblurgener": [202, 307, 381], "progress": [12, 28, 80, 85, 163, 164, 165, 168, 250, 251, 252, 253, 254, 255, 256, 257, 260, 321, 345, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "progress_bar": [12, 332], "prohibit": 171, "proj": 125, "project": [77, 95, 124, 125, 126, 197, 208, 216, 217, 254, 255, 256, 262, 268, 269, 270, 271, 272, 301, 322, 350, 362, 363, 370, 377, 379, 391, 397], "promot": [376, 393], "propag": [34, 41, 43, 314, 353], "properli": [47, 301, 311], "properti": [322, 380, 397], "proport": [17, 52, 53, 54, 109, 236, 397], "propos": [35, 38, 47, 74, 80, 82, 83, 90, 91, 98, 100, 122, 153, 301, 326, 331, 332, 345, 350, 363], "propto": [144, 346, 386, 388], "protocol": 97, "prototyp": 78, "provid": [2, 5, 6, 10, 11, 12, 14, 17, 20, 21, 23, 26, 28, 47, 56, 57, 58, 59, 60, 61, 62, 63, 86, 91, 99, 109, 136, 148, 167, 169, 170, 172, 173, 174, 178, 180, 185, 186, 187, 188, 189, 190, 193, 194, 199, 207, 208, 209, 210, 211, 226, 243, 257, 258, 260, 268, 292, 297, 301, 307, 310, 314, 315, 316, 317, 319, 320, 327, 328, 335, 336, 337, 338, 339, 342, 349, 351, 375, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 392, 394, 396, 397], "prox": [120, 124, 125, 126, 127, 128, 129, 130, 131, 133, 138, 140, 141, 142, 145, 146, 147, 148, 150, 151, 152, 153, 155, 157, 158, 170, 178, 184, 186, 199, 252, 301, 326, 327, 328, 336, 344, 362, 363, 364, 365, 386, 387], "prox_conjug": [120, 141, 145, 336], "prox_d": [120, 145], "prox_d_conjug": [120, 145], "prox_l0": 109, "prox_l1": 109, "prox_l2": [12, 52, 174, 177, 184, 257, 316, 380], "prox_tau_fx": 104, "proxim": [103, 104, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 138, 140, 141, 142, 145, 146, 147, 148, 149, 157, 174, 177, 183, 184, 255, 274, 275, 276, 308, 316, 326, 327, 328, 336, 338, 339, 344, 364, 366, 386, 387, 390], "pseudo": [12, 52, 77, 170, 178, 183, 186, 191, 198, 199, 206, 208, 301, 304, 307, 316, 319, 355, 380, 385], "pseudoinvers": [77, 171, 174, 178, 182, 184, 192, 208, 383], "pseudorandom": [171, 180, 183, 185, 189, 193, 194, 198, 200, 201, 209, 210, 243], "psf": [169, 184, 192, 233, 234, 235, 240, 241, 243, 244, 284, 292, 295, 301, 307, 323, 324, 325, 374], "psf_coll": 314, "psf_confoc": 314, "psf_gener": [202, 244, 307], "psf_grid": [202, 307], "psf_log": 301, "psf_size": [202, 233, 234, 235, 239, 240, 241, 243, 244, 307, 314, 380], "psf_size_xi": 314, "psf_size_z": 314, "psfgener": [233, 234, 235, 240, 244, 307, 314], "psi": [109, 110, 148, 326, 328, 387], "psi_": 326, "psi_1": 110, "psi_2": 110, "psi_i": 301, "psi_l": 110, "psnr": [80, 114, 184, 250, 252, 257, 273, 274, 301, 304, 308, 310, 315, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 394], "psnr_epll": 332, "psnr_fbp": 332, "psnr_ob": 331, "psnr_patchnr": 332, "psnr_recon": 331, "psnr_std": [304, 308, 321, 335, 338, 349, 351, 352, 353, 354, 355, 356, 357, 364, 365], "pt": [17, 89, 122, 136, 331, 332, 345], "pth": [12, 100, 171, 183, 191, 198, 201, 304, 313, 315, 319, 320, 335, 336, 346, 349, 350, 351, 352, 353, 354, 355, 356, 365], "ptwt": [109, 110, 313], "ptychographi": [120, 126, 141, 161, 191, 192, 196, 247, 248, 284, 285, 290, 292, 323, 324, 325, 374, 381], "ptychographylinearoper": [195, 381], "public": [118, 337, 370], "pula": 342, "pula_mean": 342, "pula_var": 342, "pulaiter": 342, "pull": 370, "pupil": [233, 234, 235, 307, 314], "pupil_s": [233, 234, 235], "pure": [87, 182, 252, 262, 268, 319, 350], "purpos": [29, 313, 319], "push": 332, "put": [13, 15, 16, 18, 22, 25, 26, 27, 230], "pxxx": 14, "py": [301, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 368, 374], "pyiqa": [66, 71, 335], "pyplot": [312, 315, 318, 326, 344], "pytest": 370, "python": [79, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 370], "python3": [322, 349], "pytorch": [82, 83, 84, 87, 88, 92, 94, 101, 102, 109, 110, 171, 198, 201, 243, 307, 308, 309, 310, 312, 313, 314, 317, 321, 322, 326, 327, 328, 335, 336, 337, 338, 339, 345, 346, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 379, 392, 395], "pywavelet": 109, "pywt": 148, "q": [59, 60, 61, 62, 63, 74, 123, 304, 345, 382], "qk": 102, "qk_scale": 102, "qkv_bia": 102, "qnr": [319, 394], "qquad": [114, 123, 135, 387], "qr": 167, "quad": [52, 54, 61, 114, 192, 196, 304, 326, 332, 382, 386, 387], "quadrat": [89, 119, 122, 149, 155, 252, 274, 275, 276, 280, 331, 332, 335, 349, 351, 361, 387], "qualit": 385, "qualiti": [71, 74, 172, 304, 321, 364, 365, 382, 385], "quantif": [35, 86, 88, 120, 130, 141, 142, 144, 174, 180, 183, 184, 189, 192, 254, 256, 284, 290, 292, 325, 347, 348, 372, 374], "quantifi": 346, "quantiti": [56, 58, 184, 314], "quantiz": [184, 192], "queri": [20, 102], "question": [370, 371], "quick": [26, 304, 311, 320], "quickbird": 23, "quickli": [377, 385], "quickstart": 12, "quit": 301, "r": [35, 38, 43, 45, 47, 48, 52, 53, 54, 77, 84, 92, 94, 97, 103, 114, 124, 125, 139, 140, 141, 171, 174, 183, 197, 200, 257, 301, 311, 312, 314, 316, 336, 338, 342, 344, 345, 353, 356, 357, 364, 365, 375, 382, 383, 386, 387], "r2": 103, "r2d2": 301, "r2r": [12, 19, 28, 39, 45, 77, 86, 99, 107, 174, 176, 179, 180, 184, 189, 192, 194, 282, 284, 325, 358, 359, 374], "r2rloss": [354, 393], "r_": [200, 312, 342, 352], "rachford": [149, 152, 274, 275, 276, 366, 387], "radford": [82, 83], "radio": [114, 120, 130, 141, 142, 148, 149, 184, 192, 197, 281, 283, 285, 292, 293, 294, 302, 303, 325, 374, 381], "radiointerferometri": [301, 381], "radiu": [124, 125, 126, 196, 208, 217, 233, 247, 248, 313, 365], "radon": [208, 216, 317, 332, 379], "rai": [208, 217], "rais": [66, 71, 142], "ramp": [208, 216], "rand": [32, 44, 74, 105, 106, 172, 180, 182, 185, 193, 194, 209, 210, 233, 235, 268, 292, 295, 297, 314, 317, 377, 380, 397], "rand_lik": [178, 189], "randn": [127, 171, 174, 176, 178, 183, 184, 186, 188, 190, 198, 199, 201, 208, 211, 262, 269, 270, 271, 272, 276, 380, 384, 390], "randn_lik": [38, 189, 301, 315, 318, 342, 344, 345, 379], "random": [12, 17, 28, 29, 32, 33, 34, 41, 42, 44, 46, 48, 52, 53, 54, 84, 85, 86, 87, 88, 91, 92, 101, 102, 114, 120, 127, 130, 135, 136, 138, 141, 142, 149, 154, 161, 162, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 205, 206, 208, 209, 210, 230, 231, 232, 234, 236, 237, 238, 239, 240, 243, 244, 245, 246, 250, 252, 254, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 284, 285, 290, 292, 298, 301, 304, 307, 308, 309, 310, 314, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 335, 336, 337, 338, 339, 345, 346, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 374, 380, 381, 382, 384, 393, 396, 397], "random_lat": 80, "random_phantom": 364, "random_split": [304, 350], "randomappli": 268, "randomcrop": [13, 15, 16, 18, 22, 25, 27, 321, 361, 365, 366], "randomeras": 322, "randomli": [12, 14, 17, 28, 32, 41, 42, 46, 48, 91, 137, 230, 231, 236, 237, 238, 239, 243, 245, 257, 261, 263, 264, 266, 267, 268, 307, 311, 314, 320, 321, 345, 349, 355, 365, 392, 397], "randomlossschedul": 393, "randommaskgener": [14, 178, 186, 188, 199, 237, 317, 380, 381], "randomphantomdataset": 364, "randomphaseretriev": [315, 381], "randon": [41, 42], "rang": [12, 16, 25, 38, 66, 71, 87, 100, 102, 123, 192, 200, 252, 253, 264, 268, 284, 301, 307, 313, 315, 316, 318, 320, 322, 323, 324, 325, 326, 328, 332, 344, 345, 349, 350, 351, 352, 362, 364, 365, 374, 387, 395, 397], "rangl": [115, 141], "rapidli": 335, "rare": [32, 230, 349], "rate": [12, 80, 85, 101, 102, 236, 304, 310], "rather": [144, 197, 313, 317, 344, 345, 388, 394], "ratio": [48, 73, 97, 102, 172, 190, 232, 235, 238, 253, 301, 312, 315, 317, 355], "raw": [13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 27, 187, 311, 349, 351, 392], "raw_hf_train_dataset": 311, "rawfastmritrain": 320, "rcparam": 344, "re": [45, 61, 62, 63, 74, 85, 315, 317, 319], "re_init": 85, "reach": [114, 123, 167, 236, 308, 336, 338], "read": [17, 301, 311, 386], "reader": [301, 395], "readi": [301, 304, 307, 314, 326, 345, 373], "readili": [301, 326, 344, 345], "readm": 17, "real": [16, 19, 20, 22, 31, 56, 57, 58, 98, 111, 178, 186, 187, 188, 197, 199, 220, 223, 301, 315, 317, 320, 384, 392], "real_fft": [219, 220, 222, 223], "real_imag": 111, "real_label": 57, "real_project": [197, 301], "realis": [48, 355], "realist": 391, "realiz": [12, 45, 48, 233, 234, 235, 301, 327, 328, 344], "reason": [20, 301, 326], "rec": [316, 361, 362, 363, 366, 382], "rec601": 173, "recal": [91, 274, 365, 390], "receiv": [202, 352], "reciproc": 268, "recognit": [119, 335], "recommend": [85, 100, 104, 148, 171, 184, 201, 310, 316, 317, 321, 344, 345, 350, 353, 354, 355, 356, 357, 365, 387, 395], "recomposit": 109, "recon": [17, 301, 327, 328, 336, 337, 339, 345, 362, 363], "recon_epl": 332, "recon_patchnr": 332, "reconstruct": [1, 2, 4, 5, 12, 17, 19, 25, 26, 28, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 84, 85, 86, 99, 102, 105, 106, 107, 108, 113, 114, 120, 122, 130, 135, 138, 141, 142, 149, 154, 161, 162, 171, 172, 174, 178, 180, 183, 184, 185, 186, 187, 188, 189, 191, 192, 196, 197, 198, 199, 206, 207, 208, 217, 230, 231, 232, 237, 242, 243, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 280, 282, 284, 285, 287, 290, 292, 297, 301, 304, 320, 322, 323, 324, 325, 327, 328, 331, 336, 337, 338, 339, 342, 344, 346, 347, 348, 350, 355, 358, 359, 361, 362, 363, 364, 366, 374, 376, 379, 382, 383, 384, 388, 389, 390, 392, 393, 394, 396], "reconstructor": [44, 47, 48, 77, 80, 85, 86, 105, 114, 250, 251, 252, 280, 383, 385], "reconstrunct": 112, "record": 20, "recorrupt": 45, "recorrupted2recorrupt": [45, 354], "recov": [182, 262, 301, 315, 319, 322, 327, 328, 349, 375, 385], "recoveri": 319, "recreat": 174, "rectangular": 167, "red": [19, 28, 92, 114, 120, 130, 141, 142, 144, 149, 177, 180, 184, 189, 192, 257, 284, 287, 288, 312, 325, 337, 340, 341, 374, 375, 387], "redefin": [301, 327, 328, 364], "reduc": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 89, 97, 122, 148, 178, 187, 301, 310, 344, 345, 351, 352, 353, 354, 355, 356, 357, 363, 394], "reduced_alpha_cumprod": 344, "reduct": [12, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 102, 203, 363, 394], "redund": [20, 326], "refer": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 32, 34, 39, 41, 44, 48, 56, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 161, 185, 205, 206, 304, 319, 332, 344, 376, 382, 391], "refin": 100, "reflect": [91, 169, 177, 190, 202, 218, 221, 229, 244, 262, 265, 267, 269, 270, 271, 272, 307, 322, 326, 350, 384, 397], "reformul": [362, 365], "refract": [233, 235, 314], "reg": [114, 127, 129, 142, 143, 144, 146, 147, 148, 163, 376, 386, 387, 388, 390], "reg_l2": 38, "region": [196, 301, 318, 344, 393], "regnam": [114, 129, 135, 138, 141, 142, 143, 147, 148, 150, 151, 152, 153, 154, 155, 157, 160, 328, 365, 386, 387], "regress": 182, "regular": [19, 28, 43, 88, 92, 103, 104, 114, 120, 123, 127, 129, 130, 135, 141, 142, 143, 144, 146, 147, 148, 149, 158, 162, 163, 167, 177, 180, 182, 184, 189, 192, 255, 256, 257, 273, 274, 275, 276, 284, 287, 288, 307, 308, 310, 313, 315, 325, 326, 327, 328, 332, 339, 340, 341, 346, 353, 361, 362, 363, 366, 372, 374, 376, 380, 386, 387, 390, 394], "regularis": [38, 108, 114, 123, 149, 274, 275, 276, 301, 327, 328, 344, 365], "regularizi": 332, "regval": 38, "reimplement": [61, 268], "reinstal": 373, "rel": [64, 162, 167, 168, 184, 192, 304, 326, 378, 394], "rel_crit": 326, "relat": [17, 314, 320, 336, 349, 362, 363], "relationship": 301, "relax": [92, 103, 104, 135, 150, 151, 152, 366, 387], "relaxation_step": 135, "releas": 322, "relev": [12, 114, 149, 274, 275, 276, 280, 345, 391], "reli": [142, 184, 197, 301, 304, 336, 384], "relu": [84, 88, 92, 194], "remain": [260, 316, 344], "remark": 345, "remot": [12, 23, 34, 39, 40, 49, 51, 52, 64, 76, 97, 172, 173, 177, 182, 184, 190, 192, 203, 204, 282, 292, 323, 324, 325, 374, 381], "remov": [12, 13, 15, 16, 20, 25, 27, 44, 45, 53, 77, 100, 106, 171, 178, 183, 207, 257, 258, 352, 375, 382, 384, 385], "remove_finish": 20, "render": 349, "renorm": [344, 345], "reparametr": 345, "repeat": [172, 207, 231, 236, 237, 245, 320, 326, 349, 364], "replac": [205, 206, 263, 264, 304, 361, 364, 366, 386, 390, 394], "replic": [169, 177, 190, 202, 218, 221, 229, 244, 307], "report": 349, "repositori": [43, 84, 87, 88, 92, 101, 102, 283, 285, 287, 288, 370, 372, 373, 377], "repres": [16, 21, 47, 89, 114, 122, 178, 182, 186, 187, 190, 195, 196, 199, 205, 237, 245, 247, 268, 279, 327, 328], "represent": [82, 83, 338], "reproduc": [20, 127, 171, 174, 176, 178, 183, 186, 188, 198, 201, 208, 250, 261, 307, 308, 309, 310, 314, 315, 317, 321, 326, 327, 328, 335, 336, 337, 338, 339, 346, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "reproducibli": 17, "request": 370, "requir": [12, 28, 33, 39, 74, 80, 109, 110, 114, 144, 151, 167, 188, 208, 216, 217, 250, 252, 254, 255, 256, 261, 268, 297, 304, 312, 316, 320, 322, 335, 336, 338, 339, 342, 343, 351, 365, 370, 378, 384, 385, 387, 388, 392, 393, 394, 395, 397], "requires_grad": [38, 50, 80, 173, 313], "requires_grad_": [38, 317, 332, 344, 345], "resampl": 265, "rescal": [12, 17, 87, 292, 295, 297, 301, 339, 344, 345, 392], "rescale_mod": [12, 30, 257, 292, 295, 297, 315, 373, 386, 387], "rese": 231, "research": [18, 369, 392], "reset": [12, 189, 231, 243, 254, 277, 396], "reset_metr": 12, "reset_rng": [189, 243], "reshap": [109, 301], "reshape_th": 109, "resi_connect": 102, "residu": [78, 102, 107, 114, 254, 344, 345], "resiz": [289, 290, 304, 311, 315, 318, 320, 322, 336, 339, 349, 350, 351], "resize_mod": [289, 290, 315, 336, 339], "resnet": 97, "resolut": [12, 15, 19, 22, 25, 27, 28, 34, 39, 41, 51, 86, 88, 90, 92, 97, 100, 101, 114, 120, 130, 138, 141, 142, 143, 149, 177, 180, 184, 189, 190, 192, 257, 265, 274, 276, 284, 287, 288, 292, 296, 301, 319, 325, 340, 341, 350, 367, 368, 374, 381, 382, 391, 392], "resolv": [18, 27, 44, 233, 234, 235, 242, 304, 313, 314, 315, 319, 320, 326, 331, 332, 336, 338, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 373, 386], "reson": [44, 178, 186, 199, 242, 320, 381], "resp": 366, "respect": [26, 91, 121, 135, 234, 235, 259, 268, 307, 314, 322, 357, 364, 384, 389, 390], "respiratori": [44, 242], "respons": [173, 190, 200, 202, 307, 312, 319], "rest": [23, 119, 230, 319], "restart": 104, "restor": [13, 22, 84, 100, 102, 119, 122, 250, 252, 301, 308, 319, 331, 332, 335, 337, 338, 361, 362, 363, 366, 372, 375, 384, 388, 391, 392], "restorm": [384, 391], "restrict": [208, 251, 317], "result": [12, 48, 182, 184, 188, 189, 192, 203, 204, 249, 252, 253, 255, 256, 268, 297, 304, 315, 317, 318, 319, 320, 322, 332, 344, 345, 349, 350, 355, 380, 390], "results_dir": [308, 313, 315, 326, 327, 328, 335, 336, 337, 338, 339, 361, 362, 363, 364, 366], "retain": [48, 184, 384], "retrain": 332, "retriev": [21, 84, 86, 112, 114, 120, 126, 130, 135, 138, 141, 142, 149, 154, 158, 161, 162, 191, 192, 195, 196, 198, 206, 247, 248, 262, 284, 285, 290, 292, 323, 324, 325, 345, 374, 381, 384, 387], "retrun": 168, "return": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 86, 87, 91, 94, 96, 97, 99, 101, 103, 104, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 204, 206, 207, 208, 209, 210, 211, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 244, 245, 246, 247, 248, 251, 254, 257, 258, 259, 260, 268, 273, 274, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 304, 307, 308, 309, 313, 314, 315, 316, 320, 322, 327, 328, 332, 336, 337, 338, 339, 342, 343, 344, 345, 346, 352, 363, 364, 365, 384, 387, 396], "return_anim": 297, "return_ax": 292, "return_fig": [292, 294, 295], "return_pan": [23, 319], "rev": 136, "revers": [344, 345, 379], "review": [190, 200], "revisit": 344, "rewrit": 396, "reynold": [268, 397], "rgb": [89, 122, 173, 181, 182, 190, 307, 316, 317, 319, 384, 392], "rho": [104, 344, 345], "rho_t": [252, 344], "right": [45, 52, 53, 54, 59, 60, 61, 62, 63, 115, 120, 124, 125, 141, 144, 145, 164, 171, 172, 184, 192, 195, 196, 198, 214, 240, 252, 256, 273, 294, 304, 314, 337, 342, 344, 346, 352, 356, 357, 362, 378, 382, 387, 388, 390, 394], "right_precon": 164, "rightarrow": 268, "rigid": 397, "risk": 319, "rm": [314, 345], "rmtree": [13, 15, 16, 17, 25, 27], "rng": [17, 41, 42, 52, 53, 54, 171, 172, 180, 183, 185, 189, 193, 194, 198, 200, 201, 205, 209, 210, 230, 231, 232, 234, 236, 237, 238, 239, 240, 242, 243, 245, 246, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 320], "rng_manual_se": [189, 243], "robust": [100, 107, 208, 307, 322], "role": 346, "roll": [184, 211, 267], "roll_reflect_1d": 267, "root": [13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 187, 188, 287, 288, 304, 320, 350, 352, 353, 354, 355, 356, 357, 362, 363, 370, 392], "root_dir": [14, 23, 26], "rotat": [34, 91, 208, 214, 217, 262, 268, 269, 270, 271, 272, 322, 350, 351, 352, 384, 393, 397], "roto": 322, "rotoreflect": 322, "rotoshift": [268, 397], "roughli": [332, 393], "round": 201, "routin": [387, 390], "row": [112, 237, 292, 295], "rss": [17, 26, 187, 188, 320, 392], "rtol": 162, "rule": [114, 120, 145, 345], "run": [12, 79, 80, 84, 85, 88, 100, 102, 107, 109, 110, 114, 119, 149, 162, 250, 251, 252, 253, 254, 256, 274, 275, 276, 301, 304, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 335, 336, 337, 338, 339, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 370], "rung": [255, 388], "runner": [301, 304, 312, 313, 315, 317, 319, 320, 331, 332, 335, 336, 338, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356], "runtim": [169, 310], "rvert": [61, 304, 382], "rx": 208, "s_": 342, "s_i": 41, "s_n": 188, "s_sequential_indic": 314, "s_t": 199, "safer": 12, "saito": 118, "sake": 320, "sam": [76, 319], "same": [12, 16, 17, 20, 21, 28, 48, 68, 69, 87, 94, 100, 103, 104, 109, 114, 120, 124, 125, 126, 128, 132, 133, 145, 146, 149, 169, 171, 177, 189, 190, 198, 202, 206, 216, 218, 219, 220, 221, 222, 223, 227, 228, 229, 235, 260, 261, 268, 274, 275, 276, 281, 291, 292, 294, 295, 297, 298, 299, 300, 304, 307, 312, 313, 320, 322, 342, 351, 352, 353, 356, 364, 365, 380, 387, 391, 396], "sampl": [0, 12, 14, 16, 17, 19, 21, 26, 28, 29, 32, 34, 41, 42, 44, 45, 47, 48, 80, 83, 86, 91, 94, 101, 108, 120, 130, 140, 141, 142, 144, 170, 171, 174, 178, 180, 182, 183, 184, 186, 188, 189, 192, 197, 198, 199, 206, 208, 226, 231, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 265, 284, 290, 292, 304, 307, 311, 314, 316, 317, 318, 319, 320, 322, 338, 345, 348, 349, 350, 352, 362, 363, 374, 375, 380, 381, 384, 385, 388, 392, 396], "sample_index": 26, "sample_mask": [231, 236, 245], "sampler": [97, 253, 254, 255, 256, 345, 349, 388], "samples_loc": [197, 301], "samuel": 372, "saniti": 268, "sar": 179, "sara": 301, "satellit": [12, 23, 34, 39, 40, 49, 51, 52, 64, 76, 97, 172, 173, 177, 182, 184, 190, 192, 203, 204, 282, 292, 323, 324, 325, 374, 392], "satisfi": [151, 153, 157, 158], "satur": [184, 192], "saunder": 168, "save": [12, 13, 15, 16, 17, 18, 21, 22, 25, 26, 27, 28, 32, 44, 45, 47, 48, 86, 102, 109, 120, 124, 138, 141, 142, 171, 174, 183, 184, 191, 192, 198, 201, 253, 257, 260, 274, 276, 284, 292, 293, 294, 295, 296, 297, 304, 308, 309, 311, 320, 321, 323, 324, 325, 327, 328, 335, 337, 338, 339, 344, 349, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 366, 374, 392, 396], "save_chain": [253, 254, 255, 256], "save_dir": [28, 292, 293, 295, 296, 304, 308, 309, 315, 320, 321, 335, 336, 337, 338, 339, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 392], "save_fn": [292, 294, 297], "save_fold": [257, 308, 335, 338, 364], "save_iter": 251, "save_metadata_to_cach": [14, 17], "save_model": [12, 260], "save_path": [12, 171, 183, 191, 198, 201, 304, 320, 321, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "save_physics_generator_param": [28, 320], "save_simple_dataset": [17, 26], "save_step": 344, "sax": 14, "sbr": 312, "scalar": [12, 55, 167, 181, 226, 260, 314, 386, 387], "scale": [22, 23, 45, 81, 87, 100, 102, 105, 106, 107, 124, 172, 179, 238, 240, 260, 262, 268, 272, 301, 304, 308, 309, 315, 319, 320, 321, 322, 327, 328, 335, 336, 337, 338, 339, 350, 352, 353, 354, 355, 356, 357, 361, 364, 365, 366, 379, 397], "scale_factor": 97, "scale_out": 81, "scan": [12, 17, 21, 39, 51, 95, 96, 120, 135, 141, 142, 151, 159, 160, 180, 184, 189, 192, 208, 217, 233, 274, 276, 284, 325, 367, 368, 374, 379, 392], "scan_fold": 21, "scanvic": 350, "scatter": [301, 307], "scatter_plot": 301, "scene": [23, 27, 181, 182, 200, 312, 350, 392], "schedul": [12, 33, 36, 37, 46, 50, 252, 304, 321, 343, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "scheme": [301, 351, 352], "schlemper": 237, "school": 369, "sci": [103, 164], "scienc": [151, 369], "scipi": 168, "score": [47, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 144, 315, 342, 345, 346], "scoreloss": 393, "scoremodel": 47, "scoreprior": [254, 255, 256, 342, 346, 387, 388], "scratch": [304, 319, 349, 351, 352, 353, 356, 396], "screen": [20, 21], "script": [301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "scunet": [384, 391], "sd": [172, 319], "sde": 385, "seamlessli": [279, 307, 357, 395, 397], "search": [311, 331, 332], "second": [46, 53, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 87, 89, 114, 122, 135, 178, 183, 184, 186, 190, 199, 200, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 380, 387], "second_deriv": 53, "secondli": 344, "section": [6, 344], "see": [12, 14, 17, 23, 32, 34, 41, 42, 43, 44, 45, 47, 48, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 75, 76, 77, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 98, 101, 102, 103, 104, 110, 114, 119, 122, 123, 149, 150, 164, 165, 171, 172, 175, 178, 179, 182, 183, 184, 186, 187, 188, 190, 192, 199, 200, 201, 203, 204, 208, 235, 236, 237, 240, 244, 245, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 292, 295, 297, 301, 310, 312, 314, 317, 319, 322, 336, 342, 345, 346, 349, 350, 351, 355, 356, 357, 362, 363, 365, 376, 378, 380, 382, 384, 386, 387, 390, 392, 393, 394, 396, 397], "seealso": 349, "seed": [127, 171, 174, 176, 178, 180, 183, 185, 186, 188, 189, 193, 194, 198, 201, 208, 209, 210, 231, 232, 234, 239, 240, 243, 244, 246, 250, 251, 252, 254, 261, 307, 308, 309, 310, 311, 314, 315, 317, 321, 326, 327, 328, 335, 336, 337, 338, 339, 346, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "seek": [319, 326], "segment": [13, 392], "select": [15, 17, 19, 20, 22, 32, 33, 36, 37, 41, 42, 46, 50, 114, 137, 230, 236, 237, 239, 243, 245, 263, 264, 268, 284, 301, 308, 313, 327, 328, 335, 336, 337, 338, 339, 354, 361, 362, 363, 365, 366, 397], "self": [12, 13, 15, 16, 17, 18, 19, 21, 22, 25, 26, 27, 28, 32, 34, 39, 40, 42, 43, 44, 45, 48, 52, 53, 54, 77, 86, 99, 107, 125, 142, 171, 174, 176, 178, 179, 180, 183, 184, 186, 187, 189, 191, 192, 194, 198, 199, 201, 207, 208, 231, 232, 237, 238, 243, 245, 250, 254, 264, 265, 268, 274, 280, 282, 284, 288, 292, 297, 301, 308, 311, 312, 316, 319, 320, 322, 332, 336, 338, 342, 350, 359, 364, 372, 374, 375, 380, 382, 385, 396, 397], "selfexsr": 25, "semigroup": 262, "send": 370, "sens": [12, 19, 23, 28, 34, 39, 40, 41, 42, 49, 51, 52, 59, 60, 64, 76, 80, 97, 120, 130, 141, 142, 148, 157, 168, 169, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 186, 187, 189, 190, 192, 193, 194, 201, 203, 204, 208, 214, 231, 236, 237, 243, 245, 274, 276, 282, 284, 285, 290, 292, 296, 301, 304, 323, 324, 325, 345, 363, 367, 368, 369, 374, 381, 392], "sensit": [52, 53, 54, 108, 188, 314, 320], "sensitivity_model": [108, 320], "sensitv": 188, "sensor": [34, 41, 42, 171, 182, 184, 191, 192, 204, 208], "sensor_model": [184, 192], "separ": [23, 111, 182, 286, 331], "seq": [344, 345], "seq_next": 345, "sequenc": [14, 32, 44, 87, 197, 199, 201, 251, 252, 297, 301, 320, 326, 344, 349, 377, 392], "sequenti": [32, 36, 37, 44, 79, 199, 234, 311, 349, 393], "sequentialmri": [32, 44, 349, 381], "seri": [88, 349], "series_uid": 21, "serv": [20, 109, 383, 387], "server": [311, 370, 371], "set": [6, 12, 17, 19, 20, 23, 26, 27, 28, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 48, 51, 56, 58, 70, 73, 75, 84, 85, 87, 88, 91, 92, 100, 101, 102, 109, 125, 130, 136, 144, 148, 150, 151, 152, 163, 172, 178, 180, 182, 183, 184, 185, 186, 188, 189, 192, 193, 194, 197, 199, 204, 209, 210, 239, 243, 244, 254, 256, 257, 259, 262, 263, 264, 268, 282, 301, 307, 309, 310, 313, 314, 315, 317, 319, 320, 326, 331, 337, 338, 342, 343, 346, 349, 350, 355, 361, 362, 363, 364, 366, 380, 381, 385, 386, 388, 394, 395], "set14": 25, "set14_sr": 25, "set14hr": 392, "set3": 309, "set3c": [308, 309, 321, 327, 328, 335, 336, 338, 361, 365, 366], "set_cov": 163, "set_cov_reg": 163, "set_descript": 332, "set_ls_solv": 192, "set_noise_model": [192, 204, 381], "set_to_non": 259, "set_weight": 163, "setup": [12, 260], "setup_train": [12, 260], "setweight": 301, "sever": [208, 217, 311, 319, 326], "shake": 20, "shannon": [234, 235, 307, 314], "shape": [14, 17, 20, 21, 24, 26, 29, 30, 31, 32, 44, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 84, 89, 90, 93, 95, 96, 97, 100, 102, 103, 104, 105, 106, 109, 113, 122, 125, 146, 163, 164, 165, 167, 168, 171, 172, 178, 179, 182, 183, 186, 187, 188, 190, 195, 196, 198, 199, 201, 205, 206, 207, 219, 220, 222, 223, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 247, 264, 268, 279, 292, 295, 297, 301, 307, 308, 310, 315, 317, 318, 319, 320, 326, 328, 331, 332, 343, 344, 345, 346, 349, 362, 363, 380, 384, 387, 392, 397], "shard": 22, "share": [349, 363], "shared_weight": 206, "sharp": [20, 392], "sharp_fram": 20, "sharpen": [23, 64, 97, 190, 389, 394], "shear": [172, 236, 350, 397], "shear_dir": 172, "shelf": [385, 386, 389], "shepp": 315, "sheppard": 314, "shepplogan": [315, 339], "shepplogandataset": 364, "shift": [87, 161, 184, 195, 196, 211, 248, 262, 267, 268, 269, 270, 272, 315, 318, 322, 350, 397], "shift_max": [262, 266, 269, 270, 271, 272, 322], "shifttim": 397, "short": [14, 320, 321, 365, 392], "shot": [20, 392], "should": [12, 13, 18, 23, 25, 27, 28, 32, 44, 45, 47, 48, 52, 53, 54, 57, 70, 85, 100, 102, 109, 142, 149, 151, 153, 156, 157, 158, 170, 171, 173, 174, 178, 181, 184, 185, 186, 187, 188, 189, 197, 201, 208, 211, 217, 230, 232, 233, 234, 235, 240, 242, 243, 250, 252, 254, 256, 257, 258, 268, 274, 275, 276, 292, 295, 297, 301, 310, 311, 312, 314, 315, 336, 339, 351, 361, 387, 396], "show": [12, 20, 28, 114, 123, 202, 207, 257, 292, 293, 294, 295, 296, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 326, 327, 328, 335, 336, 337, 339, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 356, 357, 361, 362, 363, 366, 380], "show_progress_bar": [12, 28, 123, 257, 304, 319, 320, 321, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "showcas": 315, "shown": [118, 294, 301, 312, 337, 382, 386], "shrinkag": 387, "shuffl": [12, 17, 21, 84, 92, 304, 308, 309, 320, 321, 332, 335, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 392, 396], "shutil": [13, 15, 16, 17, 25, 27], "siam": [88, 103, 164], "side": [67, 292, 297], "sigma": [45, 47, 52, 53, 78, 79, 84, 86, 87, 88, 89, 91, 94, 100, 101, 102, 107, 119, 122, 130, 131, 138, 143, 144, 151, 155, 176, 180, 190, 192, 193, 200, 209, 214, 240, 243, 246, 250, 251, 252, 255, 256, 274, 307, 308, 310, 312, 313, 316, 317, 322, 326, 327, 328, 331, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 354, 357, 361, 364, 365, 366, 373, 376, 380, 381, 384, 386, 387, 388, 392, 394], "sigma2": 357, "sigma2_nois": 342, "sigma_": [172, 209, 394], "sigma_cur": [344, 345], "sigma_d": 342, "sigma_denois": [138, 143, 144, 313, 335, 337, 338, 346, 361, 365, 366], "sigma_dict": 246, "sigma_i": [214, 345], "sigma_init": 357, "sigma_k": 344, "sigma_max": [209, 246], "sigma_min": [209, 246], "sigma_n": 252, "sigma_nois": 344, "sigma_sq": [89, 122], "sigma_t": [344, 345], "sigma_tild": 345, "sigma_x": [214, 394], "sigmagener": [243, 380, 392], "sigmat": 345, "sigmoid": 98, "sign": [17, 26, 128, 129, 171, 320, 349, 351], "signal": [12, 19, 28, 34, 40, 41, 42, 51, 73, 77, 99, 105, 124, 140, 144, 148, 162, 171, 174, 182, 184, 191, 192, 198, 200, 204, 205, 206, 208, 224, 238, 258, 307, 309, 314, 316, 317, 318, 349, 373, 375, 376, 382, 385, 386, 387, 393], "signific": [342, 370], "significantli": 364, "sigpi": 188, "sim": [34, 41, 45, 52, 53, 54, 59, 60, 61, 62, 63, 91, 171, 180, 193, 198, 209, 210, 240, 256, 304, 331, 332, 345, 346, 357, 381, 382], "simeq": 345, "similar": [48, 66, 75, 76, 162, 171, 183, 191, 198, 201, 226, 262, 268, 279, 315, 322, 350, 379, 394, 397], "similarli": [313, 365, 392], "simlarli": 301, "simpl": [17, 26, 60, 61, 63, 78, 80, 97, 178, 186, 199, 301, 304, 308, 309, 311, 313, 316, 317, 318, 320, 321, 322, 336, 337, 342, 343, 346, 352, 353, 354, 355, 356, 357, 364, 366, 378, 382, 396], "simple_set": 17, "simplefastmrislicedataset": [17, 320, 349, 351, 392], "simpler": 344, "simplest": 383, "simpli": [51, 108, 190, 207, 211, 273, 292, 304, 320, 332, 344, 345, 349, 363, 384, 395], "simplic": [301, 304, 344, 361, 366], "simul": [12, 182, 188, 199, 271, 314, 318, 320, 322, 349, 375, 379, 396, 397], "simulate_birdcage_csm": 188, "simultan": [48, 183, 232, 238], "sin": [214, 314], "sinc": [26, 45, 77, 109, 123, 124, 126, 161, 169, 171, 177, 201, 215, 304, 310, 319, 320, 342, 345, 346, 373, 395], "sinc_filt": 381, "sine": [171, 224], "singl": [14, 17, 20, 28, 41, 42, 43, 100, 108, 109, 114, 135, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 169, 170, 172, 178, 184, 186, 192, 199, 200, 201, 203, 204, 234, 274, 275, 276, 277, 279, 284, 292, 294, 295, 301, 307, 313, 319, 320, 323, 324, 325, 326, 336, 343, 344, 349, 350, 351, 353, 362, 363, 364, 365, 366, 374, 380, 381, 386, 387, 388, 393, 394], "single_pixel": 336, "singlecoil": [14, 17, 26, 108, 320], "singlephotonlidar": [312, 381], "singlepixelcamera": [317, 336, 381], "singular": [170, 174, 178, 186, 199, 201, 250, 316, 342, 343, 378, 380], "sinogram": 317, "site": [22, 320, 322, 349, 351], "situat": [307, 326], "size": [12, 14, 15, 16, 17, 24, 25, 28, 32, 39, 44, 48, 52, 53, 54, 55, 56, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 83, 85, 87, 89, 93, 94, 97, 98, 102, 106, 113, 114, 115, 121, 122, 123, 124, 125, 126, 128, 131, 133, 136, 137, 140, 148, 151, 155, 163, 166, 167, 169, 170, 171, 172, 174, 175, 177, 178, 182, 183, 184, 185, 186, 188, 190, 192, 196, 197, 199, 200, 201, 202, 207, 208, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 244, 245, 246, 248, 255, 256, 268, 273, 289, 290, 292, 294, 295, 297, 301, 307, 310, 312, 314, 315, 317, 318, 319, 320, 321, 322, 326, 332, 335, 338, 342, 344, 345, 346, 349, 351, 355, 357, 362, 363, 364, 365, 376, 379, 380, 384, 387, 390, 392, 394, 397], "skew": [262, 269], "skew_max": [262, 269, 270, 271, 272], "skip": [107, 345, 349], "skrock": 388, "slice": [14, 17, 21, 26, 186, 188, 320, 384, 392], "slice_fnam": 21, "slice_ind": 17, "slice_index": [17, 320], "slicesampleid": 17, "slicesampleidentifi": 21, "slide": 94, "slow": [85, 169, 177, 304, 388], "slower": 307, "sm": 387, "small": [48, 53, 54, 89, 103, 108, 113, 122, 148, 165, 208, 217, 310, 320, 326, 332, 350, 355, 356, 357, 361, 366, 387, 392, 393], "smaller": [48, 87, 141, 163, 169, 177, 179, 190, 202, 218, 221, 229, 255, 256, 301, 308, 327, 328, 338, 387], "smi": 284, "smolyakov": [103, 104], "smooth": [139, 140, 363, 393, 397], "smoothli": 164, "smx": 172, "snapshot": [172, 319], "snippet": 301, "snu": 18, "so": [12, 20, 178, 186, 199, 230, 236, 237, 271, 301, 307, 315, 316, 319, 344, 345, 357, 366, 396], "soft": [12, 13, 19, 28, 39, 51, 109, 110, 120, 128, 130, 141, 142, 148, 153, 157, 168, 171, 184, 192, 274, 276, 282, 284, 292, 296, 313, 325, 326, 363, 365, 367, 368, 374], "softplu": [84, 92], "softwar": [103, 104, 369], "solut": [12, 104, 109, 110, 114, 123, 135, 164, 171, 184, 190, 192, 208, 273, 301, 315, 316, 326, 327, 328, 387, 390], "solv": [85, 103, 104, 114, 123, 151, 164, 165, 167, 168, 304, 315, 320, 322, 337, 338, 344, 345, 349, 361, 365, 372, 382, 385, 386, 387, 390], "solver": [146, 167, 171, 184, 192, 208], "some": [17, 33, 39, 100, 137, 171, 184, 192, 208, 301, 307, 310, 314, 316, 317, 322, 327, 328, 342, 345, 377, 380, 381, 384, 385, 386, 387, 389, 390, 392, 394, 395, 397], "sometim": 390, "somewhat": 310, "soon": 370, "sor": 171, "sort": 380, "sota": 388, "sourc": [12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 369, 370], "source_radiu": [208, 217], "sourcetensor": [317, 344, 345], "space": [17, 32, 44, 78, 89, 108, 122, 137, 197, 199, 202, 207, 208, 217, 231, 236, 237, 244, 245, 301, 304, 317, 320, 322, 332, 349, 350, 351, 364, 387, 392], "spacevaryingblur": [244, 307, 381], "spacial": 301, "spars": [79, 168, 182, 197, 216, 217, 226, 301, 317], "sparsiti": [301, 326, 328, 384], "spatial": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 172, 202, 238, 301, 307, 379, 394], "special": [32, 44, 269, 270, 271, 272, 349, 397], "specif": [9, 17, 20, 45, 56, 58, 114, 119, 120, 123, 145, 172, 196, 307, 308, 316, 320, 335, 338, 339, 375, 380, 381, 383, 385, 390, 397], "specifi": [14, 15, 22, 26, 29, 50, 56, 58, 59, 60, 61, 62, 63, 88, 142, 156, 167, 175, 178, 186, 188, 199, 231, 232, 236, 245, 247, 260, 282, 297, 301, 307, 308, 314, 317, 327, 328, 335, 336, 338, 339, 354, 365, 366, 380, 393, 397], "speckl": 179, "spectra": 182, "spectral": [35, 38, 74, 76, 158, 162, 172, 173, 184, 190, 191, 319, 387, 393, 394], "spectral_method": [191, 315], "spectralanglemapp": [319, 394], "spectralanglemapper_std": 319, "spectrum": 182, "speed": [17, 28, 53, 104, 184, 304, 316, 319, 320, 349, 351, 364, 385], "sphinx": [301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "sphinx_gallery_multi_imag": [301, 344], "sphinx_gallery_thumbnail_numb": 344, "split": [12, 15, 17, 19, 22, 26, 28, 32, 39, 40, 43, 44, 48, 77, 86, 89, 99, 103, 104, 107, 119, 122, 124, 135, 149, 151, 152, 155, 180, 184, 189, 192, 208, 230, 232, 238, 242, 252, 274, 275, 276, 280, 282, 284, 311, 320, 325, 331, 332, 335, 349, 351, 358, 359, 361, 365, 366, 374, 387, 392, 393], "split_ratio": [48, 183, 232, 238, 349, 355], "split_siz": [32, 230, 349], "splitter": 349, "splittingloss": [32, 44, 232, 238, 349, 355, 393], "splittingmodel": [44, 48], "spoke": [32, 44, 199], "spread": [233, 241], "sqrt": [73, 87, 103, 104, 112, 113, 171, 187, 201, 215, 240, 251, 252, 256, 301, 342, 343, 344, 345, 346, 357, 363, 387], "sqrt_1m_alphas_cumprod": 344, "sqrt_alphas_cumprod": 344, "sqrt_recip_alphas_cumprod": 344, "squar": [12, 17, 26, 32, 40, 42, 43, 44, 48, 51, 52, 53, 54, 57, 69, 72, 83, 97, 116, 161, 164, 165, 167, 168, 171, 184, 187, 188, 192, 208, 233, 234, 235, 238, 248, 258, 308, 320, 321, 344, 365, 382, 387], "sr": [22, 102], "src": [312, 322], "srf": [173, 190, 319], "sriram": 108, "ss": [12, 172], "ssdu": [48, 238, 355], "ssim": [36, 37, 46, 50, 349, 394], "ssim_std": 349, "stabil": [164, 165, 167, 346], "stabilis": 255, "stabl": [52, 75, 292, 295, 297, 373], "stack": [17, 49, 145, 184, 192, 203, 204, 268, 319, 349, 380, 397], "stackedlinearphys": [49, 145, 190], "stackedphys": [49, 145, 184, 192, 203, 380], "stackedphysicsdatafidel": 380, "stackedphysicsloss": [319, 380], "stage": [100, 101], "stand": 141, "standalon": 384, "standard": [12, 20, 51, 52, 53, 61, 74, 87, 89, 100, 114, 119, 122, 130, 165, 166, 176, 180, 181, 190, 193, 200, 209, 214, 232, 240, 255, 256, 257, 274, 275, 276, 277, 299, 304, 308, 312, 313, 315, 317, 319, 326, 327, 328, 331, 332, 335, 336, 339, 343, 344, 345, 346, 365, 376, 382, 384, 386, 387, 388, 390, 392, 394], "standart": [149, 275, 276, 338, 339], "star": [202, 229, 273, 390], "start": [135, 159, 160, 301, 316, 351, 352, 353, 354, 356], "stat": 164, "state": [12, 13, 189, 243, 301, 320, 372], "state_dict": [12, 259, 304, 313, 319, 320, 349, 350, 351, 352, 353, 354, 355, 356, 365], "state_dict_d": 304, "static": [17, 32, 44, 48, 103, 104, 105, 106, 109, 178, 187, 206, 207, 317, 345, 349], "statist": [45, 182, 254, 255, 256, 379, 388, 394], "std": [12, 343, 346, 377], "std_scale": 238, "stein": 319, "stem": 312, "step": [12, 32, 44, 45, 47, 48, 52, 53, 92, 107, 114, 115, 123, 124, 125, 126, 135, 140, 149, 151, 155, 156, 159, 160, 166, 178, 183, 199, 202, 208, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 252, 255, 256, 273, 274, 275, 276, 301, 307, 314, 317, 320, 326, 327, 328, 332, 335, 336, 338, 339, 342, 346, 349, 354, 357, 364, 380, 387, 390, 391, 392, 396], "step_ratio_d": 260, "step_siz": [52, 53, 166, 254, 255, 256, 304, 321, 342, 346, 351, 352, 353, 354, 356, 357, 361, 365, 366], "steplossschedul": 393, "steplr": [304, 321, 351, 352, 353, 354, 356, 361, 364, 365, 366], "stepsiz": [104, 114, 123, 124, 126, 127, 128, 129, 130, 141, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 274, 275, 276, 301, 308, 313, 315, 327, 328, 335, 336, 337, 338, 339, 361, 362, 363, 365, 366, 373, 386, 387, 390], "stepsize_du": [365, 387], "stepsize_int": 141, "stepz_pixel": [235, 314], "still": [268, 380], "stochast": [101, 102, 184, 192, 251, 255, 357, 376, 388], "stop": [80, 85, 114, 119, 123, 162, 163, 164, 165, 166, 167, 168, 192, 308, 310, 335, 336, 338, 386], "stopping_criterion": 163, "storag": [313, 319, 320, 349, 351, 352, 353, 354, 355, 356], "store": [19, 21, 28, 114, 123, 135, 169, 170, 171, 174, 177, 178, 198, 199, 201, 202, 230, 232, 238, 242, 246, 254, 268, 277, 282, 311, 377, 380, 387], "str": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 32, 44, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 87, 88, 89, 92, 93, 97, 100, 101, 102, 107, 108, 109, 110, 111, 114, 119, 122, 136, 148, 149, 163, 167, 169, 170, 171, 172, 173, 175, 177, 182, 184, 187, 188, 190, 192, 195, 196, 198, 200, 201, 202, 203, 205, 206, 208, 211, 216, 217, 218, 220, 221, 223, 229, 230, 232, 233, 234, 235, 238, 242, 243, 244, 246, 247, 251, 252, 257, 261, 262, 265, 267, 269, 270, 271, 272, 274, 275, 276, 277, 280, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 321, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "strategi": [45, 114, 231, 236, 245, 317], "strength": [158, 162, 185, 342, 346], "stretch": [262, 269], "strictli": 153, "stride": [24, 84, 92], "strideconv": [84, 92], "strike": 382, "string": [149, 206, 243, 274, 275, 276, 286, 377], "strong_convex": 93, "strongli": 93, "structur": [13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 27, 74, 75, 84, 178, 186, 199, 205, 206, 316, 379, 380, 392], "structural_similar": 75, "structural_similarity_index_measur": 70, "structuredrandom": [171, 381], "structuredrandomphaseretriev": 381, "study_uid": 21, "style": [30, 31, 32, 370, 392], "sub": [33, 36, 37, 46, 50, 148, 344, 362], "sub_net_s": [136, 332], "subband": 109, "subclass": [336, 364, 382], "subfold": 16, "subgroup": [262, 269, 270, 271, 272, 397], "subject": [20, 326], "submit": 370, "subnetwork": [136, 332], "suboptim": 344, "subpackag": [1, 392], "subplot": [312, 344], "subsampl": [14, 17, 48, 171, 177, 178, 186, 187, 188, 199, 201, 232, 238, 317], "subsample_volum": 17, "subselect": [33, 263], "subsequ": 17, "subset": [17, 23, 26, 48, 183, 232, 239, 320, 349, 351, 353, 354, 355, 356, 357, 392], "subsubfold": 16, "success": 382, "successfulli": [13, 15, 17, 25, 27, 304, 319, 350], "suffic": [307, 314], "suffici": [114, 345, 352], "suggest": [100, 124, 332, 344, 345, 371], "suit": [81, 387], "suitabl": [379, 394], "sum": [17, 26, 50, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 108, 135, 137, 148, 173, 178, 187, 188, 201, 203, 207, 243, 268, 279, 318, 320, 332, 343, 345, 346, 349, 363, 377, 379, 380, 387, 394, 397], "sum_": [45, 48, 91, 112, 113, 187, 202, 203, 229, 268, 326, 332, 352, 362, 387, 394], "sum_i": [49, 89, 118, 122, 127, 134, 137, 140, 145, 301, 322, 387], "summar": [376, 391], "summari": [375, 385], "summat": 163, "summer": 369, "sup": [36, 37, 46, 304], "sup_": 141, "supadversarialdiscriminatorloss": [56, 260, 304, 393], "supadversarialgeneratorloss": [58, 260, 304, 393], "super": [12, 15, 19, 22, 27, 28, 34, 39, 41, 51, 86, 88, 90, 92, 114, 120, 130, 138, 141, 142, 143, 149, 177, 180, 184, 189, 192, 233, 234, 235, 254, 257, 265, 274, 276, 284, 287, 288, 292, 296, 301, 308, 316, 319, 320, 325, 336, 340, 341, 342, 350, 364, 367, 368, 374, 381, 382, 392], "supervis": [12, 17, 19, 26, 28, 32, 34, 39, 40, 42, 43, 44, 45, 48, 51, 52, 53, 54, 59, 60, 77, 86, 99, 107, 174, 176, 178, 179, 180, 183, 184, 186, 187, 189, 192, 194, 199, 207, 208, 231, 232, 237, 238, 243, 245, 258, 264, 265, 268, 274, 280, 282, 284, 288, 292, 297, 304, 319, 320, 321, 322, 350, 359, 361, 362, 363, 364, 365, 366, 372, 374, 375, 380, 382, 385, 397], "suploss": [36, 37, 46, 258, 304, 319, 320, 321, 361, 362, 363, 364, 365, 366, 393, 394], "support": [19, 28, 47, 72, 79, 136, 148, 179, 189, 218, 219, 221, 222, 227, 228, 236, 237, 245, 260, 326, 375, 381, 392], "suppos": [322, 396], "suptitl": [292, 295, 307, 314, 326, 344, 361, 362, 363, 366], "sure": [12, 19, 28, 39, 52, 53, 54, 77, 86, 99, 107, 174, 176, 184, 189, 192, 194, 282, 284, 325, 346, 357, 358, 359, 370, 374], "suregaussianloss": [49, 319, 356, 357, 393], "surepgloss": [356, 357, 393], "surepoissonloss": [49, 356, 393], "surfix": 278, "surpris": 310, "survei": 182, "svd": [170, 173, 174, 183, 186, 201, 316, 388], "swin": [101, 102], "swinir": [384, 391], "switch": 268, "swz30": 391, "symmetr": [91, 268, 322, 384, 397], "symmetris": 268, "symposium": 369, "synchron": [12, 308, 309, 321, 335, 336, 338, 339, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366], "synthes": [20, 233, 234, 235, 307], "synthesi": [64, 101, 394], "synthet": 391, "system": [123, 164, 165, 167, 168, 286, 376, 380, 387], "t": [13, 14, 22, 32, 44, 66, 71, 74, 87, 94, 103, 104, 105, 106, 123, 139, 140, 144, 158, 162, 178, 181, 184, 199, 200, 207, 211, 230, 231, 236, 237, 238, 240, 242, 245, 251, 252, 257, 268, 284, 294, 297, 304, 309, 312, 317, 320, 322, 332, 339, 344, 345, 349, 350, 362, 363, 381, 382, 384, 385, 387, 393, 397], "t1": [326, 377], "t2": 377, "t3": 377, "t_": 268, "t_g": [34, 41, 91, 268], "t_hist": 123, "t_i": [322, 344], "t_im1": 344, "t_ix": 322, "t_l": 196, "t_max": 364, "t_temp": 344, "tabl": [362, 363, 370, 376], "tachella": 372, "tag": [114, 362, 387], "tail": 237, "take": [12, 13, 15, 16, 18, 21, 22, 23, 25, 27, 53, 54, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 83, 84, 87, 97, 105, 106, 111, 122, 123, 135, 136, 137, 208, 236, 260, 268, 317, 318, 332, 342, 344, 345, 355, 356, 384, 387, 393, 394], "taken": [20, 41, 42, 82, 83, 90, 146, 237, 294, 301, 322, 370, 389], "tangent": 310, "taohuang2018": 43, "tar": [12, 16, 18, 22, 27], "target": [14, 17, 51, 64, 70, 76, 197, 207, 301, 320], "target_transform": 16, "task": [22, 28, 100, 301, 382, 392], "tau": [52, 53, 54, 104, 114, 151, 301, 327, 328, 336, 337, 356, 357, 365, 387], "tau1": 53, "tau2": 53, "tau_1": 53, "tau_2": 53, "tcia": 21, "teboul": 104, "telescop": 301, "templat": [39, 86, 99, 207], "tempor": [44, 106, 207, 397], "tend": [171, 301], "tensor": [12, 14, 17, 20, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 250, 251, 252, 254, 260, 267, 268, 273, 274, 279, 281, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 307, 313, 314, 315, 316, 317, 318, 319, 322, 336, 338, 344, 345, 349, 362, 364, 377, 379, 380, 384, 387, 392, 394, 397], "tensor_in": [77, 108], "tensor_s": [32, 44, 48, 130, 174, 183, 230, 232, 238, 242, 250, 252, 310, 317, 321, 328, 331, 343, 344, 345, 346, 349, 352, 365, 380, 387], "tensorlist": [23, 49, 74, 97, 145, 184, 190, 192, 203, 204, 249, 281, 291, 298, 299, 300, 301, 319, 380], "tensorshap": 322, "term": [53, 89, 103, 104, 112, 114, 119, 120, 122, 123, 126, 129, 135, 141, 142, 143, 145, 147, 149, 151, 159, 160, 252, 274, 275, 276, 301, 308, 313, 327, 328, 335, 336, 337, 338, 339, 344, 345, 361, 362, 363, 365, 366, 376, 380, 386, 387, 390], "terminologi": 135, "terri": [301, 322, 372], "tessel": 261, "test": [8, 12, 17, 19, 20, 25, 26, 27, 28, 29, 32, 44, 45, 47, 48, 80, 85, 100, 101, 110, 184, 292, 304, 307, 308, 314, 315, 316, 319, 320, 335, 338, 370, 392, 396], "test_base_dataset": [352, 361, 362, 363, 365, 366], "test_batch_s": [321, 361, 362, 363, 364, 365, 366], "test_dataload": [12, 257, 304, 308, 321, 335, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "test_datapoint": [28, 352, 353, 354, 355, 356, 357, 362, 363], "test_dataset": [28, 304, 308, 309, 320, 321, 335, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 375, 392], "test_dataset_nam": [321, 361, 365, 366], "test_img": [331, 332], "test_psnr": [321, 365], "test_sampl": [361, 362, 363, 366], "test_transform": [321, 361, 365, 366], "text": [52, 54, 59, 60, 61, 62, 63, 66, 68, 69, 71, 72, 73, 74, 75, 91, 114, 124, 125, 126, 128, 130, 131, 141, 148, 158, 162, 167, 171, 172, 174, 183, 188, 191, 192, 196, 208, 209, 212, 213, 215, 246, 304, 322, 326, 327, 328, 350, 362, 363, 382, 387, 394], "tgv": 103, "tgvdenois": 384, "th": [103, 104, 109, 110, 112, 113, 129, 136, 256, 326, 332], "than": [23, 46, 48, 141, 153, 163, 167, 169, 171, 177, 190, 197, 201, 202, 211, 218, 221, 229, 233, 235, 255, 256, 292, 295, 301, 308, 309, 313, 317, 338, 344, 345, 355, 365, 387, 393, 394], "thank": [307, 314], "thei": [12, 19, 20, 28, 114, 142, 250, 320, 342, 363, 366, 379, 380, 382, 384, 390, 393, 394, 395, 396], "them": [20, 21, 26, 33, 109, 184, 196, 243, 259, 297, 320, 322, 325, 361, 362, 363, 384, 397], "themselv": [260, 304], "theorem": [234, 273, 307, 314, 345, 390], "theoret": [184, 322, 397], "theori": [103, 104, 234, 235, 307, 314, 387], "therefor": [108, 315, 375, 387], "therein": 314, "theta": [85, 214, 216, 217, 243, 251, 252, 268, 310, 316, 321, 332, 352, 380, 381], "theta2": 380, "theta_max": [262, 269, 270, 271, 272, 322, 350], "theta_z_max": [262, 269, 270, 271, 272, 322], "thi": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 23, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 57, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 82, 83, 85, 86, 87, 88, 90, 98, 100, 102, 103, 104, 107, 108, 109, 110, 112, 114, 119, 120, 121, 123, 124, 125, 126, 137, 142, 144, 145, 150, 155, 161, 162, 163, 169, 170, 171, 172, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 192, 194, 196, 197, 198, 199, 200, 201, 202, 207, 208, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 245, 250, 251, 252, 254, 257, 258, 260, 261, 268, 273, 274, 276, 282, 292, 296, 297, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 370, 380, 382, 383, 384, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397], "thin": [253, 254, 255, 256, 342], "third": [200, 312], "thorac": 21, "thorough": 322, "those": [148, 344], "three": [151, 182, 377], "three_d": [178, 186, 187, 188, 199, 320], "thres_conv": [114, 253, 308, 338], "thresh_conv": [254, 255, 256], "threshold": [12, 19, 28, 39, 50, 51, 109, 110, 114, 120, 128, 130, 131, 141, 142, 148, 153, 157, 161, 171, 184, 192, 253, 254, 256, 274, 276, 282, 284, 292, 296, 313, 325, 326, 363, 365, 367, 368, 374, 387], "threshold_3d": 109, "threshold_nd": 109, "thresold_2d": 109, "thresold_func": 109, "through": [32, 34, 35, 38, 41, 44, 48, 80, 81, 197, 263, 301, 307, 314, 316, 345, 380, 388, 393, 397], "thu": [17, 22, 85, 87, 93, 109, 110, 178, 186, 199, 208, 254, 255, 256, 311, 338, 364, 387], "ti": 276, "tight": [292, 295, 326], "tight_layout": [312, 344], "tikhonov": 387, "tild": [170, 171, 174, 178, 183, 184, 192, 194, 199, 208, 251, 345], "tilt": [262, 271, 350, 397], "time": [9, 12, 17, 32, 33, 36, 37, 44, 45, 46, 47, 48, 50, 80, 87, 89, 91, 105, 106, 114, 122, 167, 171, 174, 177, 178, 183, 197, 198, 199, 200, 207, 230, 231, 236, 237, 238, 245, 253, 257, 260, 263, 267, 268, 297, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 384, 386, 387, 392, 393], "time_dim": 297, "time_pair": 345, "timeagnosticnet": [32, 44, 384], "timeaveragingnet": 384, "timemixin": [105, 106, 178, 268, 378], "timestamp": [286, 377], "timestep": [87, 251, 252, 344, 345], "tini": 319, "tip": [255, 256], "tissu": 16, "titl": [202, 292, 294, 295, 297, 301, 307, 310, 312, 314, 315, 316, 317, 318, 319, 320, 322, 327, 328, 336, 337, 339, 342, 343, 344, 345, 346, 349, 361, 362, 363, 366, 377], "tkbn": 301, "to_complex": 17, "to_complex_denois": [315, 384], "to_logimag": 301, "to_stat": [106, 178], "to_torch_complex": 187, "tocomplex": 392, "togeth": [9, 322, 397], "toi": [319, 361], "tol": [35, 38, 164, 165, 166, 167, 168, 184, 192, 301, 387], "tol_int": 141, "toler": [35, 38, 80, 162, 164, 165, 166, 167, 168, 184, 192, 304], "tomographi": [12, 21, 24, 86, 88, 114, 120, 122, 130, 132, 136, 137, 138, 141, 142, 149, 174, 176, 180, 184, 185, 189, 192, 210, 284, 285, 290, 292, 293, 325, 333, 334, 340, 341, 355, 364, 374, 379, 381, 391], "too": [23, 28, 48, 70, 99, 182, 187, 260], "tool": [20, 301, 375], "toolbox": [307, 314, 379], "top": [45, 52, 53, 54, 77, 109, 110, 114, 120, 132, 133, 139, 145, 151, 167, 170, 171, 173, 174, 184, 186, 191, 192, 199, 201, 203, 208, 211, 273, 294, 301, 321, 325, 336, 342, 352, 356, 357, 364, 365, 376, 380, 383, 387, 390], "topk": [109, 110], "torch": [12, 14, 17, 19, 20, 21, 23, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 280, 281, 284, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 375, 377, 379, 380, 384, 387, 390, 392, 393, 394, 395, 397], "torch_shuffl": 17, "torchist": 226, "torchkbnufft": [197, 301], "torchmetr": [64, 68, 69, 70, 74, 75, 76], "torchmetric_kwarg": 75, "torchvis": [13, 15, 16, 17, 18, 19, 22, 25, 27, 30, 31, 34, 268, 287, 304, 308, 309, 311, 320, 321, 322, 327, 328, 335, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 392, 397], "torso": 87, "total": [12, 20, 21, 26, 42, 47, 55, 78, 100, 103, 104, 109, 114, 120, 130, 141, 142, 146, 149, 170, 174, 180, 184, 189, 192, 236, 237, 245, 266, 284, 287, 288, 292, 293, 301, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 374, 382, 384, 386, 393, 396], "total_batch": 47, "totalloss": [304, 319, 320, 321, 332, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 396], "totensor": [304, 308, 309, 311, 321, 327, 328, 335, 338, 350, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 392], "toulous": 369, "tour": [12, 14, 17, 19, 26, 28, 34, 39, 51, 77, 86, 88, 99, 107, 108, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 201, 202, 203, 204, 207, 208, 214, 231, 234, 236, 237, 239, 240, 241, 243, 244, 245, 261, 268, 280, 282, 284, 285, 290, 292, 295, 297, 314, 323, 324, 325, 374], "toward": [226, 327, 328], "tqdm": [12, 332, 344, 345], "track": [277, 377, 394], "tracker": [370, 371], "trade": 382, "tradeoff": 394, "tradit": [87, 301], "train": [0, 2, 12, 14, 15, 17, 19, 22, 26, 28, 32, 39, 44, 45, 47, 48, 51, 56, 58, 59, 60, 61, 62, 63, 64, 66, 70, 74, 75, 76, 77, 80, 81, 82, 83, 86, 87, 88, 90, 97, 98, 99, 100, 101, 107, 144, 174, 183, 184, 192, 254, 255, 256, 257, 259, 260, 274, 276, 284, 287, 296, 307, 308, 309, 311, 313, 315, 319, 323, 324, 325, 335, 336, 338, 339, 344, 345, 350, 372, 374, 382, 385, 388, 390, 391, 392, 394, 395, 396], "train_base_dataset": [352, 361, 362, 363, 365, 366], "train_batch_s": [321, 361, 362, 363, 364, 365, 366], "train_dataload": [12, 258, 260, 304, 311, 319, 320, 321, 332, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "train_datapoint": [28, 308, 321, 335, 338, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366], "train_dataset": [28, 304, 308, 309, 320, 321, 332, 335, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 375, 392], "train_dataset_nam": [321, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "train_img": 332, "train_it": 12, "train_loss": [36, 37, 46, 50, 64, 68, 69, 70, 74, 75, 76, 394], "train_perc": [26, 349, 351], "train_test_transform": [362, 363], "train_transform": [321, 361, 365, 366], "trainabl": [43, 45, 48, 52, 53, 54, 107, 274, 276, 280, 304, 313, 319, 320, 321, 337, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 365, 366, 385, 390], "trainable_param": [274, 276, 313, 361, 362, 363, 365, 366, 390], "trainer": [14, 74, 258, 260, 304, 319, 320, 321, 332, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 375, 382, 394, 395], "trainingset": 14, "trajectori": [20, 240, 307], "trajectory_first": 20, "trajectory_index": 20, "tran": 168, "transact": [79, 364], "transform": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 34, 39, 40, 41, 47, 77, 79, 86, 91, 94, 100, 102, 107, 109, 110, 148, 171, 174, 178, 180, 183, 184, 186, 187, 188, 189, 192, 196, 197, 199, 201, 205, 206, 207, 208, 216, 217, 224, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 282, 284, 285, 287, 290, 292, 301, 304, 308, 309, 317, 320, 321, 323, 324, 325, 326, 327, 328, 332, 335, 336, 338, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 374, 375, 379, 384, 387, 391, 393], "transform2": 322, "transform3": 322, "transform_data": 392, "transform_func": 205, "transform_func_inv": 205, "transform_kspac": 17, "transform_m": 23, "transform_pan": 23, "transform_target": 17, "transformerblock": 100, "transformparam": 268, "translat": [34, 98, 262, 266, 269, 270, 272, 350, 351, 393, 397], "transmiss": 181, "transpos": [77, 84, 92, 114, 123, 171, 174, 182, 184, 208, 221, 222, 223, 316, 379], "treat": [77, 207], "trick": 345, "trigger": [243, 312, 322], "trim": 206, "triplet": 14, "trivial": [181, 183, 342], "true": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 32, 34, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 50, 52, 53, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 85, 87, 88, 91, 93, 94, 95, 96, 98, 100, 102, 105, 107, 113, 114, 123, 135, 136, 139, 140, 142, 148, 150, 151, 152, 159, 160, 161, 162, 163, 171, 172, 177, 183, 184, 186, 187, 188, 190, 194, 196, 197, 199, 201, 206, 208, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 232, 238, 250, 251, 252, 253, 254, 257, 259, 260, 261, 264, 268, 273, 284, 287, 288, 292, 293, 294, 295, 296, 297, 301, 304, 307, 308, 309, 310, 311, 313, 314, 315, 317, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 373, 386, 387, 392, 394, 396, 397], "true_sigma": 357, "truli": [52, 53, 54], "truth": [12, 14, 16, 17, 19, 20, 32, 33, 44, 51, 59, 60, 72, 114, 123, 230, 242, 257, 260, 273, 274, 304, 310, 319, 320, 321, 327, 328, 331, 332, 336, 337, 339, 342, 343, 344, 345, 346, 349, 350, 355, 361, 362, 363, 365, 366, 382, 385, 393, 396], "try": [268, 301, 370, 373], "tun": 252, "tune": [158, 162, 304, 332, 339, 349], "tupl": [12, 14, 17, 20, 24, 29, 32, 44, 47, 53, 81, 85, 90, 94, 97, 102, 114, 123, 170, 171, 172, 173, 175, 177, 178, 181, 183, 186, 187, 188, 190, 195, 196, 197, 198, 199, 201, 205, 206, 211, 214, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 242, 244, 247, 253, 254, 255, 256, 257, 258, 260, 289, 290, 292, 294, 295, 297, 301, 396], "turn": [91, 253, 273, 274, 307, 322, 326, 331, 345, 384, 390, 394], "tutori": [82, 83, 123, 273, 344, 345, 369, 390], "tv": [55, 103, 104, 114, 120, 130, 141, 142, 146, 149, 170, 174, 180, 184, 189, 192, 284, 287, 288, 292, 293, 325, 329, 330, 363, 374], "tv_smooth": 363, "tvdenois": [146, 384], "tvloss": 393, "tvprior": [104, 327, 387], "tweedi": [47, 144, 345, 346, 388], "two": [16, 17, 43, 47, 48, 49, 66, 70, 135, 141, 145, 172, 183, 184, 189, 192, 208, 217, 239, 243, 268, 304, 331, 332, 344, 345, 351, 352, 353, 382, 387, 394], "twophoton_bpae_b": 16, "twophoton_bpae_g": 16, "twophoton_bpae_r": 16, "twophoton_mic": 16, "tx_prev": 123, "type": [12, 16, 17, 20, 33, 36, 37, 39, 44, 46, 48, 50, 56, 58, 70, 77, 97, 108, 171, 172, 174, 178, 187, 191, 192, 197, 199, 204, 206, 207, 208, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 239, 243, 245, 246, 247, 268, 280, 281, 282, 283, 285, 286, 287, 288, 291, 298, 299, 300, 304, 311, 314, 318, 322, 363, 382, 384, 392], "type_t": 87, "typic": [56, 58, 144, 178, 199, 379, 387, 388, 392], "u": [52, 53, 54, 84, 95, 107, 113, 120, 124, 125, 126, 128, 130, 131, 135, 141, 145, 170, 174, 184, 201, 209, 210, 273, 304, 311, 321, 336, 342, 344, 345, 352, 353, 354, 355, 356, 357, 364, 376, 381, 387, 390], "u0": 364, "u2": [103, 104], "u_": [123, 150, 151, 152, 153, 155, 157, 336, 365, 386, 387], "u_0": [114, 151], "u_adjoint": [170, 174, 201, 342], "u_init": [313, 365], "u_k": [123, 151, 153, 155, 157, 336, 365, 386, 387], "uair": 61, "uair_model": 304, "uairgeneratorloss": [304, 393], "uc": 332, "ucl": 369, "uk": 369, "ula": [35, 86, 88, 120, 130, 141, 142, 144, 174, 180, 183, 184, 189, 192, 254, 284, 290, 292, 325, 347, 348, 374, 388], "ula_mean": 342, "ula_var": 342, "ultim": 370, "ulyanov": [85, 310], "un": [81, 172, 357], "unadjust": [255, 256, 342, 346, 388], "unavail": 22, "unbias": [52, 53, 54, 319, 356], "uncertainti": [35, 86, 88, 120, 130, 141, 142, 144, 174, 180, 183, 184, 189, 192, 254, 256, 284, 290, 292, 325, 343, 347, 348, 372, 374], "uncondit": 375, "under": [87, 311, 314, 322, 332, 362, 363, 373], "underli": [12, 87, 136, 376], "undersampl": [14, 178, 186, 188, 199, 205, 206, 231, 236, 237, 245, 317, 320, 349, 355, 393], "underset": [89, 103, 104, 109, 110, 114, 122, 124, 126, 128, 130, 131, 141, 151, 184, 192, 301, 327, 328, 332, 365, 386, 387], "understand": 380, "understood": 310, "undesir": [137, 292], "unet": [87, 101, 105, 106, 260, 304, 320, 321, 350, 352, 353, 354, 355, 356, 357, 384], "uneven": [12, 394], "unflatten": [105, 172, 207, 268], "unfold": [0, 12, 19, 28, 39, 51, 86, 88, 95, 96, 109, 120, 124, 130, 138, 141, 142, 174, 177, 180, 183, 184, 189, 192, 257, 273, 274, 275, 276, 280, 284, 287, 292, 296, 313, 337, 352, 361, 368, 372, 374, 375, 382, 385], "unfolded_build": [313, 362, 363, 364, 365, 366, 390], "unfolded_pgd": [362, 363, 366], "ungrid": 197, "unif": 80, "unifi": 376, "uniform": [64, 76, 182, 197, 206, 209, 210, 236, 237, 245, 272, 298, 301, 317], "uniform_phas": 206, "uniformgaussiannois": 47, "uniformli": [208, 246, 264, 384], "uniformnois": [332, 381], "union": [17, 20, 197, 297, 301], "uniqu": [14, 103, 104], "unit": [93, 171, 184, 206, 233, 235, 315, 316, 344], "unitari": 198, "univ": 369, "unknown": [52, 53, 181, 182, 319, 350, 357, 375], "unless": 317, "unlik": [20, 79, 88, 253, 301], "unmix": [182, 319], "unnormalis": [237, 245], "unorgan": 45, "unpad": 14, "unrol": [12, 32, 44, 77, 108, 257, 258, 273, 280, 304, 313, 320, 349, 351, 361, 362, 363, 364, 365, 366, 384, 385, 390], "unshear": 172, "unsqueez": [174, 202, 301, 309, 314, 316, 317, 318, 319, 320, 326, 327, 328, 335, 338, 343, 346, 361, 364], "unsupadversarialdiscriminatorloss": [56, 304, 393], "unsupadversarialgeneratorloss": [58, 304, 393], "unsupervis": [45, 61, 62, 63, 82, 83, 262, 271, 304, 319, 350, 352, 393, 396], "unsur": [12, 19, 28, 39, 52, 53, 77, 86, 99, 107, 174, 176, 180, 184, 189, 192, 282, 284, 325, 358, 359, 374], "unti": 276, "until": 349, "untouch": 148, "untrain": 382, "unus": [70, 108, 242], "unwrap": 207, "up": [12, 15, 17, 21, 53, 87, 97, 104, 184, 262, 269, 272, 309, 313, 316, 332, 337, 361, 362, 364, 366, 392], "upcom": 322, "upconv": [84, 92], "updat": [12, 47, 104, 114, 115, 123, 135, 150, 151, 152, 153, 154, 156, 169, 170, 172, 174, 178, 179, 180, 182, 183, 185, 186, 187, 188, 192, 193, 194, 199, 202, 203, 204, 210, 277, 320, 332, 336, 338, 344, 345, 364, 365, 370, 373, 380, 387, 396], "update_data_fidelity_fn": [114, 123], "update_metrics_fn": [114, 123], "update_paramet": [32, 44, 45, 47, 48, 169, 170, 174, 179, 180, 182, 185, 186, 188, 193, 194, 202, 203, 204, 210], "update_params_fn": [114, 123], "update_prior_fn": [114, 123], "upgrad": 373, "upload": [310, 342, 343, 346], "upp": [225, 226], "upper": [225, 226], "upsampl": [84, 92, 97, 102, 379], "upsample_mod": [84, 92], "upscal": 102, "urban": [23, 27, 319, 350, 392], "urban100": [27, 304, 350], "urban100_hr": 27, "urban100_inpainting_homography_model": 350, "urban100hr": [304, 350, 392], "url": [17, 102, 283, 285, 287, 290, 307, 310, 313, 315, 317, 318, 319, 320, 331, 332, 336, 337, 339, 342, 343, 344, 345, 346, 349, 351, 352, 353, 354, 355, 356, 373, 377, 386], "us": [1, 3, 9, 13, 16, 20, 25, 33, 36, 37, 41, 46, 47, 50, 66, 70, 71, 73, 74, 75, 78, 89, 90, 93, 100, 101, 102, 104, 117, 123, 125, 134, 145, 156, 163, 164, 167, 168, 196, 205, 206, 217, 219, 220, 222, 223, 225, 226, 229, 230, 242, 255, 267, 301, 304, 307, 308, 309, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 396, 397], "usag": [48, 260, 292, 295, 380, 394, 397], "use_bicubic_init": 338, "use_brovei": 190, "use_checkpoint": 102, "use_fft": 177, "use_filt": 216, "use_fp16": 87, "use_sigmoid": 98, "user": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 20, 28, 47, 84, 87, 88, 92, 101, 102, 127, 149, 170, 173, 174, 176, 186, 190, 201, 257, 275, 276, 297, 319, 342, 373, 380, 387, 390, 396], "userwarn": [301, 312, 317, 320, 322, 344, 345, 349, 355, 356], "usual": [14, 20, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 260, 301, 344, 345, 394], "usv": 342, "ut": [118, 337], "util": [0, 12, 14, 17, 21, 23, 26, 28, 29, 30, 31, 49, 66, 71, 74, 89, 97, 122, 145, 162, 163, 164, 165, 166, 167, 168, 171, 181, 184, 190, 192, 202, 203, 204, 208, 249, 250, 252, 257, 258, 260, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 373, 380, 386, 389, 392, 394], "uv": 301, "uv_coordin": 301, "v": [114, 123, 135, 170, 173, 174, 182, 184, 186, 191, 192, 201, 273, 316, 336, 342, 355, 390, 394], "v_": [154, 156, 387], "v_adjoint": [170, 173, 174, 186, 201, 316, 342], "v_k": 336, "val": [15, 19, 22, 28, 277, 392], "val1": 22, "val_datapoint": 28, "val_dataset": [22, 28, 320], "val_transform": [308, 309, 327, 328, 335, 338], "valid": [15, 17, 28, 48, 108, 141, 169, 177, 190, 202, 218, 220, 221, 223, 229, 244, 307, 328, 350, 388, 391], "valu": [12, 16, 19, 20, 30, 47, 52, 53, 54, 57, 73, 75, 85, 87, 89, 94, 102, 103, 111, 113, 114, 121, 122, 123, 136, 137, 141, 144, 146, 148, 149, 163, 165, 168, 170, 174, 178, 179, 185, 186, 188, 194, 199, 201, 208, 217, 226, 231, 232, 238, 243, 250, 252, 255, 256, 268, 274, 275, 276, 277, 292, 295, 301, 310, 315, 316, 317, 318, 331, 342, 343, 344, 356, 362, 363, 366, 377, 378, 380, 384, 387, 388, 392, 394], "van": 164, "vanilla": [12, 19, 28, 39, 51, 86, 88, 114, 120, 130, 138, 141, 142, 149, 177, 180, 184, 189, 192, 208, 274, 276, 284, 285, 287, 290, 292, 293, 296, 325, 340, 341, 367, 368, 374], "var": [254, 343, 346], "var_has_converg": 254, "varepsilon": [251, 252, 344, 345], "varepsilon_t": 252, "varga": 255, "vari": [12, 15, 17, 32, 44, 105, 106, 178, 199, 202, 207, 231, 236, 237, 244, 245, 297, 320, 349, 379, 384, 392], "variabl": [14, 53, 54, 80, 95, 96, 103, 104, 113, 114, 115, 116, 117, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 140, 141, 143, 145, 146, 147, 148, 151, 268, 282, 308, 309, 313, 327, 328, 335, 336, 338, 339, 346, 349, 356, 357, 364, 365, 382, 387, 392], "varianc": [86, 179, 253, 254, 255, 256, 342, 343, 344, 346, 388, 394], "variant": [109, 110, 164], "variat": [55, 103, 104, 108, 114, 120, 130, 141, 142, 146, 149, 170, 174, 180, 184, 189, 192, 284, 287, 288, 292, 293, 325, 329, 330, 332, 374, 375, 384, 386, 393], "varieti": [375, 392], "variou": [6, 7, 11, 173, 178, 182, 186, 188, 199, 207, 304, 317, 319, 320, 343, 350, 354, 356, 357, 375, 388, 391, 393, 397], "varnet": [320, 389], "vdot": [196, 204, 249], "vector": [12, 38, 52, 53, 54, 80, 81, 83, 85, 103, 109, 114, 174, 178, 182, 184, 191, 192, 226, 237, 245, 256, 274, 342, 376], "veloc": 261, "verbos": [12, 28, 35, 38, 85, 103, 104, 114, 123, 161, 162, 163, 164, 165, 168, 184, 250, 251, 252, 253, 254, 255, 256, 257, 260, 284, 301, 304, 308, 310, 315, 321, 327, 328, 332, 335, 336, 337, 338, 339, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 387, 392], "verbose_individual_loss": 12, "veri": [260, 301, 304, 315, 320, 332, 345], "verif": 13, "verifi": [13, 15, 18, 22, 23, 25, 27, 165, 178, 184, 187, 254, 256, 357], "verify_split_dataset_integr": [15, 22], "version": [13, 15, 16, 18, 21, 22, 25, 27, 32, 45, 77, 91, 103, 104, 171, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 315, 344, 373], "vert": [45, 127, 314], "vert_2": 127, "vertic": [15, 55, 231, 236, 237, 245, 294, 349], "vgg": 304, "vi": [321, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "via": [26, 28, 41, 42, 70, 84, 87, 88, 89, 100, 101, 107, 122, 136, 144, 170, 171, 174, 178, 183, 184, 189, 191, 192, 198, 201, 202, 208, 243, 268, 301, 308, 326, 331, 336, 342, 344, 345, 346, 353, 354, 356, 357, 373, 380, 383, 387, 388, 390, 392, 395, 397], "vid": 297, "vid_list": 297, "video": [20, 32, 44, 178, 236, 237, 245, 267, 268, 297, 320, 349], "view": [14, 16, 244, 248, 265, 295, 297, 308, 317, 332, 345, 346, 392], "viridi": [301, 326], "virtual": [34, 41, 273, 390], "visibl": [268, 301, 320], "vision": [22, 119, 229, 301, 335], "visit": 345, "visual": [12, 301, 344, 345, 361, 362, 363, 364, 366, 377, 379], "visualis": [12, 199, 320, 349, 355, 397], "vjp": [184, 191, 192], "vol": [103, 104, 168], "volum": [17, 26, 186, 188, 320, 375], "volume_data": [314, 326], "volume_perserv": 261, "volumetr": 379, "vorst": 164, "voxel": [187, 235, 392], "vrv": 342, "vu": [86, 88, 114, 120, 130, 135, 138, 141, 142, 149, 159, 160, 174, 180, 184, 189, 192, 201, 284, 285, 290, 292, 293, 325, 340, 341, 374, 386], "w": [14, 17, 30, 31, 32, 44, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 85, 93, 97, 100, 102, 105, 106, 119, 139, 140, 169, 170, 171, 172, 173, 175, 178, 182, 183, 184, 186, 187, 188, 190, 197, 198, 199, 200, 201, 202, 205, 206, 207, 211, 212, 213, 218, 219, 220, 221, 222, 223, 229, 230, 231, 232, 234, 236, 237, 238, 242, 244, 245, 257, 268, 292, 295, 297, 301, 312, 314, 317, 320, 326, 335, 345, 349, 363, 364, 384, 394, 397], "w_k": [202, 229], "wa": [19, 23, 45, 48, 59, 60, 62, 63, 74, 79, 80, 81, 82, 83, 88, 90, 98, 100, 101, 102, 230, 255, 313, 319, 332, 345, 349, 355], "wai": [173, 304, 311, 313, 322, 351, 352, 353, 354, 356, 357, 370, 380, 394, 396], "wald": 97, "walk": 316, "wandb": [12, 361, 366], "wandb_setup": 12, "wandb_vi": [12, 321, 349, 351, 352, 353, 354, 356, 361, 362, 363, 364, 365, 366], "wang": [90, 262, 271, 319, 350, 372], "want": [12, 20, 28, 35, 38, 188, 207, 218, 221, 307, 314, 316, 320, 322, 327, 328, 338, 375, 380, 394, 396], "warm": 104, "warn": [141, 320, 349, 355, 356], "wavdict": 326, "wave": [235, 314], "wavelength": [233, 235, 314], "wavelet": [86, 109, 110, 114, 120, 130, 141, 142, 148, 149, 174, 180, 183, 184, 189, 192, 284, 287, 292, 293, 313, 325, 329, 330, 362, 365, 374, 384, 387], "waveletdenois": [110, 148, 313, 326, 365, 384], "waveletdictdenois": [326, 384], "waveletprior": [301, 326, 328, 362, 365, 387], "we": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 35, 45, 48, 74, 85, 87, 91, 109, 123, 124, 126, 135, 167, 171, 172, 173, 174, 178, 184, 185, 186, 188, 191, 199, 202, 206, 211, 224, 280, 292, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 369, 370, 375, 377, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397], "websit": 14, "weight": [12, 34, 41, 42, 46, 55, 56, 58, 59, 60, 61, 62, 63, 65, 74, 84, 87, 88, 89, 92, 93, 100, 101, 102, 122, 136, 158, 162, 163, 182, 197, 226, 238, 274, 276, 277, 313, 315, 321, 326, 331, 332, 336, 339, 345, 349, 351, 352, 353, 354, 356, 361, 362, 364, 365, 375, 384], "weight_adv": [56, 58, 59, 60, 61, 62, 63], "weight_decai": [304, 321, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 363, 365, 366], "weight_mc": 61, "weiss": [122, 229, 332], "welcom": [369, 370], "welford": 254, "well": [32, 34, 40, 41, 42, 43, 44, 51, 81, 123, 135, 171, 184, 208, 257, 274, 310, 316, 327, 328, 345, 372, 380, 386, 387], "were": [20, 304, 350, 363, 366], "wgan": [57, 304, 382, 393], "what": [20, 322], "when": [12, 17, 19, 20, 28, 33, 42, 43, 45, 48, 50, 68, 69, 85, 87, 104, 107, 114, 123, 136, 141, 142, 163, 167, 184, 192, 194, 207, 230, 243, 252, 264, 268, 304, 307, 308, 314, 317, 320, 336, 338, 342, 345, 346, 353, 355, 363, 370, 382, 384, 392, 393, 395, 396], "where": [12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 27, 28, 32, 34, 35, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 85, 89, 97, 99, 103, 104, 109, 110, 112, 113, 114, 120, 122, 123, 125, 127, 129, 135, 136, 139, 141, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 165, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 236, 237, 238, 240, 242, 245, 246, 249, 251, 252, 256, 257, 262, 268, 269, 270, 272, 273, 274, 292, 295, 296, 301, 304, 308, 310, 312, 314, 315, 317, 319, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 342, 344, 345, 346, 349, 352, 353, 356, 357, 362, 363, 364, 365, 375, 380, 381, 382, 386, 387, 388, 390, 392, 394, 396], "wherea": [12, 45, 48, 68, 69, 201, 214, 342, 344, 345, 385], "whether": [12, 17, 20, 23, 26, 35, 38, 57, 67, 80, 93, 95, 96, 98, 102, 103, 104, 114, 137, 149, 162, 163, 187, 226, 253, 259, 273, 274, 275, 276, 287, 288, 289, 290, 296, 393], "which": [9, 12, 14, 19, 20, 23, 28, 32, 35, 40, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 54, 57, 74, 80, 84, 88, 100, 105, 106, 111, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 156, 162, 168, 170, 171, 172, 173, 177, 182, 183, 184, 186, 188, 192, 197, 201, 208, 216, 217, 220, 222, 223, 226, 250, 251, 254, 257, 258, 259, 260, 261, 263, 268, 269, 270, 271, 272, 274, 276, 289, 290, 294, 308, 309, 311, 313, 314, 315, 317, 319, 320, 326, 327, 328, 331, 332, 335, 338, 342, 343, 344, 345, 346, 353, 354, 356, 357, 361, 362, 363, 365, 366, 372, 375, 377, 380, 381, 382, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397], "while": [9, 14, 86, 114, 163, 167, 304, 310, 314, 315, 316, 351, 382, 386, 387, 397], "whilst": 260, "white": [169, 170, 177, 184, 331, 344, 345, 379], "whiten": 301, "whole": [23, 32, 44, 91, 107, 122, 254, 331, 332, 349, 352, 353, 354, 355, 356, 357, 393], "whose": [39, 181, 208, 294, 296, 387], "why": [344, 345], "wide": [16, 392], "widefield_bpae_b": 16, "widefield_bpae_g": 16, "widefield_bpae_r": 16, "widehat": [251, 252, 326, 344, 345], "wider": 12, "width": [24, 29, 87, 95, 96, 122, 172, 178, 186, 196, 199, 208, 233, 235, 237, 245, 266, 292, 295, 326], "wiki": [45, 75, 164, 165, 175, 179, 234, 307, 314], "wikimedia": [310, 342, 343, 346], "wikipedia": [45, 75, 164, 165, 175, 179, 234, 307, 310, 314, 317, 342, 343, 346], "win": 370, "window": [94, 102, 215, 370], "window_s": 102, "wise": [67, 181, 187, 196, 304, 379], "withbia": 100, "within": [15, 17, 87, 320, 379, 385, 391, 395], "without": [28, 32, 44, 48, 74, 171, 183, 192, 208, 230, 232, 238, 242, 263, 264, 268, 274, 287, 349, 350, 370, 380, 396], "work": [9, 22, 85, 100, 268, 301, 310, 312, 314, 317, 320, 321, 338, 343, 344, 345, 349, 355, 356, 365, 397], "worker": 28, "workflow": [14, 370], "world": [22, 310, 342, 343, 346, 350, 369], "worldview": [23, 319], "wors": 355, "would": [301, 396], "wrap": [12, 13, 33, 36, 37, 46, 50, 64, 70, 76, 79, 187, 207, 261, 267, 268, 337, 361, 362, 363, 366, 384, 394], "wrap_flatten_c": 207, "wrapper": [14, 25, 27, 48, 51, 105, 106, 335, 377, 383, 384], "write": [17, 148, 251, 252, 326, 327, 328, 337, 338, 344, 345, 364, 387, 395, 396], "writer": 297, "written": [17, 114, 393], "wv": [109, 110, 148, 301, 313, 326, 328, 362, 365], "wv_list": 301, "wvdim": [109, 110, 148, 326], "ww": 218, "www": 21, "wx": 362, "x": [12, 14, 16, 17, 19, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 233, 234, 235, 240, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 267, 268, 269, 270, 271, 272, 273, 276, 279, 281, 291, 297, 298, 299, 300, 301, 304, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 322, 326, 327, 328, 332, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 352, 362, 363, 364, 365, 373, 375, 376, 379, 380, 381, 382, 385, 386, 387, 388, 390, 392, 393, 394, 396, 397], "x0": [168, 184, 320, 344, 345, 364], "x0_pred": 345, "x0_t": 345, "x1": [320, 377], "x2": [22, 103, 104, 317, 377], "x3": 22, "x4": 22, "x64": [322, 349], "x_": [114, 123, 135, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 252, 256, 274, 326, 336, 337, 342, 346, 362, 363, 365, 386, 387, 390], "x_0": [114, 151, 162, 168], "x_adj": 380, "x_aux": 344, "x_bar": 342, "x_cur": 326, "x_dagger": [184, 380], "x_est": [315, 318], "x_gd_rand": 315, "x_gd_spec": 315, "x_grai": 307, "x_gt": [114, 123, 273, 274, 301, 315, 327, 328, 336, 337, 339], "x_hat": [99, 276, 319, 326, 350, 373, 375, 386, 387, 390, 394], "x_hist": 123, "x_i": [41, 42, 118, 127, 134, 140, 182, 387, 394], "x_in": 35, "x_init": [114, 122, 123, 192, 251, 252, 254, 301, 313, 349, 365], "x_k": [114, 123, 135, 150, 151, 153, 154, 155, 156, 157, 158, 162, 256, 274, 336, 337, 346, 362, 363, 365, 386, 387, 390], "x_lin": [310, 327, 328, 336, 337, 339, 342, 343, 346], "x_model": [301, 327, 328, 336, 337, 339], "x_n": [187, 326], "x_net": [12, 32, 33, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 105, 106, 260, 319, 320, 393, 394, 396], "x_noisi": 344, "x_out": 331, "x_phase": 315, "x_phase_gd_rand": 315, "x_phase_gd_spec": 315, "x_phase_pnp": 315, "x_phase_spec": 315, "x_pnp": 315, "x_prev": [114, 123, 326, 336], "x_prox": [184, 344, 380], "x_prox_scal": 344, "x_recon": 161, "x_rgb": 307, "x_rss": 320, "x_sampl": 344, "x_sampled_sc": 344, "x_shift": [196, 268, 397], "x_spec": 315, "x_stretch_factor_min": [262, 269, 270, 271, 272], "x_t": [252, 262, 269, 270, 271, 272, 345], "x_train": 19, "x_true": [162, 337, 344, 345], "x_tv": 327, "x_wv": 328, "x_zf": 320, "xdg_data_hom": 282, "xhat": [114, 250, 252, 312, 326, 343, 344, 345], "xlabel": 344, "xlin": 316, "xlin2": 316, "xml": 21, "xprox": 316, "xprox2": 316, "xset": [114, 120, 141, 184, 192, 376, 380, 386, 387], "xt": 345, "xt_next": 345, "xxx": [13, 15, 18, 21, 22, 23, 25, 27, 392], "xxxxxxxxxxx": 17, "xy": 235, "y": [12, 14, 17, 19, 28, 29, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 58, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 85, 87, 89, 95, 97, 99, 103, 104, 105, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 145, 150, 151, 152, 153, 154, 156, 158, 162, 167, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 223, 229, 235, 240, 248, 250, 251, 252, 254, 256, 257, 258, 260, 262, 268, 269, 273, 274, 276, 297, 301, 304, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 328, 331, 332, 336, 337, 339, 342, 343, 344, 345, 346, 349, 350, 352, 353, 356, 357, 361, 362, 363, 364, 365, 366, 373, 375, 376, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 392, 393, 396, 397], "y1": 380, "y2": [316, 380], "y_": [200, 312], "y_1": [45, 48, 145, 355], "y_2": [45, 48, 145, 355], "y_bar": 342, "y_denois": 344, "y_hat": [61, 62, 63, 260], "y_i": [41, 42, 49, 112, 113, 118, 134, 140, 145, 203, 352, 387], "y_in": 35, "y_n": 188, "y_scale": 344, "y_shift": 196, "y_stretch_factor_min": [262, 269, 270, 271, 272], "y_t": [178, 199], "yaman": 48, "yang": 97, "yawli": 22, "ye": [17, 384, 385, 387, 393, 397], "yellow": 319, "yet": 310, "yield": [17, 148, 311, 362, 363], "ylabel": 344, "yosida": [144, 388], "you": [12, 17, 21, 23, 26, 28, 70, 74, 91, 188, 207, 218, 221, 261, 301, 304, 307, 309, 314, 316, 319, 320, 325, 326, 343, 344, 345, 346, 349, 351, 352, 353, 354, 355, 356, 357, 361, 366, 370, 371, 373, 378, 384, 385, 392, 393, 394, 396], "your": [12, 19, 26, 28, 56, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 86, 94, 119, 120, 130, 141, 142, 144, 170, 174, 176, 180, 184, 189, 192, 254, 256, 258, 284, 287, 290, 292, 304, 316, 323, 324, 325, 336, 347, 348, 370, 374, 375, 378, 385, 392, 396], "yourself": [320, 349, 373, 394], "yscale": 315, "yset": [114, 120, 184, 192, 376, 380, 386, 387], "yyi": 392, "yyyi": 12, "z": [52, 53, 54, 80, 83, 85, 123, 128, 132, 133, 135, 139, 144, 150, 152, 153, 167, 174, 177, 180, 184, 192, 193, 197, 209, 235, 256, 262, 269, 270, 271, 272, 301, 304, 310, 314, 336, 364, 379, 381, 382, 387, 388], "z0": [233, 235], "z10": [233, 234, 235], "z11": [233, 234, 235], "z4": [233, 234, 235], "z5": [233, 234, 235, 307, 314], "z6": [233, 234, 235, 307, 314], "z7": [233, 234, 235], "z8": [233, 234, 235], "z9": [233, 234, 235], "z_": [114, 135, 150, 151, 152, 153, 256, 274, 326, 336, 342, 365, 387, 390], "z_0": 151, "z_k": [114, 135, 150, 151, 152, 153, 274, 336, 346, 365, 387, 390], "z_p": 326, "z_prev": 336, "zebrafish": 16, "zenodo": [208, 217], "zernik": [233, 234, 235, 307, 314], "zernike_polynomi": [234, 307, 314], "zero": [32, 44, 48, 50, 109, 113, 163, 169, 170, 177, 183, 184, 196, 197, 199, 202, 205, 206, 207, 218, 230, 232, 237, 238, 264, 281, 300, 301, 307, 312, 314, 315, 316, 317, 320, 332, 342, 344, 345, 349, 363, 379, 396], "zero_boundari": 261, "zero_grad": [259, 332, 396], "zero_grad_d_onli": 259, "zero_grad_g_onli": 259, "zeros_lik": [184, 317, 320, 326, 363, 364, 387], "zeta": [252, 344], "zhang": [119, 308, 335], "zhou": 344, "zip": [14, 15, 18, 25, 287, 301, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366], "zoom": [262, 269, 272, 294, 377], "zoom_factor_min": [262, 269, 270, 271, 272], "zoran": [122, 332], "zuo": [119, 335], "zygalaki": 255, "\u00f6ktem": 364}, "titles": ["API", "deepinv.datasets", "deepinv.loss", "deepinv.metric", "deepinv.models", "deepinv.optim", "deepinv.physics", "deepinv.sampling", "deepinv.training", "deepinv.transform", "deepinv.unfolded", "deepinv.utils", "Trainer", "CBSD68", "CMRxReconSliceDataset", "DIV2K", "FMD", "FastMRISliceDataset", "Flickr2kHR", "HDF5Dataset", "Kohler", "LidcIdriSliceDataset", "LsdirHR", "NBUDataset", "PatchDataset", "Set14HR", "SimpleFastMRISliceDataset", "Urban100HR", "generate_dataset", "PlaceholderDataset", "Rescale", "ToComplex", "Artifact2ArtifactLoss", "BaseLossScheduler", "EILoss", "FNEJacobianSpectralNorm", "InterleavedEpochLossScheduler", "InterleavedLossScheduler", "JacobianSpectralNorm", "Loss", "MCLoss", "MOEILoss", "MOILoss", "Neighbor2Neighbor", "Phase2PhaseLoss", "R2RLoss", "RandomLossScheduler", "ScoreLoss", "SplittingLoss", "StackedPhysicsLoss", "StepLossScheduler", "SupLoss", "SureGaussianLoss", "SurePGLoss", "SurePoissonLoss", "TVLoss", "DiscriminatorLoss", "DiscriminatorMetric", "GeneratorLoss", "SupAdversarialDiscriminatorLoss", "SupAdversarialGeneratorLoss", "UAIRGeneratorLoss", "UnsupAdversarialDiscriminatorLoss", "UnsupAdversarialGeneratorLoss", "ERGAS", "L1L2", "LPIPS", "LpNorm", "MAE", "MSE", "Metric", "NIQE", "NMSE", "PSNR", "QNR", "SSIM", "SpectralAngleMapper", "ArtifactRemoval", "AutoEncoder", "BM3D", "CSGMGenerator", "ConvDecoder", "DCGANDiscriminator", "DCGANGenerator", "DRUNet", "DeepImagePrior", "Denoiser", "DiffUNet", "DnCNN", "EPLLDenoiser", "ESRGANDiscriminator", "EquivariantDenoiser", "GSDRUNet", "ICNN", "MedianFilter", "PDNet_DualBlock", "PDNet_PrimalBlock", "PanNet", "PatchGANDiscriminator", "Reconstructor", "Restormer", "SCUNet", "SwinIR", "TGVDenoiser", "TVDenoiser", "TimeAgnosticNet", "TimeAveragingNet", "UNet", "VarNet", "WaveletDenoiser", "WaveletDictDenoiser", "to_complex_denoiser", "AmplitudeLoss", "AmplitudeLossDistance", "BaseOptim", "Bregman", "BregmanL2", "Bregman_ICNN", "BurgEntropy", "DPIR", "DataFidelity", "Distance", "EPLL", "FixedPoint", "IndicatorL2", "IndicatorL2Distance", "L1", "L12Prior", "L1Distance", "L1Prior", "L2", "L2Distance", "LogPoissonLikelihood", "LogPoissonLikelihoodDistance", "NegEntropy", "OptimIterator", "PatchNR", "PatchPrior", "PnP", "PoissonLikelihood", "PoissonLikelihoodDistance", "Potential", "Prior", "RED", "ScorePrior", "StackedPhysicsDataFidelity", "TVPrior", "Tikhonov", "WaveletPrior", "optim_builder", "ADMMIteration", "CPIteration", "DRSIteration", "FISTAIteration", "GDIteration", "HQSIteration", "MDIteration", "PGDIteration", "SMIteration", "fStep", "gStep", "correct_global_phase", "spectral_methods", "GaussianMixtureModel", "bicgstab", "conjugate_gradient", "gradient_descent", "least_squares", "lsqr", "Blur", "BlurFFT", "CompressedSensing", "CompressiveSpectralImaging", "Decolorize", "DecomposablePhysics", "Demosaicing", "Denoising", "Downsampling", "DynamicMRI", "GammaNoise", "GaussianNoise", "Haze", "HyperSpectralUnmixing", "Inpainting", "LinearPhysics", "LogPoissonNoise", "MRI", "MRIMixin", "MultiCoilMRI", "NoiseModel", "Pansharpen", "PhaseRetrieval", "Physics", "PoissonGaussianNoise", "PoissonNoise", "Ptychography", "PtychographyLinearOperator", "RadioInterferometry", "RandomPhaseRetrieval", "SequentialMRI", "SinglePhotonLidar", "SinglePixelCamera", "SpaceVaryingBlur", "StackedLinearPhysics", "StackedPhysics", "StructuredRandom", "StructuredRandomPhaseRetrieval", "TimeMixin", "Tomography", "UniformGaussianNoise", "UniformNoise", "adjoint_function", "bicubic_filter", "bilinear_filter", "gaussian_blur", "sinc_filter", "IRadon", "Radon", "conv2d", "conv2d_fft", "conv3d_fft", "conv_transpose2d", "conv_transpose2d_fft", "conv_transpose3d_fft", "dst1", "histogram", "histogramdd", "multiplier", "multiplier_adjoint", "product_convolution2d", "Artifact2ArtifactSplittingMaskGenerator", "BaseMaskGenerator", "BernoulliSplittingMaskGenerator", "ConfocalBlurGenerator3D", "DiffractionBlurGenerator", "DiffractionBlurGenerator3D", "EquispacedMaskGenerator", "GaussianMaskGenerator", "GaussianSplittingMaskGenerator", "GeneratorMixture", "MotionBlurGenerator", "PSFGenerator", "Phase2PhaseSplittingMaskGenerator", "PhysicsGenerator", "ProductConvolutionBlurGenerator", "RandomMaskGenerator", "SigmaGenerator", "build_probe", "generate_shifts", "stack", "DDRM", "DPS", "DiffPIR", "DiffusionSampler", "MonteCarlo", "SKRock", "ULA", "test", "train", "AdversarialOptimizer", "AdversarialTrainer", "CPABDiffeomorphism", "Homography", "Reflect", "Rotate", "Scale", "Shift", "ShiftTime", "Transform", "Affine", "Euclidean", "PanTiltRotate", "Similarity", "BaseDEQ", "BaseUnfold", "DEQ_builder", "unfolded_builder", "AverageMeter", "ProgressMeter", "deepinv.utils.TensorList", "demo_mri_model", "dirac_like", "get_data_home", "get_degradation_url", "get_freer_gpu", "get_image_url", "get_timestamp", "load_dataset", "load_degradation", "load_image", "load_url_image", "ones_like", "plot", "plot_curves", "plot_inset", "plot_ortho3D", "plot_parameters", "plot_videos", "rand_like", "randn_like", "zeros_like", "Radio interferometric imaging with deepinverse", "Advanced", "Computation times", "Imaging inverse problems with adversarial networks", "Adversarial Learning", "Computation times", "A tour of blur operators", "Image deblurring with custom deep explicit prior.", "Creating your own dataset", "Reconstructing an image using the deep image prior.", "Using huggingface dataset", "Single photon lidar operator for depth ranging.", "Saving and loading models", "3D diffraction PSF", "Random phase retrieval and reconstruction methods.", "Creating a forward operator.", "A tour of forward sensing operators", "Ptychography phase retrieval", "Remote sensing with satellite images", "Tour of MRI functionality in DeepInverse", "Training a reconstruction network.", "Image transforms for equivariance &amp; augmentations", "Basics", "Computation times", "Examples", "3D wavelet denoising", "Image deblurring with Total-Variation (TV) prior", "Image inpainting with wavelet prior", "Optimization", "Computation times", "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting", "Patch priors for limited-angle computed tomography", "Patch Priors", "Computation times", "DPIR method for PnP image deblurring.", "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)", "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.", "Regularization by Denoising (RED) for Super-Resolution.", "Vanilla PnP for computed tomography (CT).", "Plug-and-Play", "Computation times", "Building your custom sampling algorithm.", "Image reconstruction with a diffusion model", "Implementing DiffPIR", "Implementing DPS", "Uncertainty quantification with PnP-ULA.", "Sampling", "Computation times", "Self-supervised MRI reconstruction with Artifact2Artifact", "Image transformations for Equivariant Imaging", "Self-supervised learning with Equivariant Imaging for MRI.", "Self-supervised learning from incomplete measurements of multiple operators.", "Self-supervised denoising with the Neighbor2Neighbor loss.", "Self-supervised denoising with the Generalized R2R loss.", "Self-supervised learning with measurement splitting", "Self-supervised denoising with the SURE loss.", "Self-supervised denoising with the UNSURE loss.", "Self-Supervised Learning", "Computation times", "Computation times", "Deep Equilibrium (DEQ) algorithms for image deblurring", "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing", "Learned iterative custom prior", "Learned Primal-Dual algorithm for CT scan.", "Unfolded Chambolle-Pock for constrained image inpainting", "Vanilla Unfolded algorithm for super-resolution", "Unfolded", "Computation times", "Community", "How to Contribute", "Finding Help", "DeepInverse: a PyTorch library for imaging with deep learning", "Quickstart", "Computation times", "User Guide", "Math Notation", "Utils", "Defining New Operators", "Functional", "Introduction", "Operators &amp; Noise", "Adversarial Networks", "Artifact Removal", "Denoisers", "Introduction", "Iterative Reconstruction (PnP, RED, etc.)", "Optimization", "Diffusion and MCMC Algorithms", "Specific Networks", "Unfolded Algorithms", "Pretrained Weights", "Datasets", "Training Losses", "Metrics", "Using Multiple GPUs", "Trainer", "Transforms"], "titleterms": {"1": [320, 322], "2": [320, 322], "3": [320, 322], "3d": [314, 320, 326], "4": 320, "5": 320, "6": 320, "A": [307, 317], "No": [3, 394], "The": [301, 344, 345], "Their": 381, "acceler": 320, "adjoint_funct": 211, "admmiter": 150, "advanc": [9, 302, 325, 397], "adversari": [2, 4, 8, 304, 305, 325, 382, 393], "adversarialoptim": 259, "adversarialtrain": 260, "affin": 269, "algorithm": [308, 310, 326, 327, 328, 332, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 361, 362, 363, 364, 366, 386, 387, 388, 390], "all": 344, "ambientgan": 304, "amplitudeloss": 112, "amplitudelossdist": 113, "an": [310, 320, 328, 344, 386], "angl": 332, "api": 0, "appli": [311, 312], "approxim": 345, "architectur": [389, 390], "artifact": [4, 383], "artifact2artifact": 349, "artifact2artifactloss": 32, "artifact2artifactsplittingmaskgener": 230, "artifactremov": 77, "augment": 322, "autoencod": 78, "averagemet": 277, "base": [2, 3, 4, 5, 6, 9, 308, 309, 321, 326, 327, 328, 335, 336, 338, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366], "basedeq": 273, "baselossschedul": 33, "basemaskgener": 231, "baseoptim": 114, "baseunfold": 274, "basic": [307, 323, 325], "benefit": 316, "bernoullisplittingmaskgener": 232, "bicgstab": 164, "bicubic_filt": 212, "bilinear_filt": 213, "block": 10, "blur": [169, 307, 308, 317, 327, 335], "blurfft": 170, "bm3d": 79, "bregman": [5, 115, 387], "bregman_icnn": 117, "bregmanl2": 116, "brigg": 301, "buffer": 311, "build": 342, "build_prob": 247, "burgentropi": 118, "camera": 317, "carlo": [7, 343, 388], "cbsd68": 13, "chain": [7, 388], "chambol": 365, "check": 357, "class": [2, 3, 4, 5, 6, 9, 338, 342], "classic": [4, 384], "cmrxreconslicedataset": 14, "combin": 380, "commun": 369, "comparison": 315, "complex": 384, "compress": [317, 362, 363], "compressedsens": 171, "compressivespectralimag": 172, "comput": [303, 306, 317, 324, 330, 332, 334, 339, 341, 348, 359, 360, 368, 374], "condat": 336, "condit": [304, 382], "confoc": 314, "confocalblurgenerator3d": 233, "conjugate_gradi": 165, "constrain": 365, "construct": 315, "contribut": 370, "conv2d": 218, "conv2d_fft": 219, "conv3d_fft": 220, "conv_transpose2d": 221, "conv_transpose2d_fft": 222, "conv_transpose3d_fft": 223, "convdecod": 81, "convolut": [307, 314], "correct": 315, "correct_global_phas": 161, "cpabdiffeomorph": 261, "cpiter": 151, "creat": [309, 311, 312, 316, 326, 342, 343, 346], "csgm": 304, "csgmgener": 80, "ct": [339, 364], "custom": [10, 308, 316, 336, 338, 342, 363, 364, 390], "data": [1, 5, 308, 309, 311, 313, 320, 321, 322, 326, 327, 328, 335, 336, 337, 338, 339, 344, 349, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 387, 392], "datafidel": 120, "dataload": [309, 311], "dataset": [1, 304, 308, 309, 311, 321, 327, 328, 335, 336, 338, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 392], "dcgandiscrimin": 82, "dcgangener": 83, "ddrm": 250, "deblur": [308, 327, 335, 361], "decolor": [173, 317], "decompos": 316, "decomposablephys": 174, "deep": [4, 10, 308, 310, 361, 372, 382, 384, 390], "deepimageprior": 85, "deepinv": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 279], "deepinvers": [301, 320, 372], "defin": [304, 308, 310, 313, 321, 336, 337, 342, 343, 345, 346, 349, 355, 361, 362, 363, 364, 365, 366, 378], "definit": [332, 338, 381], "degrad": [308, 309, 321, 327, 328, 335, 336, 338, 351, 352, 361, 362, 363, 364, 365, 366], "demo": 377, "demo_mri_model": 280, "demosa": [175, 317], "denois": [4, 86, 176, 315, 317, 322, 326, 331, 338, 343, 344, 345, 353, 354, 356, 357, 384, 393], "depend": [345, 380], "depth": 312, "deq": 361, "deq_build": 275, "descent": [315, 318, 337], "descript": 377, "diffpir": [252, 344], "diffract": [307, 314], "diffractionblurgener": 234, "diffractionblurgenerator3d": 235, "diffunet": 87, "diffus": [7, 343, 345, 388], "diffusionsampl": 253, "dip": 310, "dirac_lik": 281, "discrimin": 382, "discriminatorloss": 56, "discriminatormetr": 57, "displai": 318, "distanc": [5, 121], "distribut": [6, 381], "div2k": 15, "dncnn": 88, "downsampl": 177, "dp": [251, 345], "dpir": [119, 335], "drsiter": 152, "drunet": 84, "dst1": 224, "dual": [336, 364], "dykstra": 326, "dynam": [320, 384], "dynamicmri": 178, "eiloss": 34, "em": 332, "epll": [122, 331, 332], "eplldenois": 89, "equilibrium": [10, 361, 390], "equispacedmaskgener": 236, "equivari": [322, 350, 351, 384], "equivariantdenois": 91, "erga": 64, "esrgandiscrimin": 90, "estim": 318, "etc": 386, "euclidean": 270, "evalu": [308, 327, 328, 335, 336, 337, 338, 339], "event": 369, "exampl": [12, 14, 17, 19, 23, 24, 26, 27, 28, 32, 34, 35, 39, 40, 42, 43, 44, 45, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 97, 98, 99, 107, 108, 109, 110, 114, 115, 118, 119, 120, 122, 124, 126, 130, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 148, 149, 151, 154, 157, 159, 160, 161, 162, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 210, 214, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 287, 288, 290, 292, 293, 294, 295, 296, 297, 325, 343], "expect": 331, "explicit": 308, "explor": [320, 327, 328], "extens": 326, "fastmri": 320, "fastmrislicedataset": 17, "fidel": [5, 344, 364, 387], "filter": 312, "final": 318, "find": 371, "fistaiter": 153, "fixedpoint": 123, "flickr2khr": 18, "fmd": 16, "fnejacobianspectralnorm": 35, "forward": [310, 312, 313, 316, 317, 321, 332, 336, 339, 342, 343, 346, 365], "from": [310, 311, 315, 317, 318, 342, 343, 346, 352], "fstep": [159, 336], "full": [3, 394], "function": [6, 320, 377, 379], "futur": 369, "gammanois": 179, "gan": [304, 382], "gaussian_blur": 214, "gaussianmaskgener": 237, "gaussianmixturemodel": 163, "gaussiannois": 180, "gaussiansplittingmaskgener": 238, "gditer": 154, "gener": [1, 6, 304, 307, 308, 309, 310, 312, 314, 315, 316, 318, 321, 327, 328, 335, 342, 343, 344, 346, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366, 380, 381, 392], "generate_dataset": 28, "generate_shift": 248, "generatorloss": 58, "generatormixtur": 239, "get": 320, "get_data_hom": 282, "get_degradation_url": 283, "get_freer_gpu": 284, "get_image_url": 285, "get_timestamp": 286, "gpu": 395, "gradient": [315, 318, 362, 363], "gradient_desc": 166, "groundtruth": 301, "gsdrunet": 92, "gstep": [160, 336], "guid": 375, "haze": 181, "hdf5dataset": 19, "help": 371, "histogram": 225, "histogramdd": 226, "homographi": 262, "how": 370, "hqsiter": 155, "huggingfac": 311, "hyperspectralunmix": 182, "icnn": 93, "imag": [1, 4, 301, 304, 308, 309, 310, 315, 316, 317, 318, 319, 321, 322, 326, 327, 328, 331, 332, 335, 336, 338, 339, 342, 343, 346, 350, 351, 352, 353, 354, 356, 357, 361, 362, 363, 365, 366, 372, 382], "implement": [344, 345, 386], "import": 301, "incomplet": 352, "indicatorl2": 124, "indicatorl2dist": 125, "initi": 315, "inpaint": [183, 317, 328, 331, 365], "input": 318, "instal": 345, "interferometr": 301, "interleavedepochlossschedul": 36, "interleavedlossschedul": 37, "internet": [310, 311, 315, 317, 318, 342, 343, 346], "introduct": [380, 385, 393, 394], "invers": [304, 308, 327, 328, 335, 336, 337, 339, 344, 345], "involv": 338, "iradon": 216, "iter": [5, 326, 342, 362, 363, 364, 386, 387], "jacobianspectralnorm": 38, "knee": 351, "kohler": 20, "l1": 126, "l12prior": 127, "l1distanc": 128, "l1l2": 65, "l1prior": 129, "l2": 130, "l2distanc": 131, "langevin": 7, "learn": [2, 305, 325, 351, 352, 355, 357, 358, 362, 363, 364, 372, 384, 393], "least_squar": 167, "level": 357, "librari": [311, 372], "lidar": 312, "lidcidrislicedataset": 21, "like": 326, "likelihood": [331, 346], "limit": 332, "linear": [316, 380], "linearphys": 184, "list": 376, "lista": 362, "load": [308, 309, 310, 311, 313, 315, 317, 318, 319, 320, 321, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 345, 346, 349, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "load_dataset": 287, "load_degrad": 288, "load_imag": 289, "load_url_imag": 290, "log": [11, 331, 377], "logpoissonlikelihood": 132, "logpoissonlikelihooddist": 133, "logpoissonnois": 185, "loop": 332, "loss": [2, 39, 349, 353, 354, 355, 356, 357, 393], "low": [361, 366], "lpip": 66, "lpnorm": 67, "lsdirhr": 22, "lsqr": 168, "mae": 68, "markov": [7, 388], "match": 312, "math": 376, "mathemat": 376, "mcloss": 40, "mcmc": [346, 388], "mditer": 156, "measur": [301, 310, 312, 315, 318, 319, 342, 343, 346, 352, 355, 362, 363], "medianfilt": 94, "method": [315, 335, 385, 386, 388], "metric": [3, 70, 394], "microscop": 314, "mirror": 337, "mixtur": 307, "mmse": 343, "model": [4, 5, 304, 310, 312, 313, 318, 321, 327, 328, 331, 332, 335, 336, 337, 338, 339, 342, 343, 345, 346, 349, 355, 364, 365], "modul": 336, "moeiloss": 41, "moiloss": 42, "mont": [7, 343, 388], "montecarlo": 254, "motion": 307, "motionblurgener": 240, "mri": [186, 317, 320, 349, 351], "mrimixin": 187, "mse": 69, "multicoilmri": 188, "multipl": [326, 352, 395], "multipli": 227, "multiplier_adjoint": 228, "natur": 301, "nbudataset": 23, "negentropi": 134, "neighbor2neighbor": [43, 353], "network": [2, 4, 304, 319, 320, 321, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 382, 384, 389, 393], "neural": [319, 320], "new": 378, "niqe": 71, "nmse": 72, "nois": [6, 310, 332, 337, 342, 343, 344, 346, 357, 381], "noisemodel": 189, "noisi": [353, 354, 356, 357], "non": 384, "notat": 376, "ones_lik": 291, "oper": [6, 301, 307, 308, 310, 312, 313, 316, 317, 321, 326, 327, 328, 332, 335, 336, 338, 339, 342, 343, 346, 351, 352, 361, 362, 363, 364, 365, 366, 375, 378, 380, 381], "optim": [5, 308, 325, 327, 328, 329, 336, 387], "optim_build": 149, "optimiter": 135, "other": [1, 11, 377, 393], "our": 316, "overal": 315, "overlap": 318, "overview": [379, 384, 387, 392, 393], "own": 309, "packag": 301, "pan": [317, 319], "pannet": 97, "pansharpen": 190, "pantiltrot": 271, "paramet": [332, 339, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 366, 380, 387], "particular": 338, "past": 369, "patch": [325, 331, 332, 333], "patchdataset": 24, "patchgandiscrimin": 98, "patchnr": [136, 332], "patchprior": 137, "path": [308, 309, 313, 321, 326, 327, 328, 335, 336, 337, 338, 339, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "pattern": 301, "pdnet": 364, "pdnet_dualblock": 95, "pdnet_primalblock": 96, "pgditer": 157, "phantom": 364, "phase": [315, 318], "phase2phaseloss": 44, "phase2phasesplittingmaskgener": 242, "phaseretriev": 191, "photon": 312, "physic": [6, 192, 308, 318, 349, 380], "physicsgener": 243, "pixel": 317, "placeholderdataset": 29, "plai": [322, 325, 337, 340], "plot": [11, 292, 310, 312, 327, 328, 332, 336, 337, 339, 342, 343, 346, 362, 363, 366, 377], "plot_curv": 293, "plot_inset": 294, "plot_ortho3d": 295, "plot_paramet": 296, "plot_video": 297, "plug": [322, 325, 337, 340], "pnp": [138, 315, 335, 336, 337, 338, 339, 346, 366, 386], "pock": 365, "poisson": 337, "poissongaussiannois": 193, "poissonlikelihood": 139, "poissonlikelihooddist": 140, "poissonnois": 194, "potenti": [5, 141, 387], "precondit": 342, "predefin": [5, 386, 387, 392], "prep": 349, "prepar": [318, 355], "pretrain": 391, "primal": [336, 364], "prior": [4, 5, 142, 301, 308, 310, 325, 327, 328, 332, 333, 338, 342, 346, 363, 364, 382, 387], "probabl": 381, "probe": 318, "problem": [301, 304, 308, 320, 326, 327, 328, 335, 336, 337, 338, 339, 344, 345], "product_convolution2d": 229, "productconvolutionblurgener": 244, "progressmet": 278, "proxim": [362, 363], "psf": 314, "psfgener": 241, "psnr": 73, "ptychographi": [195, 318], "ptychographylinearoper": 196, "put": 344, "pytorch": 372, "qnr": 74, "quantif": 346, "quickstart": 373, "r2r": 354, "r2rloss": 45, "radio": 301, "radiointerferometri": 197, "radon": 217, "rand_lik": 298, "randn_lik": 299, "random": [315, 364], "randomlossschedul": 46, "randommaskgener": 245, "randomphaseretriev": 198, "rang": 312, "raw": [319, 320], "reconstruct": [308, 310, 315, 321, 332, 343, 349, 351, 352, 365, 375, 385, 386], "reconstructor": 99, "recov": 312, "red": [143, 338, 386], "refer": [3, 394], "reflect": 263, "regular": [2, 338, 344, 393], "remot": 319, "remov": [4, 383], "requir": 301, "rescal": 30, "resolut": [317, 338, 361, 366], "restorm": 100, "result": [308, 309, 310, 312, 313, 321, 326, 327, 328, 335, 336, 337, 338, 339, 342, 343, 346, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "retriev": [315, 318], "ri": 301, "rotat": 264, "routin": 379, "run": [310, 332, 342, 343, 346], "sampl": [7, 301, 325, 342, 343, 344, 346, 347], "sampler": [342, 343, 346], "satellit": 319, "save": [313, 365], "scale": 265, "scan": 364, "schedul": [2, 344, 345, 393], "scoreloss": 47, "scoreprior": 144, "scunet": 101, "self": [2, 325, 349, 351, 352, 353, 354, 355, 356, 357, 358, 393], "sens": [317, 319, 362], "sequentialmri": 199, "set": [308, 318, 321, 327, 328, 332, 335, 336, 339, 344, 351, 352, 353, 354, 356, 357, 365], "set14hr": 25, "setup": [308, 309, 313, 315, 318, 321, 326, 327, 328, 335, 336, 337, 338, 339, 351, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366], "sharpen": [317, 319], "shift": 266, "shifttim": 267, "shuffl": 311, "sigmagener": 246, "signal": [312, 315], "similar": 272, "simpl": [9, 397], "simplefastmrislicedataset": 26, "simul": [301, 319], "sinc_filt": 215, "singl": [312, 317], "singlephotonlidar": 200, "singlepixelcamera": 201, "skrock": 255, "smiter": 158, "soft": 362, "solv": [301, 308, 319, 326, 327, 328, 335, 336, 339], "space": 307, "spacevaryingblur": 202, "specif": 389, "spectral": 315, "spectral_method": 162, "spectralanglemapp": 76, "split": 355, "splittingloss": 48, "ssim": 75, "stack": 249, "stackedlinearphys": 203, "stackedphys": 204, "stackedphysicsdatafidel": 145, "stackedphysicsloss": 49, "standard": 342, "start": 320, "step": [344, 345], "steplossschedul": 50, "stream": 311, "structuredrandom": 205, "structuredrandomphaseretriev": 206, "subsampl": 352, "summari": 391, "supadversarialdiscriminatorloss": 59, "supadversarialgeneratorloss": 60, "super": [317, 338, 366], "supervis": [2, 325, 349, 351, 352, 353, 354, 355, 356, 357, 358, 393], "suploss": 51, "sure": 356, "suregaussianloss": 52, "surepgloss": 53, "surepoissonloss": 54, "swinir": 102, "symbol": 376, "tensorlist": [11, 279, 377], "term": 364, "test": [257, 321, 331, 332, 349, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 375], "tgvdenois": 103, "thi": 338, "threshold": 362, "tikhonov": 147, "time": [303, 306, 324, 330, 334, 341, 348, 359, 360, 368, 374, 397], "timeagnosticnet": 105, "timeaveragingnet": 106, "timemixin": 207, "to_complex_denois": 111, "tocomplex": 31, "togeth": 344, "toi": [312, 316], "tomographi": [208, 317, 332, 339], "total": 327, "tour": [307, 317, 320], "train": [8, 258, 304, 320, 321, 332, 349, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 375, 393], "trainabl": 364, "trainer": [12, 396], "transform": [1, 9, 268, 311, 322, 350, 392, 397], "tv": 327, "tvdenois": 104, "tvloss": 55, "tvprior": 146, "uair": 304, "uairgeneratorloss": 61, "ula": [256, 342, 346], "uncertainti": 346, "uncondit": 382, "unet": 107, "unfold": [10, 325, 362, 363, 364, 365, 366, 367, 390], "unfolded_build": 276, "uniformgaussiannois": 209, "uniformnois": 210, "unsupadversarialdiscriminatorloss": 62, "unsupadversarialgeneratorloss": 63, "unsur": 357, "up": [308, 318, 321, 327, 328, 335, 336, 339, 351, 352, 353, 354, 356, 357, 365], "urban100hr": 27, "us": [12, 14, 17, 19, 23, 24, 26, 27, 28, 32, 34, 35, 39, 40, 42, 43, 44, 45, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 97, 98, 99, 107, 108, 109, 110, 114, 115, 118, 119, 120, 122, 124, 126, 130, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 148, 149, 151, 154, 157, 159, 160, 161, 162, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 210, 214, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 287, 288, 290, 292, 293, 294, 295, 296, 297, 310, 311, 316, 320, 326, 344, 345, 395], "user": 375, "util": [4, 5, 11, 279, 375, 377, 384, 387], "vanilla": [339, 366], "vari": 307, "variat": 327, "varnet": 108, "verifi": 316, "video": [9, 397], "visual": [315, 318], "volum": 326, "vu": 336, "wavelet": [301, 326, 328], "waveletdenois": 109, "waveletdictdenois": 110, "waveletprior": 148, "weight": [301, 363, 366, 391], "widefield": 314, "your": [309, 342, 344, 345], "zeros_lik": 300}})